# GitHub workflow for functional tests
# Tests consistencty of model being generated
name: Test model generation
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:

# Required env variables for pyfluent
env:
  MAIN_PYTHON_VERSION: 3.8
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  PYFLUENT_START_INSTANCE: 0
  PYFLUENT_LAUNCH_CONTAINER: 1          
  FLUENT_IMAGE_TAG: v23.1.0


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Tests requiring PyFluent
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      # Login to Github container registry and pull Fluent image. if image-cach doesn't exist
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.REPO_DOWNLOAD_PAT }}

      - name: Pull 23.1 Fluent docker image
        run: | 
          docker pull ghcr.io/ansys/pyfluent:$FLUENT_IMAGE_TAG          
          docker image prune -f

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .         

      - name: Install testing dependencies
        run: |
          python -m pip install -r requirements_tests.txt

      - name: Test PyFluent launch
        continue-on-error: false
        run: |
          python -m pytest tests/heart/test_pyfluent.py

      - name: Test PyFluent on simple meshes
        continue-on-error: false
        run: |
          python -m pytest tests/heart/preprocessor/test_mesher.py

      - name: Cache large files
        id: cache-strocchi
        uses: actions/cache@v3
        env:
          cache-name: cache-strocchi
        with:
          # cache the case file that will be downloaded in tests/heart/assets/cases/Strocchi2020
          path: /home/runner/work/pyheart-lib/pyheart-lib/tests/heart/assets/cases/Strocchi2020
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Cache file check
        continue-on-error: true
        run: ls -R -lh /home/runner/work/pyheart-lib/pyheart-lib/tests/heart/assets/cases/Strocchi2020

      - name: Test biventricle model generation 1
        continue-on-error: false
        run: |
          python -m pytest tests/heart/test_biventricle_mesh_extraction.py
          ls -R -lh /home/runner/work/pyheart-lib/pyheart-lib/tests/heart/assets/cases/

      # - name: Test biventricle model generation 2
      #   continue-on-error: false
      #   run: |
      #     python -m pytest tests/heart/test_biventricle_mesh_extraction_with_bloodpool.py

      - name: Test full heart model generation
        continue-on-error: false
        run: |
          python -m pytest tests/heart/test_fullheart_mesh_extraction.py
