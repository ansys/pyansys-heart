[
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#conductionpathtype",
        "title": "ConductionPathType",
        "section": "ConductionPathType",
        "text": "Bases: enum.Enum\nConduction Path types.\nConductionPathType\nConductionPathType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ansys.health.heart.pre.conduction_path.ConductionPathType",
        "title": "ConductionPathType > ConductionPathType > ConductionPathType",
        "section": "ConductionPathType > ConductionPathType",
        "text": "class ansys.health.heart.pre.conduction_path.ConductionPathType(*args, **kwds)\n\nBases: enum.Enum\n\nConduction Path types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#overview",
        "title": "ConductionPathType > Overview",
        "section": "Overview",
        "text": "LEFT_PURKINJE\nLeft Purkinje network.\nRIGHT_PURKINJE\nRight Purkinje network.\nSAN_AVN\nSino-atrial node to atrio-ventricular node.\nMID_SAN_AVN\nSino-atrial node to atrio-ventricular node.\nPOST_SAN_AVN\nSino-atrial node to atrio-ventricular node.\nLEFT_BUNDLE_BRANCH\nLeft bundle branch.\nRIGHT_BUNDLE_BRANCH\nRight bundle branch.\nHIS_TOP\nTop part of the His bundle.\nHIS_LEFT\nLeft part of the His bundle.\nHIS_RIGHT\nRight part of the His bundle.\nBACHMANN_BUNDLE\nBachmann bundle.\nLEFT_ANTERIOR_FASCILE\nLeft anterior fascicle.\nLEFT_POSTERIOR_FASCICLE\nLeft posterior fascicle.\nUSER_PAHT_1\nUser path 1.\nUSER_PAHT_2\nUser path 2.\nUSER_PAHT_3\nUser path 3.\nOverview\nLEFT_PURKINJE\nRIGHT_PURKINJE\nSAN_AVN\nMID_SAN_AVN\nPOST_SAN_AVN\nLEFT_BUNDLE_BRANCH\nRIGHT_BUNDLE_BRANCH\nHIS_TOP\nHIS_LEFT\nHIS_RIGHT\nBACHMANN_BUNDLE\nLEFT_ANTERIOR_FASCILE\nLEFT_POSTERIOR_FASCICLE\nUSER_PAHT_1\nUSER_PAHT_2\nUSER_PAHT_3"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#import-detail",
        "title": "ConductionPathType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#attribute-detail",
        "title": "ConductionPathType > Attribute detail",
        "section": "Attribute detail",
        "text": "Left Purkinje network.\nRight Purkinje network.\nSino-atrial node to atrio-ventricular node.\nSino-atrial node to atrio-ventricular node.\nSino-atrial node to atrio-ventricular node.\nLeft bundle branch.\nRight bundle branch.\nTop part of the His bundle.\nLeft part of the His bundle.\nRight part of the His bundle.\nBachmann bundle.\nLeft anterior fascicle.\nLeft posterior fascicle.\nUser path 1.\nUser path 2.\nUser path 3.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.LEFT_PURKINJE",
        "title": "ConductionPathType > Attribute detail > LEFT_PURKINJE",
        "section": "Attribute detail > LEFT_PURKINJE",
        "text": "ConductionPathType.LEFT_PURKINJE = 'Left-purkinje'\n\nLeft Purkinje network.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.RIGHT_PURKINJE",
        "title": "ConductionPathType > Attribute detail > RIGHT_PURKINJE",
        "section": "Attribute detail > RIGHT_PURKINJE",
        "text": "ConductionPathType.RIGHT_PURKINJE = 'Right-purkinje'\n\nRight Purkinje network.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.SAN_AVN",
        "title": "ConductionPathType > Attribute detail > SAN_AVN",
        "section": "Attribute detail > SAN_AVN",
        "text": "ConductionPathType.SAN_AVN = 'SAN_to_AVN'\n\nSino-atrial node to atrio-ventricular node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.MID_SAN_AVN",
        "title": "ConductionPathType > Attribute detail > MID_SAN_AVN",
        "section": "Attribute detail > MID_SAN_AVN",
        "text": "ConductionPathType.MID_SAN_AVN = 'MID_SAN_to_AVN'\n\nSino-atrial node to atrio-ventricular node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.POST_SAN_AVN",
        "title": "ConductionPathType > Attribute detail > POST_SAN_AVN",
        "section": "Attribute detail > POST_SAN_AVN",
        "text": "ConductionPathType.POST_SAN_AVN = 'POST_SAN_to_AVN'\n\nSino-atrial node to atrio-ventricular node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.LEFT_BUNDLE_BRANCH",
        "title": "ConductionPathType > Attribute detail > LEFT_BUNDLE_BRANCH",
        "section": "Attribute detail > LEFT_BUNDLE_BRANCH",
        "text": "ConductionPathType.LEFT_BUNDLE_BRANCH = 'Left bundle branch'\n\nLeft bundle branch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.RIGHT_BUNDLE_BRANCH",
        "title": "ConductionPathType > Attribute detail > RIGHT_BUNDLE_BRANCH",
        "section": "Attribute detail > RIGHT_BUNDLE_BRANCH",
        "text": "ConductionPathType.RIGHT_BUNDLE_BRANCH = 'Right bundle branch'\n\nRight bundle branch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.HIS_TOP",
        "title": "ConductionPathType > Attribute detail > HIS_TOP",
        "section": "Attribute detail > HIS_TOP",
        "text": "ConductionPathType.HIS_TOP = 'His_top'\n\nTop part of the His bundle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.HIS_LEFT",
        "title": "ConductionPathType > Attribute detail > HIS_LEFT",
        "section": "Attribute detail > HIS_LEFT",
        "text": "ConductionPathType.HIS_LEFT = 'His_left'\n\nLeft part of the His bundle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.HIS_RIGHT",
        "title": "ConductionPathType > Attribute detail > HIS_RIGHT",
        "section": "Attribute detail > HIS_RIGHT",
        "text": "ConductionPathType.HIS_RIGHT = 'His_right'\n\nRight part of the His bundle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.BACHMANN_BUNDLE",
        "title": "ConductionPathType > Attribute detail > BACHMANN_BUNDLE",
        "section": "Attribute detail > BACHMANN_BUNDLE",
        "text": "ConductionPathType.BACHMANN_BUNDLE = 'Bachmann bundle'\n\nBachmann bundle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.LEFT_ANTERIOR_FASCILE",
        "title": "ConductionPathType > Attribute detail > LEFT_ANTERIOR_FASCILE",
        "section": "Attribute detail > LEFT_ANTERIOR_FASCILE",
        "text": "ConductionPathType.LEFT_ANTERIOR_FASCILE = 'Left anterior fascicle'\n\nLeft anterior fascicle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.LEFT_POSTERIOR_FASCICLE",
        "title": "ConductionPathType > Attribute detail > LEFT_POSTERIOR_FASCICLE",
        "section": "Attribute detail > LEFT_POSTERIOR_FASCICLE",
        "text": "ConductionPathType.LEFT_POSTERIOR_FASCICLE = 'Left posterior fascicle'\n\nLeft posterior fascicle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.USER_PAHT_1",
        "title": "ConductionPathType > Attribute detail > USER_PAHT_1",
        "section": "Attribute detail > USER_PAHT_1",
        "text": "ConductionPathType.USER_PAHT_1 = 'User path 1'\n\nUser path 1.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.USER_PAHT_2",
        "title": "ConductionPathType > Attribute detail > USER_PAHT_2",
        "section": "Attribute detail > USER_PAHT_2",
        "text": "ConductionPathType.USER_PAHT_2 = 'User path 2'\n\nUser path 2.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPathType",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPathType.html#ConductionPathType.USER_PAHT_3",
        "title": "ConductionPathType > Attribute detail > USER_PAHT_3",
        "section": "Attribute detail > USER_PAHT_3",
        "text": "ConductionPathType.USER_PAHT_3 = 'User path 3'\n\nUser path 3.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/index",
        "href": "api/ansys/health/heart/writer/ep_writer/index.html#the-ep_writerpy-module",
        "title": "The ep_writer.py module",
        "section": "The ep_writer.py module",
        "text": "The ep_writer.py module\nep_writer.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/index",
        "href": "api/ansys/health/heart/writer/ep_writer/index.html#summary",
        "title": "The ep_writer.py module > Summary",
        "section": "Summary",
        "text": "PurkinjeGenerationDynaWriter\nClass for preparing the input for a Purkinje LS-DYNA simulation.\nElectrophysiologyDynaWriter\nClass for preparing the input for an electrophysiology LS-DYNA simulation.\nElectrophysiologyBeamsDynaWriter\nClass for preparing the input for an electrophysiology LS-DYNA simulation with beams only.\nSummary\nPurkinjeGenerationDynaWriter\nElectrophysiologyDynaWriter\nElectrophysiologyBeamsDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/index",
        "href": "api/ansys/health/heart/writer/ep_writer/index.html#description",
        "title": "The ep_writer.py module > Description",
        "section": "Description",
        "text": "Module containing classes for writing LS-DYNA keyword files for electrophysiology simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/fibers/index",
        "href": "api/ansys/health/heart/settings/defaults/fibers/index.html#the-fiberspy-module",
        "title": "The fibers.py module",
        "section": "The fibers.py module",
        "text": "The fibers.py module\nfibers.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/fibers/index",
        "href": "api/ansys/health/heart/settings/defaults/fibers/index.html#summary",
        "title": "The fibers.py module > Summary",
        "section": "Summary",
        "text": "angles\nla_bundle\nra_bundle\nSummary\nangles\nla_bundle\nra_bundle"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/fibers/index",
        "href": "api/ansys/health/heart/settings/defaults/fibers/index.html#description",
        "title": "The fibers.py module > Description",
        "section": "Description",
        "text": "Module contains default values for fiber generation.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/fibers/index",
        "href": "api/ansys/health/heart/settings/defaults/fibers/index.html#module-detail",
        "title": "The fibers.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/fibers/index",
        "href": "api/ansys/health/heart/settings/defaults/fibers/index.html#fibers.angles",
        "title": "The fibers.py module > Module detail > angles",
        "section": "Module detail > angles",
        "text": "fibers.angles\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/fibers/index",
        "href": "api/ansys/health/heart/settings/defaults/fibers/index.html#fibers.la_bundle",
        "title": "The fibers.py module > Module detail > la_bundle",
        "section": "Module detail > la_bundle",
        "text": "fibers.la_bundle\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/fibers/index",
        "href": "api/ansys/health/heart/settings/defaults/fibers/index.html#fibers.ra_bundle",
        "title": "The fibers.py module > Module detail > ra_bundle",
        "section": "Module detail > ra_bundle",
        "text": "fibers.ra_bundle\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#ahastraincalculator",
        "title": "AhaStrainCalculator",
        "section": "AhaStrainCalculator",
        "text": "Compute longitudinal, radial, and circumferential strain for the left ventricle.\nAhaStrainCalculator\nAhaStrainCalculator"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#ansys.health.heart.post.strain_calculator.AhaStrainCalculator",
        "title": "AhaStrainCalculator > AhaStrainCalculator > AhaStrainCalculator",
        "section": "AhaStrainCalculator > AhaStrainCalculator",
        "text": "class ansys.health.heart.post.strain_calculator.AhaStrainCalculator(model: ansys.health.heart.models.HeartModel, d3plot_file)\n\nCompute longitudinal, radial, and circumferential strain for the left ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#overview",
        "title": "AhaStrainCalculator > Overview",
        "section": "Overview",
        "text": "compute_aha_strain\nCompute AHA 17 segment strain values from the deformation gradient.\ncompute_aha_strain_at\nExport AHA strain and/or save a VTK file for a given frame.\nmodel\naha_labels\nd3plot\nbullseye_17_segments\nBullseye representation of the 17 segments of the left ventricle.\nOverview\ncompute_aha_strain\ncompute_aha_strain_at\nmodel\naha_labels\nd3plot\nbullseye_17_segments"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#import-detail",
        "title": "AhaStrainCalculator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#attribute-detail",
        "title": "AhaStrainCalculator > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.model",
        "title": "AhaStrainCalculator > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "AhaStrainCalculator.model\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.aha_labels",
        "title": "AhaStrainCalculator > Attribute detail > aha_labels",
        "section": "Attribute detail > aha_labels",
        "text": "AhaStrainCalculator.aha_labels\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.d3plot",
        "title": "AhaStrainCalculator > Attribute detail > d3plot",
        "section": "Attribute detail > d3plot",
        "text": "AhaStrainCalculator.d3plot\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#method-detail",
        "title": "AhaStrainCalculator > Method detail",
        "section": "Method detail",
        "text": "Compute AHA 17 segment strain values from the deformation gradient.\nOutput folder.\nWhether to write to VTK files.\nTime to stop.\nArray of N_time * (1+17*3). Columns represent time and\nlongitudinal, radial, and circumferential strain averaged of each segment.\nExport AHA strain and/or save a VTK file for a given frame.\nFrame number to compute strain.\nDirectory to save VTK file to. No VTK file is saved by default.\nAHA LRC strain matrix (17 * 3).\nBullseye representation of the 17 segments of the left ventricle.\nIntensity values for each of the 17 segments.\nThis function creates the 17-segment model for the left ventricle according\nto the American Heart Association (AHA) [1].\nThis method is modified from the Matplotlibs bullseye\nexample. Copyright© 2012- Matplotlib Development Team; All Rights Reserved.\nModifications consisted of removing colors and including the values for each segment.\nM. D. Cerqueira, N. J. Weissman, V. Dilsizian, A. K. Jacobs,\nS. Kaul, W. K. Laskey, D. J. Pennell, J. A. Rumberger, T. Ryan,\nand M. S. Verani, “Standardized myocardial segmentation and\nnomenclature for tomographic imaging of the heart”,\nCirculation, vol. 105, no. 4, pp. 539-542, 2002.\n[1]\nMethod detail\npython:str\npython:None\npython:False\npython:float\nnp.ndarray\nnp.ndarry\naxes\npython:list\nof\npython:int\nand\npython:float\nMatplotlibs"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.compute_aha_strain",
        "title": "AhaStrainCalculator > Method detail > compute_aha_strain",
        "section": "Method detail > compute_aha_strain",
        "text": "AhaStrainCalculator.compute_aha_strain(out_dir: str = None, write_vtk: bool = False, t_to_keep: float = 100000000000.0) -> numpy.ndarray\n\nCompute AHA 17 segment strain values from the deformation gradient.\n\nParameters\n\nout_dir\n\npython:str, default: python:None\n\nOutput folder.\n\nwrite_vtk\n\nbool, default: python:False\n\nWhether to write to VTK files.\n\nt_to_keep\n\npython:float, default: 10e10\n\nTime to stop.\n\nReturns\n\nnp.ndarray\n\nArray of N_time * (1+17*3). Columns represent time and\nlongitudinal, radial, and circumferential strain averaged of each segment.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.compute_aha_strain_at",
        "title": "AhaStrainCalculator > Method detail > compute_aha_strain_at",
        "section": "Method detail > compute_aha_strain_at",
        "text": "AhaStrainCalculator.compute_aha_strain_at(frame: int = 0, out_dir: pathlib.Path = None) -> numpy.ndarray\n\nExport AHA strain and/or save a VTK file for a given frame.\n\nParameters\n\nframe: int, default: 0\n\nFrame number to compute strain.\n\nout_dir: pathlib.Path, default: None\n\nDirectory to save VTK file to. No VTK file is saved by default.\n\nReturns\n\nnp.ndarry\n\nAHA LRC strain matrix (17 * 3).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/health/heart/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.bullseye_17_segments",
        "title": "AhaStrainCalculator > Method detail > bullseye_17_segments",
        "section": "Method detail > bullseye_17_segments",
        "text": "static AhaStrainCalculator.bullseye_17_segments(ax, data) -> None\n\nBullseye representation of the 17 segments of the left ventricle.\n\nParameters\n\nax\n\naxes\n\n\n\ndata\n\npython:list of python:int and python:float\n\nIntensity values for each of the 17 segments.\n\nNotes\n\nThis function creates the 17-segment model for the left ventricle according\nto the American Heart Association (AHA) [1].\n\nThis method is modified from the Matplotlibs bullseye\nexample. Copyright© 2012- Matplotlib Development Team; All Rights Reserved.\nModifications consisted of removing colors and including the values for each segment.\n\nReferences\n\n1\n\nM. D. Cerqueira, N. J. Weissman, V. Dilsizian, A. K. Jacobs,\nS. Kaul, W. K. Laskey, D. J. Pennell, J. A. Rumberger, T. Ryan,\nand M. S. Verani, “Standardized myocardial segmentation and\nnomenclature for tomographic imaging of the heart”,\nCirculation, vol. 105, no. 4, pp. 539-542, 2002.\n\n[1]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#the-electrophysiologypy-module",
        "title": "The electrophysiology.py module",
        "section": "The electrophysiology.py module",
        "text": "The electrophysiology.py module\nelectrophysiology.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#summary",
        "title": "The electrophysiology.py module > Summary",
        "section": "Summary",
        "text": "heart\nGeneric analysis settings.\nanalysis\nMaterial settings.\nmaterial\nStimulation settings.\nstimulation\nSummary\nheart\nanalysis\nmaterial\nstimulation"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#description",
        "title": "The electrophysiology.py module > Description",
        "section": "Description",
        "text": "Module contains default values for EP (Electrophysiology) simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#module-detail",
        "title": "The electrophysiology.py module > Module detail",
        "section": "Module detail",
        "text": "Generic analysis settings.\nMaterial settings.\nStimulation settings.\nModule detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#electrophysiology.heart",
        "title": "The electrophysiology.py module > Module detail > heart",
        "section": "Module detail > heart",
        "text": "electrophysiology.heart\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#electrophysiology.analysis",
        "title": "The electrophysiology.py module > Module detail > analysis",
        "section": "Module detail > analysis",
        "text": "electrophysiology.analysis\n\nMaterial settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#electrophysiology.material",
        "title": "The electrophysiology.py module > Module detail > material",
        "section": "Module detail > material",
        "text": "electrophysiology.material\n\nStimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/electrophysiology/index",
        "href": "api/ansys/health/heart/settings/defaults/electrophysiology/index.html#electrophysiology.stimulation",
        "title": "The electrophysiology.py module > Module detail > stimulation",
        "section": "Module detail > stimulation",
        "text": "electrophysiology.stimulation\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#electrophysiology",
        "title": "Electrophysiology",
        "section": "Electrophysiology",
        "text": "Bases: Settings\nClass for keeping track of EP settings.\nElectrophysiology\nElectrophysiology\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#ansys.health.heart.settings.settings.Electrophysiology",
        "title": "Electrophysiology > Electrophysiology > Electrophysiology",
        "section": "Electrophysiology > Electrophysiology",
        "text": "class ansys.health.heart.settings.settings.Electrophysiology\n\nBases: Settings\n\nClass for keeping track of EP settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#overview",
        "title": "Electrophysiology > Overview",
        "section": "Overview",
        "text": "material\nMaterial settings/configuration.\nanalysis\nGeneric analysis settings.\nstimulation\nStimulation settings.\nOverview\nmaterial\nanalysis\nstimulation"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#import-detail",
        "title": "Electrophysiology > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#attribute-detail",
        "title": "Electrophysiology > Attribute detail",
        "section": "Attribute detail",
        "text": "Material settings/configuration.\nGeneric analysis settings.\nStimulation settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#Electrophysiology.material",
        "title": "Electrophysiology > Attribute detail > material",
        "section": "Attribute detail > material",
        "text": "Electrophysiology.material: EpMaterial\n\nMaterial settings/configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#Electrophysiology.analysis",
        "title": "Electrophysiology > Attribute detail > analysis",
        "section": "Attribute detail > analysis",
        "text": "Electrophysiology.analysis: EPAnalysis\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Electrophysiology",
        "href": "api/ansys/health/heart/settings/settings/Electrophysiology.html#Electrophysiology.stimulation",
        "title": "Electrophysiology > Attribute detail > stimulation",
        "section": "Attribute detail > stimulation",
        "text": "Electrophysiology.stimulation: AttrDict[str, Stimulation] = None\n\nStimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/pvloop/index",
        "href": "api/ansys/health/heart/post/pvloop/index.html#the-pvlooppy-module",
        "title": "The pvloop.py module",
        "section": "The pvloop.py module",
        "text": "The pvloop.py module\npvloop.py"
    },
    {
        "objectID": "api/ansys/health/heart/post/pvloop/index",
        "href": "api/ansys/health/heart/post/pvloop/index.html#summary",
        "title": "The pvloop.py module > Summary",
        "section": "Summary",
        "text": "write_pvloop_pngs\nWrite PV loop figures to a PNG file.\ngenerate_pvloop\nGenerate PV loop figures from the ICVOUT file.\nCV_NAME\nSummary\nwrite_pvloop_pngs\ngenerate_pvloop\nCV_NAME"
    },
    {
        "objectID": "api/ansys/health/heart/post/pvloop/index",
        "href": "api/ansys/health/heart/post/pvloop/index.html#description",
        "title": "The pvloop.py module > Description",
        "section": "Description",
        "text": "Get pressure-volume (PV) loop from the LS-DYNA ICVOUT file.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/post/pvloop/index",
        "href": "api/ansys/health/heart/post/pvloop/index.html#module-detail",
        "title": "The pvloop.py module > Module detail",
        "section": "Module detail",
        "text": "Write PV loop figures to a PNG file.\nPressure array.\nVolume array.\nDirectory to save the file to.\nGenerate PV loop figures from the ICVOUT file.\nPath to the binout file.\nDirectory to save the file to.\nTime to keep from the end. The default is 800, which is the last heart beat.\nModule detail\nnp.ndarray\nnp.ndarray\npython:str\npython:str\npython:str\npython:float\noptional\n800"
    },
    {
        "objectID": "api/ansys/health/heart/post/pvloop/index",
        "href": "api/ansys/health/heart/post/pvloop/index.html#pvloop.write_pvloop_pngs",
        "title": "The pvloop.py module > Module detail > write_pvloop_pngs",
        "section": "Module detail > write_pvloop_pngs",
        "text": "pvloop.write_pvloop_pngs(pressure: numpy.ndarray, volume: numpy.ndarray, save_to: str) -> None\n\nWrite PV loop figures to a PNG file.\n\nParameters\n\npressure\n\nnp.ndarray\n\nPressure array.\n\nvolume\n\nnp.ndarray\n\nVolume array.\n\nsave_to\n\npython:str\n\nDirectory to save the file to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/pvloop/index",
        "href": "api/ansys/health/heart/post/pvloop/index.html#pvloop.generate_pvloop",
        "title": "The pvloop.py module > Module detail > generate_pvloop",
        "section": "Module detail > generate_pvloop",
        "text": "pvloop.generate_pvloop(f: str, out_dir: str, t_to_keep: float = 800) -> None\n\nGenerate PV loop figures from the ICVOUT file.\n\nParameters\n\nf\n\npython:str\n\nPath to the binout file.\n\nout_dir\n\npython:str\n\nDirectory to save the file to.\n\nt_to_keep\n\npython:float, optional\n\nTime to keep from the end. The default is 800, which is the last heart beat.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/pvloop/index",
        "href": "api/ansys/health/heart/post/pvloop/index.html#pvloop.CV_NAME",
        "title": "The pvloop.py module > Module detail > CV_NAME",
        "section": "Module detail > CV_NAME",
        "text": "pvloop.CV_NAME = ['LV', 'RV', 'LA', 'RA']\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models/LeftVentricle",
        "href": "api/ansys/health/heart/models/LeftVentricle.html#leftventricle",
        "title": "LeftVentricle",
        "section": "LeftVentricle",
        "text": "Bases: HeartModel\nModel of only the left ventricle.\nLeftVentricle\nLeftVentricle\nHeartModel"
    },
    {
        "objectID": "api/ansys/health/heart/models/LeftVentricle",
        "href": "api/ansys/health/heart/models/LeftVentricle.html#ansys.health.heart.models.LeftVentricle",
        "title": "LeftVentricle > LeftVentricle > LeftVentricle",
        "section": "LeftVentricle > LeftVentricle",
        "text": "class ansys.health.heart.models.LeftVentricle(working_directory: pathlib.Path | str = None)\n\nBases: HeartModel\n\nModel of only the left ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/LeftVentricle",
        "href": "api/ansys/health/heart/models/LeftVentricle.html#overview",
        "title": "LeftVentricle > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nOverview\nleft_ventricle"
    },
    {
        "objectID": "api/ansys/health/heart/models/LeftVentricle",
        "href": "api/ansys/health/heart/models/LeftVentricle.html#import-detail",
        "title": "LeftVentricle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/LeftVentricle",
        "href": "api/ansys/health/heart/models/LeftVentricle.html#attribute-detail",
        "title": "LeftVentricle > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/LeftVentricle",
        "href": "api/ansys/health/heart/models/LeftVentricle.html#LeftVentricle.left_ventricle",
        "title": "LeftVentricle > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "LeftVentricle.left_ventricle: ansys.health.heart.parts.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/auto_process/index",
        "href": "api/ansys/health/heart/post/auto_process/index.html#the-auto_processpy-module",
        "title": "The auto_process.py module",
        "section": "The auto_process.py module",
        "text": "The auto_process.py module\nauto_process.py"
    },
    {
        "objectID": "api/ansys/health/heart/post/auto_process/index",
        "href": "api/ansys/health/heart/post/auto_process/index.html#summary",
        "title": "The auto_process.py module > Summary",
        "section": "Summary",
        "text": "zerop_post\nPostprocess the zero-pressure folder.\nmech_post\nPostprocess the mechanical simulation folder.\nSummary\nzerop_post\nmech_post"
    },
    {
        "objectID": "api/ansys/health/heart/post/auto_process/index",
        "href": "api/ansys/health/heart/post/auto_process/index.html#description",
        "title": "The auto_process.py module > Description",
        "section": "Description",
        "text": "Script used to postprocess simulations automatically.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/post/auto_process/index",
        "href": "api/ansys/health/heart/post/auto_process/index.html#module-detail",
        "title": "The auto_process.py module > Module detail",
        "section": "Module detail",
        "text": "Postprocess the zero-pressure folder.\nPath to the simulation folder.\nModel to postprocess.\nDictionary with convergence information,\nstress free configuration, and\ncomputed end-of-diastolic configuration.\nPostprocess the mechanical simulation folder.\nPath to the d3plot folder.\nHeart model.\nModule detail\npython:str\nHeartModel\npython:tuple\npython:dict\nnp.ndarray\nnp.ndarray\npython:str\nHeartModel"
    },
    {
        "objectID": "api/ansys/health/heart/post/auto_process/index",
        "href": "api/ansys/health/heart/post/auto_process/index.html#auto_process.zerop_post",
        "title": "The auto_process.py module > Module detail > zerop_post",
        "section": "Module detail > zerop_post",
        "text": "auto_process.zerop_post(directory: str, model: ansys.health.heart.models.HeartModel) -> tuple[dict, numpy.ndarray, numpy.ndarray]\n\nPostprocess the zero-pressure folder.\n\nParameters\n\ndirectory\n\npython:str\n\nPath to the simulation folder.\n\nmodel\n\nHeartModel\n\nModel to postprocess.\n\nReturns\n\npython:tuple[python:dict, np.ndarray, np.ndarray]\n\nDictionary with convergence information,\nstress free configuration, and\ncomputed end-of-diastolic configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/auto_process/index",
        "href": "api/ansys/health/heart/post/auto_process/index.html#auto_process.mech_post",
        "title": "The auto_process.py module > Module detail > mech_post",
        "section": "Module detail > mech_post",
        "text": "auto_process.mech_post(directory: str, model: ansys.health.heart.models.HeartModel) -> None\n\nPostprocess the mechanical simulation folder.\n\nParameters\n\ndirectory\n\npython:str\n\nPath to the d3plot folder.\n\nmodel\n\nHeartModel\n\nHeart model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#systemmodelpost",
        "title": "SystemModelPost",
        "section": "SystemModelPost",
        "text": "Postprocessing system model.\nThe units are ms, kPa, and mL.\nSystemModelPost\nSystemModelPost"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#ansys.health.heart.post.system_model_post.SystemModelPost",
        "title": "SystemModelPost > SystemModelPost > SystemModelPost",
        "section": "SystemModelPost > SystemModelPost",
        "text": "class ansys.health.heart.post.system_model_post.SystemModelPost(dir: str)\n\nPostprocessing system model.\n\nNotes\n\nThe units are ms, kPa, and mL.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#overview",
        "title": "SystemModelPost > Overview",
        "section": "Overview",
        "text": "get_ejection_fraction\nCompute ejection fraction on a given time interval.\nplot_pv_loop\nPlot PV loop.\ndir\nmodel_type\nlv_system\nOverview\nget_ejection_fraction\nplot_pv_loop\ndir\nmodel_type\nlv_system"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#import-detail",
        "title": "SystemModelPost > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#attribute-detail",
        "title": "SystemModelPost > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#SystemModelPost.dir",
        "title": "SystemModelPost > Attribute detail > dir",
        "section": "Attribute detail > dir",
        "text": "SystemModelPost.dir\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#SystemModelPost.model_type",
        "title": "SystemModelPost > Attribute detail > model_type",
        "section": "Attribute detail > model_type",
        "text": "SystemModelPost.model_type = 'LV'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#SystemModelPost.lv_system",
        "title": "SystemModelPost > Attribute detail > lv_system",
        "section": "Attribute detail > lv_system",
        "text": "SystemModelPost.lv_system\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#method-detail",
        "title": "SystemModelPost > Method detail",
        "section": "Method detail",
        "text": "Compute ejection fraction on a given time interval.\nStart time.\nEnd time.\nEjection fraction.\nPlot PV loop.\nStart time to plot.\nEnd time to plot.\nWhether to show the end of the diastole state in zeropressure.\nEjection fraction to show in the legend.\nFigure handle.\nMethod detail\npython:float\npython:float\npython:float\npython:float\npython:float\npython:True\npython:list\npython:float\npython:float\npython:None\npython:None\nplt.Figure"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#SystemModelPost.get_ejection_fraction",
        "title": "SystemModelPost > Method detail > get_ejection_fraction",
        "section": "Method detail > get_ejection_fraction",
        "text": "SystemModelPost.get_ejection_fraction(t_start: float = 0, t_end: float = 100000000000.0) -> float\n\nCompute ejection fraction on a given time interval.\n\nParameters\n\nt_start\n\npython:float, default: 0\n\nStart time.\n\nt_end\n\npython:float, default: 10e10\n\nEnd time.\n\nReturns\n\npython:float\n\nEjection fraction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemModelPost",
        "href": "api/ansys/health/heart/post/system_model_post/SystemModelPost.html#SystemModelPost.plot_pv_loop",
        "title": "SystemModelPost > Method detail > plot_pv_loop",
        "section": "Method detail > plot_pv_loop",
        "text": "SystemModelPost.plot_pv_loop(t_start: float = 0, t_end: float = 100000000000.0, show_ed: bool = True, ef: list[float, float] = [None, None]) -> matplotlib.pyplot.Figure\n\nPlot PV loop.\n\nParameters\n\nt_start\n\npython:float, default: 0\n\nStart time to plot.\n\nt_end\n\npython:float, default: 10e10\n\nEnd time to plot.\n\nshow_ed\n\nbool, default: python:True\n\nWhether to show the end of the diastole state in zeropressure.\n\nef\n\npython:list[python:float, python:float], default: [python:None, python:None]\n\nEjection fraction to show in the legend.\n\nReturns\n\nplt.Figure\n\nFigure handle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model5",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model5.html#model5",
        "title": "Model5",
        "section": "Model5",
        "text": "Hold data for active model 5.\nModel5\nModel5"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model5",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model5.html#ansys.health.heart.settings.material.material.ActiveModel.Model5",
        "title": "Model5 > Model5 > Model5",
        "section": "Model5 > Model5",
        "text": "class ansys.health.heart.settings.material.material.ActiveModel.Model5\n\nHold data for active model 5.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model5",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model5.html#import-detail",
        "title": "Model5 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialCap",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialCap.html#materialcap",
        "title": "MaterialCap",
        "section": "MaterialCap",
        "text": "Bases: ansys.dyna.core.keywords.keywords.MatNull\nMaterial of the closing cap/valves.\nInherits from the Null type material.\nMaterialCap\nMaterialCap\nansys.dyna.core.keywords.keywords.MatNull\nkeywords.MatNull"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialCap",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialCap.html#ansys.health.heart.writer.material_keywords.MaterialCap",
        "title": "MaterialCap > MaterialCap > MaterialCap",
        "section": "MaterialCap > MaterialCap",
        "text": "class ansys.health.heart.writer.material_keywords.MaterialCap(mid: int = 1)\n\nBases: ansys.dyna.core.keywords.keywords.MatNull\n\nMaterial of the closing cap/valves.\n\nParameters\n\nkeywords\n\nkeywords.MatNull\n\nInherits from the Null type material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialCap",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialCap.html#import-detail",
        "title": "MaterialCap > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "examples/postprocessor/sg_execution_times",
        "href": "examples/postprocessor/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:09.113 total execution time for 1 file from examplespostprocessor:\nExample\nTime\nMem (MB)\nsphx_glr_examples_postprocessor_ep-postprocess-reaction-eikonal.py (ep-postprocess-reaction-eikonal.py)\n00:09.113\n0.0\nComputation times\nep-postprocess-reaction-eikonal.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#hgofiber",
        "title": "HGOFiber",
        "section": "HGOFiber",
        "text": "Define HGO type fiber from k1 and k2.\nHGOFiber\nHGOFiber"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#ansys.health.heart.settings.material.material.ANISO.HGOFiber",
        "title": "HGOFiber > HGOFiber > HGOFiber",
        "section": "HGOFiber > HGOFiber",
        "text": "class ansys.health.heart.settings.material.material.ANISO.HGOFiber\n\nDefine HGO type fiber from k1 and k2.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#overview",
        "title": "HGOFiber > Overview",
        "section": "Overview",
        "text": "k1\nk1 for HGO model.\nk2\nk2 for HGO model.\na\nFiber dispersion tensor parameter.\nb\nFiber dispersion tensor parameter.\nOverview\nk1\nk2\na\nb"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#import-detail",
        "title": "HGOFiber > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#attribute-detail",
        "title": "HGOFiber > Attribute detail",
        "section": "Attribute detail",
        "text": "k1 for HGO model.\nk2 for HGO model.\nFiber dispersion tensor parameter.\nFiber dispersion tensor parameter.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#HGOFiber.k1",
        "title": "HGOFiber > Attribute detail > k1",
        "section": "Attribute detail > k1",
        "text": "HGOFiber.k1: float = None\n\nk1 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#HGOFiber.k2",
        "title": "HGOFiber > Attribute detail > k2",
        "section": "Attribute detail > k2",
        "text": "HGOFiber.k2: float = None\n\nk2 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#HGOFiber.a",
        "title": "HGOFiber > Attribute detail > a",
        "section": "Attribute detail > a",
        "text": "HGOFiber.a: float = 0.0\n\nFiber dispersion tensor parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.HGOFiber.html#HGOFiber.b",
        "title": "HGOFiber > Attribute detail > b",
        "section": "Attribute detail > b",
        "text": "HGOFiber.b: float = 1.0\n\nFiber dispersion tensor parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/index",
        "href": "api/ansys/health/heart/settings/material/material/index.html#the-materialpy-module",
        "title": "The material.py module",
        "section": "The material.py module",
        "text": "The material.py module\nmaterial.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/index",
        "href": "api/ansys/health/heart/settings/material/material/index.html#summary",
        "title": "The material.py module > Summary",
        "section": "Summary",
        "text": "ISO\nIsotropic module of MAT_295.\nANISO\nAnisotropic module of MAT_295.\nActiveModel\nAbstract class for different active models.\nACTIVE\nActive module of MAT_295.\nMechanicalMaterialModel\nBase class for all mechanical material model.\nMat295\nHold data for MAT_ANISOTROPIC_HYPERELASTIC (MAT_295).\nNeoHookean\nPassive isotropic material with MAT_77H.\nSummary\nISO\nANISO\nActiveModel\nACTIVE\nMechanicalMaterialModel\nMat295\nNeoHookean"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/index",
        "href": "api/ansys/health/heart/settings/material/material/index.html#description",
        "title": "The material.py module > Description",
        "section": "Description",
        "text": "Material module.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Point",
        "href": "api/ansys/health/heart/objects/Point.html#point",
        "title": "Point",
        "section": "Point",
        "text": "Bases: Feature\nPoint class, which can be used to collect relevant points in the mesh.\nPoint\nPoint\nFeature"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Point",
        "href": "api/ansys/health/heart/objects/Point.html#ansys.health.heart.objects.Point",
        "title": "Point > Point > Point",
        "section": "Point > Point",
        "text": "class ansys.health.heart.objects.Point(name: str = None, xyz: numpy.ndarray = None, node_id: int = None)\n\nBases: Feature\n\nPoint class, which can be used to collect relevant points in the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Point",
        "href": "api/ansys/health/heart/objects/Point.html#overview",
        "title": "Point > Overview",
        "section": "Overview",
        "text": "xyz\nXYZ coordinates of the point.\nnode_id\nGlobal node ID of the point.\nOverview\nxyz\nnode_id"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Point",
        "href": "api/ansys/health/heart/objects/Point.html#import-detail",
        "title": "Point > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Point",
        "href": "api/ansys/health/heart/objects/Point.html#attribute-detail",
        "title": "Point > Attribute detail",
        "section": "Attribute detail",
        "text": "XYZ coordinates of the point.\nGlobal node ID of the point.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Point",
        "href": "api/ansys/health/heart/objects/Point.html#Point.xyz",
        "title": "Point > Attribute detail > xyz",
        "section": "Attribute detail > xyz",
        "text": "Point.xyz: numpy.ndarray = None\n\nXYZ coordinates of the point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Point",
        "href": "api/ansys/health/heart/objects/Point.html#Point.node_id",
        "title": "Point > Attribute detail > node_id",
        "section": "Attribute detail > node_id",
        "text": "Point.node_id: int = None\n\nGlobal node ID of the point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#systemmodel",
        "title": "SystemModel",
        "section": "SystemModel",
        "text": "Bases: Settings\nStores settings/parameters for system model.\nSystemModel\nSystemModel\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#ansys.health.heart.settings.settings.SystemModel",
        "title": "SystemModel > SystemModel > SystemModel",
        "section": "SystemModel > SystemModel",
        "text": "class ansys.health.heart.settings.settings.SystemModel\n\nBases: Settings\n\nStores settings/parameters for system model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#overview",
        "title": "SystemModel > Overview",
        "section": "Overview",
        "text": "name\nName of the system model.\nleft_ventricle\nParameters for the left ventricle.\nright_ventricle\nParameters for the right ventricle.\nOverview\nname\nleft_ventricle\nright_ventricle"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#import-detail",
        "title": "SystemModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#attribute-detail",
        "title": "SystemModel > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of the system model.\nParameters for the left ventricle.\nParameters for the right ventricle.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#SystemModel.name",
        "title": "SystemModel > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "SystemModel.name: str = 'ConstantPreloadWindkesselAfterload'\n\nName of the system model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#SystemModel.left_ventricle",
        "title": "SystemModel > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "SystemModel.left_ventricle: AttrDict = None\n\nParameters for the left ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SystemModel",
        "href": "api/ansys/health/heart/settings/settings/SystemModel.html#SystemModel.right_ventricle",
        "title": "SystemModel > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "SystemModel.right_ventricle: AttrDict = None\n\nParameters for the right ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#the-mechanicspy-module",
        "title": "The mechanics.py module",
        "section": "The mechanics.py module",
        "text": "The mechanics.py module\nmechanics.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#summary",
        "title": "The mechanics.py module > Summary",
        "section": "Summary",
        "text": "heart\nGeneric analysis settings.\nanalysis\nMaterial settings.\nmaterial\nBoundary condition settings.\nboundary_conditions\nSystem model parameters.\nco\ntau\npee\nrp\nca\nra\nrv\nsystem_model\nsystem_model3\nSummary\nheart\nanalysis\nmaterial\nboundary_conditions\nco\ntau\npee\nrp\nca\nra\nrv\nsystem_model\nsystem_model3"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#description",
        "title": "The mechanics.py module > Description",
        "section": "Description",
        "text": "Module contains default values for mechanics simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#module-detail",
        "title": "The mechanics.py module > Module detail",
        "section": "Module detail",
        "text": "Generic analysis settings.\nMaterial settings.\nBoundary condition settings.\nSystem model parameters.\nModule detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.heart",
        "title": "The mechanics.py module > Module detail > heart",
        "section": "Module detail > heart",
        "text": "mechanics.heart\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.analysis",
        "title": "The mechanics.py module > Module detail > analysis",
        "section": "Module detail > analysis",
        "text": "mechanics.analysis\n\nMaterial settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.material",
        "title": "The mechanics.py module > Module detail > material",
        "section": "Module detail > material",
        "text": "mechanics.material\n\nBoundary condition settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.boundary_conditions",
        "title": "The mechanics.py module > Module detail > boundary_conditions",
        "section": "Module detail > boundary_conditions",
        "text": "mechanics.boundary_conditions\n\nSystem model parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.co",
        "title": "The mechanics.py module > Module detail > co",
        "section": "Module detail > co",
        "text": "mechanics.co\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.tau",
        "title": "The mechanics.py module > Module detail > tau",
        "section": "Module detail > tau",
        "text": "mechanics.tau\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.pee",
        "title": "The mechanics.py module > Module detail > pee",
        "section": "Module detail > pee",
        "text": "mechanics.pee\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.rp",
        "title": "The mechanics.py module > Module detail > rp",
        "section": "Module detail > rp",
        "text": "mechanics.rp\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.ca",
        "title": "The mechanics.py module > Module detail > ca",
        "section": "Module detail > ca",
        "text": "mechanics.ca\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.ra",
        "title": "The mechanics.py module > Module detail > ra",
        "section": "Module detail > ra",
        "text": "mechanics.ra\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.rv",
        "title": "The mechanics.py module > Module detail > rv",
        "section": "Module detail > rv",
        "text": "mechanics.rv\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.system_model",
        "title": "The mechanics.py module > Module detail > system_model",
        "section": "Module detail > system_model",
        "text": "mechanics.system_model\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/mechanics/index",
        "href": "api/ansys/health/heart/settings/defaults/mechanics/index.html#mechanics.system_model3",
        "title": "The mechanics.py module > Module detail > system_model3",
        "section": "Module detail > system_model3",
        "text": "mechanics.system_model3\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#electromechanicsdynawriter",
        "title": "ElectroMechanicsDynaWriter",
        "section": "ElectroMechanicsDynaWriter",
        "text": "Bases: ansys.health.heart.writer.mechanics_writer.MechanicsDynaWriter, ansys.health.heart.writer.ep_writer.ElectrophysiologyDynaWriter\nClass for preparing the input for LS-DYNA electromechanical simulation.\nElectroMechanicsDynaWriter\nElectroMechanicsDynaWriter\nansys.health.heart.writer.mechanics_writer.MechanicsDynaWriter\nansys.health.heart.writer.ep_writer.ElectrophysiologyDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#ansys.health.heart.writer.ep_mechanics_writer.ElectroMechanicsDynaWriter",
        "title": "ElectroMechanicsDynaWriter > ElectroMechanicsDynaWriter > ElectroMechanicsDynaWriter",
        "section": "ElectroMechanicsDynaWriter > ElectroMechanicsDynaWriter",
        "text": "class ansys.health.heart.writer.ep_mechanics_writer.ElectroMechanicsDynaWriter(model: ansys.health.heart.models.HeartModel, settings: ansys.health.heart.settings.settings.SimulationSettings | None = None)\n\nBases: ansys.health.heart.writer.mechanics_writer.MechanicsDynaWriter, ansys.health.heart.writer.ep_writer.ElectrophysiologyDynaWriter\n\nClass for preparing the input for LS-DYNA electromechanical simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#overview",
        "title": "ElectroMechanicsDynaWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate the keyword database.\nkw_database\nCollection of keyword decks relevant for mechanics.\nset_flow_area\nfrom MechanicWriter.\nOverview\nupdate\nkw_database\nset_flow_area"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#import-detail",
        "title": "ElectroMechanicsDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#attribute-detail",
        "title": "ElectroMechanicsDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Collection of keyword decks relevant for mechanics.\nfrom MechanicWriter.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#ElectroMechanicsDynaWriter.kw_database",
        "title": "ElectroMechanicsDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "ElectroMechanicsDynaWriter.kw_database\n\nCollection of keyword decks relevant for mechanics.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#ElectroMechanicsDynaWriter.set_flow_area",
        "title": "ElectroMechanicsDynaWriter > Attribute detail > set_flow_area",
        "section": "Attribute detail > set_flow_area",
        "text": "ElectroMechanicsDynaWriter.set_flow_area = True\n\nfrom MechanicWriter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#method-detail",
        "title": "ElectroMechanicsDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Update the keyword database.\nDynain file from stress-free configuration computation.\nList of lambda functions to apply Robin-type boundary conditions.\nYou do not need to write mesh files if a Dynain file is given.\nMethod detail\npython:str\npython:None\npython:list\nCallable\npython:None"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/ElectroMechanicsDynaWriter.html#ElectroMechanicsDynaWriter.update",
        "title": "ElectroMechanicsDynaWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "ElectroMechanicsDynaWriter.update(dynain_name: str | None = None, robin_bcs: list[Callable] | None = None) -> None\n\nUpdate the keyword database.\n\nParameters\n\ndynain_name\n\npython:str, default: python:None\n\nDynain file from stress-free configuration computation.\n\nrobin_bcs\n\npython:list[Callable], default: python:None\n\nList of lambda functions to apply Robin-type boundary conditions.\n\nNotes\n\nYou do not need to write mesh files if a Dynain file is given.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/index",
        "href": "api/ansys/health/heart/settings/settings/index.html#the-settingspy-module",
        "title": "The settings.py module",
        "section": "The settings.py module",
        "text": "The settings.py module\nsettings.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/index",
        "href": "api/ansys/health/heart/settings/settings/index.html#summary",
        "title": "The settings.py module > Summary",
        "section": "Summary",
        "text": "AttrDict\nDictionary subclass whose entries can be accessed by attributes as well as normally.\nSettings\nGeneric settings class.\nAnalysis\nClass for analysis settings.\nEPAnalysis\nClass for EP analysis settings.\nMaterial\nClass for storing material settings.\nEpMaterial\nClass for storing EP material settings.\nBoundaryConditions\nStores settings/parameters for boundary conditions.\nSystemModel\nStores settings/parameters for system model.\nMechanics\nClass for keeping track of settings.\nAnalysisZeroPressure\nClass for keeping track of zero-pressure analysis settings.\nZeroPressure\nClass for keeping track of settings for stress-free-configuration computation.\nStimulation\nStimulation settings.\nElectrophysiology\nClass for keeping track of EP settings.\nFibers\nClass for keeping track of fiber settings.\nAtrialFiber\nClass for keeping track of atrial fiber settings.\nPurkinje\nClass for keeping track of Purkinje settings.\nSimulationSettings\nClass for keeping track of settings.\nDynaSettings\nClass for collecting, managing, and validating LS-DYNA settings.\nSummary\nAttrDict\nSettings\nAnalysis\nEPAnalysis\nMaterial\nEpMaterial\nBoundaryConditions\nSystemModel\nMechanics\nAnalysisZeroPressure\nZeroPressure\nStimulation\nElectrophysiology\nFibers\nAtrialFiber\nPurkinje\nSimulationSettings\nDynaSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/index",
        "href": "api/ansys/health/heart/settings/settings/index.html#description",
        "title": "The settings.py module > Description",
        "section": "Description",
        "text": "Module that defines classes that hold settings relevant for PyAnsys-Heart.\nDescription"
    },
    {
        "objectID": "examples/preprocessor/download-case_pr",
        "href": "examples/preprocessor/download-case_pr.html#download-a-pyansys-heart-compatible-case-from-zenodo",
        "title": "Download a PyAnsys Heart-compatible case from Zenodo",
        "section": "Download a PyAnsys Heart-compatible case from Zenodo",
        "text": "This example shows how to download a Strocchi 2020 or Rodero 2021 case from the Zenodo\ndatabase.\nYou can also manually download the CASE or VTK files from the Strocchi 2020\nand Rodero 2021 databases. For more information, see:\nA Publicly Available Virtual Cohort of Four-chamber Heart Meshes for\nCardiac Electro-mechanics Simulations\nVirtual cohort of adult healthy four-chamber heart meshes from CT images\nAlternatively you can make use of the download\nmodule instead. See the example below.\nTotal running time of the script: (0 minutes 11.127 seconds)\nDownload Jupyter notebook: download-case_pr.ipynb\nDownload Python source code: download-case_pr.py\nDownload zipped: download-case_pr.zip\nGallery generated by Sphinx-Gallery\nDownload a PyAnsys Heart-compatible case from Zenodo\nDownload Jupyter notebook: download-case_pr.ipynb\nDownload Python source code: download-case_pr.py\nDownload zipped: download-case_pr.zip"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#contribute-as-a-developer",
        "title": "Contribute as a developer",
        "section": "Contribute as a developer",
        "text": "Fork the project to create a copy.\nClone the repository to download the copy to your local machine.\nInstall the project in editable mode.\nVerify your changes to the project by running tests.\nAdhere to code style.\nUnderstand the different CI/CD pipelines that are executed\nautomatically.\nContribute as a developer"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#fork-the-repository",
        "title": "Contribute as a developer > Fork the repository",
        "section": "Fork the repository",
        "text": "Forking the repository is the first step to contributing to the project. This\nallows you to have your own copy of the project so that you can make changes without\naffecting the main project. Once you have made your changes, you can submit a\npull request to the main project to have your changes reviewed and merged.\n Fork this project\nIf you are an Ansys employee, you can skip this step.\nFork the repository"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#clone-the-repository",
        "title": "Contribute as a developer > Clone the repository",
        "section": "Clone the repository",
        "text": "Clone the repository in development mode:\nIf you are not an Ansys employee, you must fork the repository and\nreplace ansys with your GitHub user name in the git clone command.\nClone the repository\nansys\ngit clone"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#install-for-developers",
        "title": "Contribute as a developer > Install for developers",
        "section": "Install for developers",
        "text": "Installing PyAnsys Heart in development mode lets you change the code\nand see these changes reflected in your environment without having to reinstall\nthe library every time you make a change.\nInstall for developers"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#set-up-a-virtual-environment",
        "title": "Contribute as a developer > Set up a virtual environment",
        "section": "Set up a virtual environment",
        "text": "Navigate to the project’s root directory :\nCreate a virtual environment named .venv to isolate your Python environment:\nActivate the virtual environment:\nSet up a virtual environment\n.venv"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#install-in-development-mode",
        "title": "Contribute as a developer > Install in development mode",
        "section": "Install in development mode",
        "text": "Install PyAnsys Heart in editable mode:\nVerify the installation by checking the version of the library:\nInstall in development mode"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#install-tox",
        "title": "Contribute as a developer > Install Tox",
        "section": "Install Tox",
        "text": "Once the project is installed, you can install Tox. This is a cross-platform\nautomation tool. The main advantage of Tox is that it eases routine tasks like project\ntesting, documentation generation, and wheel building in separate and isolated Python\nvirtual environments.\nInstall Tox:\n#. Verify the installation by listing all the different environments\n(automation rules) for PyAnsys Heart:\nEnvironment\nDescription\ncode-style\nCheck for code style\ntests310-coverage\nEnvironment for project testing with Python 3.10 and coverage\ntests310\nEnvironment for project testing with Python 3.10\ntests311-coverage\nEnvironment for project testing with Python 3.11 and coverage\ntests311\nEnvironment for project testing with Python 3.11\ntests312-coverage\nEnvironment for project testing with Python 3.12 and coverage\ntests312\nEnvironment for project testing with Python 3.12\ntests313-coverage\nEnvironment for project testing with Python 3.13 and coverage\ntests313\nEnvironment for project testing with Python 3.13\ndoc-links\nEnvironment for verifying the integrity of external links within the documentation\ndoc-html\nEnvironment for generating HTML documentation\ndoc-pdf\nEnvironment for generating PDF documentation\ndist\nChecks project distribution\ndoc-clean\nEnvironment for cleaning documentation generated files\ntests\nEnvironment for project testing with Python3\nInstall Tox"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#run-the-tests",
        "title": "Contribute as a developer > Run the tests",
        "section": "Run the tests",
        "text": "Once you have made your changes, you can run the tests to verify that your\nchanges did not break the project. PyAnsys Heart tests support different markers\nto allow testing with or without coverage (and against specific Python versions).\nThese markers are associated with dedicated Tox environments.\nEnvironment\nCommand\ntests310-coverage\npython -m tox -e tests310-coverage\ntests310\npython -m tox -e tests310\ntests311-coverage\npython -m tox -e tests311-coverage\ntests311\npython -m tox -e tests311\ntests312-coverage\npython -m tox -e tests312-coverage\ntests312\npython -m tox -e tests312\ntests313-coverage\npython -m tox -e tests313-coverage\ntests313\npython -m tox -e tests313\ntests\npython -m tox -e tests\nThe preceding test code runs all tests, including those that require Fluent (which take longer). For more\nselective testing, append -- -vv -m \"not requires_fluent or (not extract_models)\" or -- -vv -m \"requires_fluent\"\nto Tox testing commands:\nRun the tests\n-- -vv -m \"not requires_fluent or (not extract_models)\"\n-- -vv -m \"requires_fluent\""
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#check-code-style",
        "title": "Contribute as a developer > Check code style",
        "section": "Check code style",
        "text": "PyAnsys Heart follows the PEP 8 standard as described in\nPEP 8 in\nthe PyAnsys developer’s guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run the following Tox environment:\nEnvironment\nCommand\ncode-style\npython -m tox -e code-style\nThis way, it’s not possible for you to push code that fails the style checks:\nCheck code style"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#run-cicd-pipelines",
        "title": "Contribute as a developer > Run CI/CD pipelines",
        "section": "Run CI/CD pipelines",
        "text": "PyAnsys Heart has a set of CI/CD pipelines that are executed automatically when certain\nevents are detected in the repository. Some of these events include opening a\npull request, labeling a pull-request, and tagging a commit.\nYou can label a pull request to skip certain jobs in the pipeline. Supported\nlabels are listed on the PyAnsys Heart labels page.\nLabel\nDescription\ntest:skip\nSkip the model generation tests\nRun CI/CD pipelines\ntest:skip"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#the-connectivitypy-module",
        "title": "The connectivity.py module",
        "section": "The connectivity.py module",
        "text": "The connectivity.py module\nconnectivity.py"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#summary",
        "title": "The connectivity.py module > Summary",
        "section": "Summary",
        "text": "get_faces_tetra\nGet faces that make up the tetrahedrons.\nface_tetra_connectivity\nCompute the tetra-face connectivity tables.\nget_face_type\nEstablish the face type, which indicates whether it is a boundary or an interior face.\nget_edges_from_triangles\nGenerate an array of edges from an array of triangles.\nget_free_edges\nGet the boundary edges that are only referenced once.\nedge_connectivity\nGroup edges by connectivity.\nremove_triangle_layers_from_trimesh\nRemove boundary triangles.\nSummary\nget_faces_tetra\nface_tetra_connectivity\nget_face_type\nget_edges_from_triangles\nget_free_edges\nedge_connectivity\nremove_triangle_layers_from_trimesh"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#description",
        "title": "The connectivity.py module > Description",
        "section": "Description",
        "text": "Module containing methods for mesh connectivity.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#module-detail",
        "title": "The connectivity.py module > Module detail",
        "section": "Module detail",
        "text": "Get faces that make up the tetrahedrons.\nCompute the tetra-face connectivity tables.\nEstablish the face type, which indicates whether it is a boundary or an interior face.\nArray with face definitions.\nArray describing the cells that each of the faces is connected to.\nFor example, np.array([c0, c1]).\nType of face, which is either interior (face_type = 1)\nor boundary (face_type = 2).\nGenerate an array of edges from an array of triangles.\nGet the boundary edges that are only referenced once.\nArray of triangles.\nWhether to return the free triangles.\nNumPy array with the free edges.\nNumpy array with the triangles that use these free edges\nGroup edges by connectivity.\nNumEdges x 2 NumPy arrays with edge definitions.\nWhether to return the edge group type. If True, the function\nreturns a list of strings with these types:\nopen: Edge group is open-ended.\nclosed: Edge group forms a closed edge loop.\nWhether to sort closed edge loops.\nGrouped edges by connectivity.\nType of the edge group. Options are open or closed.\nThis method uses an implementation of a depth-first search. For more information,\nseeDepth-first search <https://en.wikipedia.org/wiki/Depth-first_search>`_ on\nthe Wikipedia site.\nPerformance of this method is not tested. It might not be suitable for large arrays of edges.\nRemove boundary triangles.\nArray of triangles.\nNumber of iterations.\nReduced set of triangles.\nModule detail\nnp.ndarray\nnp.ndarray\nnp.array([c0, c1])\nnp.ndarray\n(face_type = 1)\n(face_type = 2)\nnp.ndarray\npython:False\nnp.ndarray\nnp.ndarray\noptional\nnp.array\npython:False\nTrue\nopen\nclosed\npython:False\nnp.ndarray\npython:list\npython:str\noptional\nopen\nclosed\nnp.ndarray\npython:int\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#connectivity.get_faces_tetra",
        "title": "The connectivity.py module > Module detail > get_faces_tetra",
        "section": "Module detail > get_faces_tetra",
        "text": "connectivity.get_faces_tetra(tetra: numpy.ndarray) -> numpy.ndarray\n\nGet faces that make up the tetrahedrons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#connectivity.face_tetra_connectivity",
        "title": "The connectivity.py module > Module detail > face_tetra_connectivity",
        "section": "Module detail > face_tetra_connectivity",
        "text": "connectivity.face_tetra_connectivity(tetra: numpy.ndarray) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nCompute the tetra-face connectivity tables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#connectivity.get_face_type",
        "title": "The connectivity.py module > Module detail > get_face_type",
        "section": "Module detail > get_face_type",
        "text": "connectivity.get_face_type(faces: numpy.ndarray, face_cell_connectivity: numpy.ndarray) -> numpy.ndarray\n\nEstablish the face type, which indicates whether it is a boundary or an interior face.\n\nParameters\n\nfaces\n\nnp.ndarray\n\nArray with face definitions.\n\nface_cell_connectivity\n\nnp.ndarray\n\nArray describing the cells that each of the faces is connected to.\nFor example, np.array([c0, c1]).\n\nReturns\n\nnp.ndarray\n\nType of face, which is either interior (face_type = 1)\nor boundary (face_type = 2).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#connectivity.get_edges_from_triangles",
        "title": "The connectivity.py module > Module detail > get_edges_from_triangles",
        "section": "Module detail > get_edges_from_triangles",
        "text": "connectivity.get_edges_from_triangles(triangles: numpy.ndarray) -> numpy.ndarray\n\nGenerate an array of edges from an array of triangles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#connectivity.get_free_edges",
        "title": "The connectivity.py module > Module detail > get_free_edges",
        "section": "Module detail > get_free_edges",
        "text": "connectivity.get_free_edges(triangles: numpy.ndarray, return_free_triangles: bool = False) -> numpy.ndarray | Tuple[numpy.ndarray, numpy.ndarray]\n\nGet the boundary edges that are only referenced once.\n\nParameters\n\ntriangles\n\nnp.ndarray\n\nArray of triangles.\n\nreturn_free_triangles\n\nbool, default: python:False\n\nWhether to return the free triangles.\n\nReturns\n\nfree_edges\n\nnp.ndarray\n\nNumPy array with the free edges.\n\nfree_triangles: np.ndarray, optional\n\nNumpy array with the triangles that use these free edges\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#connectivity.edge_connectivity",
        "title": "The connectivity.py module > Module detail > edge_connectivity",
        "section": "Module detail > edge_connectivity",
        "text": "connectivity.edge_connectivity(edges: numpy.ndarray, return_type: bool = False, sort_closed: bool = False) -> numpy.ndarray\n\nGroup edges by connectivity.\n\nParameters\n\nedges\n\nnp.array\n\nNumEdges x 2 NumPy arrays with edge definitions.\n\nreturn_type\n\nbool, default: python:False\n\nWhether to return the edge group type. If True, the function\nreturns a list of strings with these types:\n\nopen: Edge group is open-ended.\n\nclosed: Edge group forms a closed edge loop.\n\nsort_closed\n\nbool, default: python:False\n\nWhether to sort closed edge loops.\n\nReturns\n\nedge_groups\n\nnp.ndarray\n\nGrouped edges by connectivity.\n\ngroup_types\n\npython:list[python:str], optional\n\nType of the edge group. Options are open or closed.\n\nNotes\n\nThis method uses an implementation of a depth-first search. For more information,\nseeDepth-first search <https://en.wikipedia.org/wiki/Depth-first_search>`_ on\nthe Wikipedia site.\n\nPerformance of this method is not tested. It might not be suitable for large arrays of edges.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/connectivity/index",
        "href": "api/ansys/health/heart/utils/connectivity/index.html#connectivity.remove_triangle_layers_from_trimesh",
        "title": "The connectivity.py module > Module detail > remove_triangle_layers_from_trimesh",
        "section": "Module detail > remove_triangle_layers_from_trimesh",
        "text": "connectivity.remove_triangle_layers_from_trimesh(triangles: numpy.ndarray, iters: int = 1) -> numpy.ndarray\n\nRemove boundary triangles.\n\nParameters\n\ntriangles\n\nnp.ndarray\n\nArray of triangles.\n\niters\n\npython:int, default: 1\n\nNumber of iterations.\n\nReturns\n\nnp.ndarray\n\nReduced set of triangles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#volume",
        "title": "Volume",
        "section": "Volume",
        "text": "System state for volume.\nVolume\nVolume"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#ansys.health.heart.post.system_model_post.Volume",
        "title": "Volume > Volume > Volume",
        "section": "Volume > Volume",
        "text": "class ansys.health.heart.post.system_model_post.Volume\n\nSystem state for volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#overview",
        "title": "Volume > Overview",
        "section": "Overview",
        "text": "cavity\nartery\nvenous\nOverview\ncavity\nartery\nvenous"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#import-detail",
        "title": "Volume > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#attribute-detail",
        "title": "Volume > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#Volume.cavity",
        "title": "Volume > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Volume.cavity: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#Volume.artery",
        "title": "Volume > Attribute detail > artery",
        "section": "Attribute detail > artery",
        "text": "Volume.artery: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Volume",
        "href": "api/ansys/health/heart/post/system_model_post/Volume.html#Volume.venous",
        "title": "Volume > Attribute detail > venous",
        "section": "Attribute detail > venous",
        "text": "Volume.venous: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/pre/database_utils/index",
        "href": "api/ansys/health/heart/pre/database_utils/index.html#the-database_utilspy-module",
        "title": "The database_utils.py module",
        "section": "The database_utils.py module",
        "text": "The database_utils.py module\ndatabase_utils.py"
    },
    {
        "objectID": "api/ansys/health/heart/pre/database_utils/index",
        "href": "api/ansys/health/heart/pre/database_utils/index.html#summary",
        "title": "The database_utils.py module > Summary",
        "section": "Summary",
        "text": "get_compatible_input\nExtract a preprocessor-compatible input surface.\nSummary\nget_compatible_input"
    },
    {
        "objectID": "api/ansys/health/heart/pre/database_utils/index",
        "href": "api/ansys/health/heart/pre/database_utils/index.html#description",
        "title": "The database_utils.py module > Description",
        "section": "Description",
        "text": "Some helper methods to process cases from Strocchi and Rodero databases.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/pre/database_utils/index",
        "href": "api/ansys/health/heart/pre/database_utils/index.html#module-detail",
        "title": "The database_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Extract a preprocessor-compatible input surface.\nPath to the input mesh (UnstructuredGrid or MultiBlock).\nType of model to extract. Options are 'FullHeart', 'FourChamber',\n'BiVentricle', and 'LeftVentricle'.\nDatabase name. Options are 'Rodero2021' and 'Strocchi2020'.\nPreprocessor-compatible polydata object and dictionary with part definitions.\nModule detail\npython:str\npython:str\n'FullHeart'\n'FullHeart'\n'FourChamber'\n'BiVentricle'\n'LeftVentricle'\npython:str\n'Rodero2021'\n'Rodero2021'\n'Strocchi2020'\nTuple\npv.PolyData\npython:dict"
    },
    {
        "objectID": "api/ansys/health/heart/pre/database_utils/index",
        "href": "api/ansys/health/heart/pre/database_utils/index.html#database_utils.get_compatible_input",
        "title": "The database_utils.py module > Module detail > get_compatible_input",
        "section": "Module detail > get_compatible_input",
        "text": "database_utils.get_compatible_input(mesh_path: str, model_type: Literal['FullHeart', 'FourChamber', 'BiVentricle', 'LeftVentricle'] = 'FullHeart', database: str = 'Rodero2021') -> tuple[pyvista.PolyData, dict]\n\nExtract a preprocessor-compatible input surface.\n\nParameters\n\nmesh_path\n\npython:str\n\nPath to the input mesh (UnstructuredGrid or MultiBlock).\n\nmodel_type\n\npython:str, default: 'FullHeart'\n\nType of model to extract. Options are 'FullHeart', 'FourChamber',\n'BiVentricle', and 'LeftVentricle'.\n\ndatabase\n\npython:str, default: 'Rodero2021'\n\nDatabase name. Options are 'Rodero2021' and 'Strocchi2020'.\n\nReturns\n\nTuple[pv.PolyData, python:dict]\n\nPreprocessor-compatible polydata object and dictionary with part definitions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/index",
        "href": "api/ansys/health/heart/post/index.html#the-post-package",
        "title": "The post package",
        "section": "The post package",
        "text": "The post package\npost"
    },
    {
        "objectID": "api/ansys/health/heart/post/index",
        "href": "api/ansys/health/heart/post/index.html#summary",
        "title": "The post package > Summary",
        "section": "Summary",
        "text": "auto_process\nScript used to postprocess simulations automatically.\ndpf_utils\nD3plot parser using Ansys DPF.\nklotz_curve\nKlotz curve module.\nlaplace_post\nPostprocessing script related to Laplace solving (UHC, fibers).\npvloop\nGet pressure-volume (PV) loop from the LS-DYNA ICVOUT file.\nstrain_calculator\nCompute myocardial strain.\nsystem_model_post\nModule for postprocessing system model data.\nSummary\nauto_process\ndpf_utils\nklotz_curve\nlaplace_post\npvloop\nstrain_calculator\nsystem_model_post"
    },
    {
        "objectID": "api/ansys/health/heart/post/index",
        "href": "api/ansys/health/heart/post/index.html#description",
        "title": "The post package > Description",
        "section": "Description",
        "text": "Postprocessing subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#neohookean",
        "title": "NeoHookean",
        "section": "NeoHookean",
        "text": "Bases: MechanicalMaterialModel\nPassive isotropic material with MAT_77H.\nNeoHookean\nNeoHookean\nMechanicalMaterialModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#ansys.health.heart.settings.material.material.NeoHookean",
        "title": "NeoHookean > NeoHookean > NeoHookean",
        "section": "NeoHookean > NeoHookean",
        "text": "class ansys.health.heart.settings.material.material.NeoHookean\n\nBases: MechanicalMaterialModel\n\nPassive isotropic material with MAT_77H.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#overview",
        "title": "NeoHookean > Overview",
        "section": "Overview",
        "text": "rho\nDensity of the material.\nc10\nc10.\nkappa\nBulk modulus.\nnu\nPoisson’s ratio.\n__post_init__\nDeduce Poisson’s ratio if not given.\nOverview\nrho\nc10\nkappa\nnu\n__post_init__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#import-detail",
        "title": "NeoHookean > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#attribute-detail",
        "title": "NeoHookean > Attribute detail",
        "section": "Attribute detail",
        "text": "Density of the material.\nc10.\nBulk modulus.\nPoisson’s ratio.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#NeoHookean.rho",
        "title": "NeoHookean > Attribute detail > rho",
        "section": "Attribute detail > rho",
        "text": "NeoHookean.rho: float\n\nDensity of the material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#NeoHookean.c10",
        "title": "NeoHookean > Attribute detail > c10",
        "section": "Attribute detail > c10",
        "text": "NeoHookean.c10: float\n\nc10.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#NeoHookean.kappa",
        "title": "NeoHookean > Attribute detail > kappa",
        "section": "Attribute detail > kappa",
        "text": "NeoHookean.kappa: float = None\n\nBulk modulus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#NeoHookean.nu",
        "title": "NeoHookean > Attribute detail > nu",
        "section": "Attribute detail > nu",
        "text": "NeoHookean.nu: float = None\n\nPoisson’s ratio.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#method-detail",
        "title": "NeoHookean > Method detail",
        "section": "Method detail",
        "text": "Deduce Poisson’s ratio if not given.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/NeoHookean",
        "href": "api/ansys/health/heart/settings/material/material/NeoHookean.html#NeoHookean.__post_init__",
        "title": "NeoHookean > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "NeoHookean.__post_init__()\n\nDeduce Poisson’s ratio if not given.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks.html#electromechanicsdecks",
        "title": "ElectroMechanicsDecks",
        "section": "ElectroMechanicsDecks",
        "text": "Bases: ElectrophysiologyDecks, MechanicsDecks\nUseful decks for a electromechanics simulation.\nElectroMechanicsDecks\nElectroMechanicsDecks\nElectrophysiologyDecks\nMechanicsDecks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks.html#ansys.health.heart.writer.heart_decks.ElectroMechanicsDecks",
        "title": "ElectroMechanicsDecks > ElectroMechanicsDecks > ElectroMechanicsDecks",
        "section": "ElectroMechanicsDecks > ElectroMechanicsDecks",
        "text": "class ansys.health.heart.writer.heart_decks.ElectroMechanicsDecks\n\nBases: ElectrophysiologyDecks, MechanicsDecks\n\nUseful decks for a electromechanics simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks.html#overview",
        "title": "ElectroMechanicsDecks > Overview",
        "section": "Overview",
        "text": "duplicate_nodes\nOverview\nduplicate_nodes"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks.html#import-detail",
        "title": "ElectroMechanicsDecks > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks.html#attribute-detail",
        "title": "ElectroMechanicsDecks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectroMechanicsDecks.html#ElectroMechanicsDecks.duplicate_nodes",
        "title": "ElectroMechanicsDecks > Attribute detail > duplicate_nodes",
        "section": "Attribute detail > duplicate_nodes",
        "text": "ElectroMechanicsDecks.duplicate_nodes: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#feature",
        "title": "Feature",
        "section": "Feature",
        "text": "Feature class.\nFeature\nFeature"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#ansys.health.heart.objects.Feature",
        "title": "Feature > Feature > Feature",
        "section": "Feature > Feature",
        "text": "class ansys.health.heart.objects.Feature(name: str = None)\n\nFeature class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#overview",
        "title": "Feature > Overview",
        "section": "Overview",
        "text": "name\nName of feature.\ntype\nType of feature.\npid\nPart ID associated with feature.\nOverview\nname\ntype\npid"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#import-detail",
        "title": "Feature > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#attribute-detail",
        "title": "Feature > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of feature.\nType of feature.\nPart ID associated with feature.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#Feature.name",
        "title": "Feature > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "Feature.name = None\n\nName of feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#Feature.type",
        "title": "Feature > Attribute detail > type",
        "section": "Attribute detail > type",
        "text": "Feature.type = None\n\nType of feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Feature",
        "href": "api/ansys/health/heart/objects/Feature.html#Feature.pid",
        "title": "Feature > Attribute detail > pid",
        "section": "Attribute detail > pid",
        "text": "Feature.pid: int = None\n\nPart ID associated with feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#mechanicssimulator",
        "title": "MechanicsSimulator",
        "section": "MechanicsSimulator",
        "text": "Bases: BaseSimulator\nMechanics simulator with imposed active stress.\nMechanicsSimulator\nMechanicsSimulator\nBaseSimulator"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#ansys.health.heart.simulator.MechanicsSimulator",
        "title": "MechanicsSimulator > MechanicsSimulator > MechanicsSimulator",
        "section": "MechanicsSimulator > MechanicsSimulator",
        "text": "class ansys.health.heart.simulator.MechanicsSimulator(model: ansys.health.heart.models.HeartModel, dyna_settings: ansys.health.heart.settings.settings.DynaSettings, simulation_directory: pathlib = '', initial_stress: bool = True)\n\nBases: BaseSimulator\n\nMechanics simulator with imposed active stress.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#overview",
        "title": "MechanicsSimulator > Overview",
        "section": "Overview",
        "text": "simulate\nLaunch the main mechanical simulation.\ncompute_stress_free_configuration\nCompute the stress-free configuration of the model.\ninitial_stress\nIf stress-free computation is taken into consideration.\nOverview\nsimulate\ncompute_stress_free_configuration\ninitial_stress"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#import-detail",
        "title": "MechanicsSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#attribute-detail",
        "title": "MechanicsSimulator > Attribute detail",
        "section": "Attribute detail",
        "text": "If stress-free computation is taken into consideration.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#MechanicsSimulator.initial_stress",
        "title": "MechanicsSimulator > Attribute detail > initial_stress",
        "section": "Attribute detail > initial_stress",
        "text": "MechanicsSimulator.initial_stress = True\n\nIf stress-free computation is taken into consideration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#method-detail",
        "title": "MechanicsSimulator > Method detail",
        "section": "Method detail",
        "text": "Launch the main mechanical simulation.\nSimulation folder name.\nFolder containing stress-free simulation.\nIf None, the zeropressure folder under the root directory is used.\nWhether to run postprocessing scripts.\nUser-defined k files.\nCompute the stress-free configuration of the model.\nSimulation folder name.\nWhether to run simulation and overwrite files.\nUser-defined k files.\nMethod detail\npython:str\n'main-mechanics'\npython:str\npython:None\npython:None\nNone\nzeropressure\npython:True\npython:list\npython:str\npython:None\npython:str\n'zeropressure'\npython:True\npython:list\npython:str\npython:None"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#MechanicsSimulator.simulate",
        "title": "MechanicsSimulator > Method detail > simulate",
        "section": "Method detail > simulate",
        "text": "MechanicsSimulator.simulate(folder_name: str = 'main-mechanics', zerop_folder: str | None = None, auto_post: bool = True, extra_k_files: list[str] | None = None)\n\nLaunch the main mechanical simulation.\n\nParameters\n\nfolder_name\n\npython:str, default: 'main-mechanics'\n\nSimulation folder name.\n\nzerop_folder\n\npython:str | python:None, default: python:None\n\nFolder containing stress-free simulation.\nIf None, the zeropressure folder under the root directory is used.\n\nauto_post\n\nbool, default: python:True\n\nWhether to run postprocessing scripts.\n\nextra_k_files\n\npython:list[python:str], default: python:None\n\nUser-defined k files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/MechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/MechanicsSimulator.html#MechanicsSimulator.compute_stress_free_configuration",
        "title": "MechanicsSimulator > Method detail > compute_stress_free_configuration",
        "section": "Method detail > compute_stress_free_configuration",
        "text": "MechanicsSimulator.compute_stress_free_configuration(folder_name='zeropressure', overwrite: bool = True, extra_k_files: list[str] | None = None)\n\nCompute the stress-free configuration of the model.\n\nParameters\n\nfolder_name\n\npython:str, default: 'zeropressure'\n\nSimulation folder name.\n\noverwrite\n\nbool, default: python:True\n\nWhether to run simulation and overwrite files.\n\nextra_k_files\n\npython:list[python:str], default: python:None\n\nUser-defined k files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#electrophysiologydecks",
        "title": "ElectrophysiologyDecks",
        "section": "ElectrophysiologyDecks",
        "text": "Bases: BaseDecks\nUseful decks for electrophysiology simulations.\nElectrophysiologyDecks\nElectrophysiologyDecks\nBaseDecks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#ansys.health.heart.writer.heart_decks.ElectrophysiologyDecks",
        "title": "ElectrophysiologyDecks > ElectrophysiologyDecks > ElectrophysiologyDecks",
        "section": "ElectrophysiologyDecks > ElectrophysiologyDecks",
        "text": "class ansys.health.heart.writer.heart_decks.ElectrophysiologyDecks\n\nBases: BaseDecks\n\nUseful decks for electrophysiology simulations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#overview",
        "title": "ElectrophysiologyDecks > Overview",
        "section": "Overview",
        "text": "cell_models\nep_settings\nbeam_networks\nOverview\ncell_models\nep_settings\nbeam_networks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#import-detail",
        "title": "ElectrophysiologyDecks > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#attribute-detail",
        "title": "ElectrophysiologyDecks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#ElectrophysiologyDecks.cell_models",
        "title": "ElectrophysiologyDecks > Attribute detail > cell_models",
        "section": "Attribute detail > cell_models",
        "text": "ElectrophysiologyDecks.cell_models: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#ElectrophysiologyDecks.ep_settings",
        "title": "ElectrophysiologyDecks > Attribute detail > ep_settings",
        "section": "Attribute detail > ep_settings",
        "text": "ElectrophysiologyDecks.ep_settings: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/ElectrophysiologyDecks.html#ElectrophysiologyDecks.beam_networks",
        "title": "ElectrophysiologyDecks > Attribute detail > beam_networks",
        "section": "Attribute detail > beam_networks",
        "text": "ElectrophysiologyDecks.beam_networks: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "index",
        "href": "index.html#pyansys-heart-014dev0",
        "title": "PyAnsys Heart 0.14.dev0",
        "section": "PyAnsys Heart 0.14.dev0",
        "text": "PyAnsys Heart is a Python framework for heart modeling using Ansys tools.\nLearn how to install the package and get started with PyAnsys Heart.\nLearn how to use the capabilities of PyAnsys Heart.\nExplore the API reference for PyAnsys Heart.\nExplore examples to learn how to use PyAnsys Heart.\nLearn how to contribute to PyAnsys Heart.\nView the release notes for PyAnsys Heart.\nSee proper credits for the data used in this repository.\nPyAnsys Heart 0.14.dev0"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#logger",
        "title": "Logger",
        "section": "Logger",
        "text": "Provides the logger used for each PyAnsys Heart session.\nThis class lets you add handlers to the logger to output messages to a file or\nto the standard output (stdout).\nLogging level to filter the message severity allowed in the logger.\nWhether to write log messages to a file.\nWhether to write the log messages to stdout.\nName of the file to write log messages to.\nDemonstrate logger usage from a PyAnsys Heart instance, which is automatically\ncreated when a PyAnsys Heart instance is created.\nImport the global PyAnsys Heart logger and add a file output handler.\nLogger\nLogger\npython:int\nlogging.DEBUG\npython:False\npython:True\npython:str\nFILE_NAME"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#ansys.health.heart.logger.Logger",
        "title": "Logger > Logger > Logger",
        "section": "Logger > Logger",
        "text": "class ansys.health.heart.logger.Logger(level: LOG_LEVEL_TYPE = logging.DEBUG, to_file: bool = False, to_stdout: bool = True, filename: str = FILE_NAME)\n\nProvides the logger used for each PyAnsys Heart session.\n\nThis class lets you add handlers to the logger to output messages to a file or\nto the standard output (stdout).\n\nParameters\n\nlevel\n\npython:int, default: logging.DEBUG\n\nLogging level to filter the message severity allowed in the logger.\n\nto_file\n\nbool, default: python:False\n\nWhether to write log messages to a file.\n\nto_stdout\n\nbool, default: python:True\n\nWhether to write the log messages to stdout.\n\nfilename\n\npython:str, default: FILE_NAME\n\nName of the file to write log messages to.\n\nExamples\n\nDemonstrate logger usage from a PyAnsys Heart instance, which is automatically\ncreated when a PyAnsys Heart instance is created.\n\nImport the global PyAnsys Heart logger and add a file output handler.\n\n>>> import os\n>>> from ansys.health.heart import LOG\n>>> file_path = os.path.join(os.getcwd(), \"PyAnsys Heart.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#overview",
        "title": "Logger > Overview",
        "section": "Overview",
        "text": "log_to_file\nAdd a file handler to the logger.\nlog_to_stdout\nAdd a stdout handler to the logger.\nsetLevel\nSet the log level for the logger and its handlers.\nadd_child_logger\nAdd a child logger to the main logger.\nadd_handling_uncaught_expections\nRedirect the output of an exception to a logger.\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__\nOverload the access method by item for the Logger class.\nOverview\nlog_to_file\nlog_to_stdout\nsetLevel\nadd_child_logger\nadd_handling_uncaught_expections\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__\nLogger"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#import-detail",
        "title": "Logger > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#attribute-detail",
        "title": "Logger > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.file_handler",
        "title": "Logger > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "Logger.file_handler: logging.FileHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.std_out_handler",
        "title": "Logger > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "Logger.std_out_handler: logging.StreamHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.logger",
        "title": "Logger > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "Logger.logger: logging.Logger\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.level",
        "title": "Logger > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "Logger.level = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.debug",
        "title": "Logger > Attribute detail > debug",
        "section": "Attribute detail > debug",
        "text": "Logger.debug\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.info",
        "title": "Logger > Attribute detail > info",
        "section": "Attribute detail > info",
        "text": "Logger.info\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.warning",
        "title": "Logger > Attribute detail > warning",
        "section": "Attribute detail > warning",
        "text": "Logger.warning\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.error",
        "title": "Logger > Attribute detail > error",
        "section": "Attribute detail > error",
        "text": "Logger.error\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.critical",
        "title": "Logger > Attribute detail > critical",
        "section": "Attribute detail > critical",
        "text": "Logger.critical\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.log",
        "title": "Logger > Attribute detail > log",
        "section": "Attribute detail > log",
        "text": "Logger.log\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#method-detail",
        "title": "Logger > Method detail",
        "section": "Method detail",
        "text": "Add a file handler to the logger.\nName of the file to record logs to, which is 'PyAnsys Heart.log' by default.\nLevel of logging, which is 'DEBUG' by default.\nWhether to remove all other file handlers.\nWrite to the PyAnsys Heart.log file in the current working directory.\nAdd a stdout handler to the logger.\nLevel of logging record, which is 'DEBUG' by default.\nSet the log level for the logger and its handlers.\nLogging level to set.\nAdd a child logger to the main logger.\nThis logger is more general than an instance logger, which is designed to\ntrack the state of PyAnsys Heart instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\nName of the logger.\nLevel of logging.\nLogger class.\nOverload the access method by item for the Logger class.\nRedirect the output of an exception to a logger.\nName of the logger.\nMethod detail\npython:str\n'PyAnsys Heart.log'\npython:str\npython:int\nLOG_LEVEL_FILE\n'DEBUG'\npython:False\nPyAnsys Heart.log\npython:str\npython:int\nLOG_LEVEL_STDOUT\n'DEBUG'\npython:str\npython:int\n_global\npython:str\npython:str\npython:int\npython:None\nlogging.logger\nLogger\npython:str"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.log_to_file",
        "title": "Logger > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "Logger.log_to_file(filename: str = FILE_NAME, level: LOG_LEVEL_TYPE = LOG_LEVEL_FILE, remove_other_file_handlers: bool = False) -> None\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, default:\n\nName of the file to record logs to, which is 'PyAnsys Heart.log' by default.\n\nlevel\n\npython:str or python:int, default: LOG_LEVEL_FILE\n\nLevel of logging, which is 'DEBUG' by default.\n\nremove_other_file_handlers\n\nbool, default: python:False\n\nWhether to remove all other file handlers.\n\nExamples\n\nWrite to the PyAnsys Heart.log file in the current working directory.\n\n>>> from ansys.health.heart import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), \"PyAnsys Heart.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.log_to_stdout",
        "title": "Logger > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "Logger.log_to_stdout(level: LOG_LEVEL_TYPE = LOG_LEVEL_STDOUT)\n\nAdd a stdout handler to the logger.\n\nParameters\n\nlevel\n\npython:str or python:int, default: LOG_LEVEL_STDOUT\n\nLevel of logging record, which is 'DEBUG' by default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.setLevel",
        "title": "Logger > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "Logger.setLevel(level: LOG_LEVEL_TYPE = 'DEBUG')\n\nSet the log level for the logger and its handlers.\n\nParameters\n\nlevel\n\npython:str or python:int, default: “DEBUG”\n\nLogging level to set.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.add_child_logger",
        "title": "Logger > Method detail > add_child_logger",
        "section": "Method detail > add_child_logger",
        "text": "Logger.add_child_logger(suffix: str, level: LOG_LEVEL_TYPE | None = None)\n\nAdd a child logger to the main logger.\n\nThis logger is more general than an instance logger, which is designed to\ntrack the state of PyAnsys Heart instances.\n\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child logger.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the logger.\n\nlevel\n\npython:str or python:int, default: python:None\n\nLevel of logging.\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.__getitem__",
        "title": "Logger > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "Logger.__getitem__(key)\n\nOverload the access method by item for the Logger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/Logger",
        "href": "api/ansys/health/heart/logger/Logger.html#Logger.add_handling_uncaught_expections",
        "title": "Logger > Method detail > add_handling_uncaught_expections",
        "section": "Method detail > add_handling_uncaught_expections",
        "text": "Logger.add_handling_uncaught_expections(logger: logging.Logger)\n\nRedirect the output of an exception to a logger.\n\nParameters\n\nlogger\n\npython:str\n\nName of the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/LSDYNATerminationError",
        "href": "api/ansys/health/heart/exceptions/LSDYNATerminationError.html#lsdynaterminationerror",
        "title": "LSDYNATerminationError",
        "section": "LSDYNATerminationError",
        "text": "Bases: BaseException\nException raised when Normal Termination is not found in the LS-DYNA logs.\nLSDYNATerminationError\nLSDYNATerminationError\nBaseException\nNormal Termination"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/LSDYNATerminationError",
        "href": "api/ansys/health/heart/exceptions/LSDYNATerminationError.html#ansys.health.heart.exceptions.LSDYNATerminationError",
        "title": "LSDYNATerminationError > LSDYNATerminationError > LSDYNATerminationError",
        "section": "LSDYNATerminationError > LSDYNATerminationError",
        "text": "exception ansys.health.heart.exceptions.LSDYNATerminationError(message: str | list = '')\n\nBases: BaseException\n\nException raised when Normal Termination is not found in the LS-DYNA logs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/LSDYNATerminationError",
        "href": "api/ansys/health/heart/exceptions/LSDYNATerminationError.html#import-detail",
        "title": "LSDYNATerminationError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#insulator",
        "title": "Insulator",
        "section": "Insulator",
        "text": "Insulator material.\nInsulator\nInsulator"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#ansys.health.heart.settings.material.ep_material.EPMaterial.Insulator",
        "title": "Insulator > Insulator > Insulator",
        "section": "Insulator > Insulator",
        "text": "class ansys.health.heart.settings.material.ep_material.EPMaterial.Insulator\n\nInsulator material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#overview",
        "title": "Insulator > Overview",
        "section": "Overview",
        "text": "sigma_fiber\ncm\nbeta\n__repr__\nPrint a message.\nOverview\nsigma_fiber\ncm\nbeta\n__repr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#import-detail",
        "title": "Insulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#attribute-detail",
        "title": "Insulator > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.sigma_fiber",
        "title": "Insulator > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "Insulator.sigma_fiber = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.cm",
        "title": "Insulator > Attribute detail > cm",
        "section": "Attribute detail > cm",
        "text": "Insulator.cm = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.beta",
        "title": "Insulator > Attribute detail > beta",
        "section": "Attribute detail > beta",
        "text": "Insulator.beta = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#method-detail",
        "title": "Insulator > Method detail",
        "section": "Method detail",
        "text": "Print a message.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.__repr__",
        "title": "Insulator > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Insulator.__repr__()\n\nPrint a message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#the-vtk_utilspy-module",
        "title": "The vtk_utils.py module",
        "section": "The vtk_utils.py module",
        "text": "The vtk_utils.py module\nvtk_utils.py"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#summary",
        "title": "The vtk_utils.py module > Summary",
        "section": "Summary",
        "text": "compute_surface_nodal_area_pyvista\nCompute an average nodal area by summing surface areas of connected elements.\nextrude_polydata\nExtrude a given polydata surface in a given direction.\ncell_ids_inside_enclosed_surface\nGet IDs of cells with centroids that are inside a given surface.\nfind_cells_close_to_nodes\nFind cell IDs close to nodes.\nget_boundary_edges\nGet the boundary edges from an input surface.\nget_boundary_edge_loops\nGet the closed/open boundary edge loops of a surface mesh.\nget_patches_delaunay\nPatch boundary edges with the Delaunay algorithm.\nget_patches_with_centroid\nPatch boundary edges with a custom algorithm using a central node.\nare_connected\nCheck whether two polydata or unstructured grid objects are connected.\nadd_solid_name_to_stl\nAdd the name of the solid to the STL file.\nfind_corresponding_points\nFind corresponding points between two surfaces.\ngenerate_thickness_lines\nGenerate lines from points on surface 1 to corresponding points on surface 2.\nSummary\ncompute_surface_nodal_area_pyvista\nextrude_polydata\ncell_ids_inside_enclosed_surface\nfind_cells_close_to_nodes\nget_boundary_edges\nget_boundary_edge_loops\nget_patches_delaunay\nget_patches_with_centroid\nare_connected\nadd_solid_name_to_stl\nfind_corresponding_points\ngenerate_thickness_lines"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#description",
        "title": "The vtk_utils.py module > Description",
        "section": "Description",
        "text": "Module containing methods for mesh operations related to the VTK library.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#module-detail",
        "title": "The vtk_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Compute an average nodal area by summing surface areas of connected elements.\nVTK object describing the object.\nNumPy array with nodal areas of length number of points.\nThis method adds the partial areas of connected elements/cells to each node.\nExtrude a given polydata surface in a given direction.\nSurface to extrude\nAmount to extrude.\nDirection of extrusion, which should have three components. If no\ncomponents are specified, it extrudes in the normal direction.\nExtruded polydata object.\nGet IDs of cells with centroids that are inside a given surface.\nSource object to check which cells are inside/outside\nthe specified surface.\nSurface to check whether cells are inside/outside.\nTolerance for the select_enclosed_points filter.\nArray with cell IDs that are inside the enclosed surface.\nThis method also accepts a source that represents the cell centroids.\nIn this case, computing the cell centers is skipped.\nFind cell IDs close to nodes.\nTarget mesh.\nNode IDs.\nInfluence radius.\nCell IDs.\nGet the boundary edges from an input surface.\nSurface to check for boundary edges.\nMulti-block data, where each block represents connected edges.\nGet the closed/open boundary edge loops of a surface mesh.\nSurface mesh to check for boundary edges.\nWhether to remove open edge loops from the returned dictionary.\nDictionary with the edges that make up the open/closed loop.\nPatch boundary edges with the Delaunay algorithm.\nSurface with boundary edges to find patches for.\nWhether to return patches for closed loops of boundary edges.\nList of patches that close the open surface.\nPatch boundary edges with a custom algorithm using a central node.\nSurface with boundary edges to find patches for.\nWhether to return patches for closed loops of boundary edges.\nList of patches that close the open surface.\nEdges must be sorted properly for this method to return sensible patches.\nCheck whether two polydata or unstructured grid objects are connected.\nFirst mesh.\nSecond mesh.\nAdd the name of the solid to the STL file.\nThis method supports only a single block.\nFind corresponding points between two surfaces.\nFirst surface.\nSecond surface.\nApproximate largest distance between two surfaces.\n2*N array\nThe first row contains node IDs of the first surface.\nThe second row contains corresponding node IDs on the second surface.\nIf no corresponding node is found, None is returned.\nThis method uses ray tracing.\nThe two surfaces are assumed to be close and nearly parallel.\nAs a result, the correspondence is not one to one. Some points might\nhave no corresponding match, while others might share the same\ncorresponding point.\nGenerate lines from points on surface 1 to corresponding points on surface 2.\nFirst surface.\nSecond surface.\nCorresponding points array.\nObject contains cell data named thickness.\nModule detail\nvtk.vtkPolyData\nnp.array\npv.PolyData\npython:float\nnp.array\nnp.empty\npv.PolyData\npv.UnstructuredGrid\npv.PolyData\npython:float\nselect_enclosed_points\nnp.ndarray\npv.UnstructuredGrid\npython:list\npython:int\npython:float\nnp.ndarray\npv.PolyData\npv.MultiBlock\npv.PolyData\npython:True\npython:dict\npv.PolyData\npython:True\nList\npv.PolyData\npv.PolyData\npython:True\nList\npv.PolyData\nUnion\npv.PolyData\npv.UnstructuredGrid\nUnion\npv.PolyData\npv.UnstructuredGrid\npv.PolyData\npv.PolyData\npython:float\nnp.ndarray\nNone\npv.PolyData\npv.PolyData\nnp.ndarray\npython:None\npv.PolyData\nthickness"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.compute_surface_nodal_area_pyvista",
        "title": "The vtk_utils.py module > Module detail > compute_surface_nodal_area_pyvista",
        "section": "Module detail > compute_surface_nodal_area_pyvista",
        "text": "vtk_utils.compute_surface_nodal_area_pyvista(surface: pyvista.PolyData) -> numpy.ndarray\n\nCompute an average nodal area by summing surface areas of connected elements.\n\nParameters\n\nvtk_surface\n\nvtk.vtkPolyData\n\nVTK object describing the object.\n\nReturns\n\nnp.array\n\nNumPy array with nodal areas of length number of points.\n\nNotes\n\nThis method adds the partial areas of connected elements/cells to each node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.extrude_polydata",
        "title": "The vtk_utils.py module > Module detail > extrude_polydata",
        "section": "Module detail > extrude_polydata",
        "text": "vtk_utils.extrude_polydata(surface: pyvista.PolyData, extrude_by: float = 1, extrude_direction: numpy.ndarray = np.empty(0)) -> pyvista.PolyData\n\nExtrude a given polydata surface in a given direction.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface to extrude\n\nextrude_by\n\npython:float, default: 1\n\nAmount to extrude.\n\nextrude_direction\n\nnp.array, default: np.empty(0)\n\nDirection of extrusion, which should have three components. If no\ncomponents are specified, it extrudes in the normal direction.\n\nReturns\n\npv.PolyData\n\nExtruded polydata object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.cell_ids_inside_enclosed_surface",
        "title": "The vtk_utils.py module > Module detail > cell_ids_inside_enclosed_surface",
        "section": "Module detail > cell_ids_inside_enclosed_surface",
        "text": "vtk_utils.cell_ids_inside_enclosed_surface(source: pyvista.UnstructuredGrid | pyvista.PolyData, surface: pyvista.PolyData, tolerance: float = 1e-09) -> numpy.ndarray\n\nGet IDs of cells with centroids that are inside a given surface.\n\nParameters\n\nsource\n\npv.UnstructuredGrid\n\nSource object to check which cells are inside/outside\nthe specified surface.\n\nsurface\n\npv.PolyData\n\nSurface to check whether cells are inside/outside.\n\ntolerance\n\npython:float, default: 1e-9\n\nTolerance for the select_enclosed_points filter.\n\nReturns\n\nnp.ndarray\n\nArray with cell IDs that are inside the enclosed surface.\n\nNotes\n\nThis method also accepts a source that represents the cell centroids.\nIn this case, computing the cell centers is skipped.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.find_cells_close_to_nodes",
        "title": "The vtk_utils.py module > Module detail > find_cells_close_to_nodes",
        "section": "Module detail > find_cells_close_to_nodes",
        "text": "vtk_utils.find_cells_close_to_nodes(mesh: pyvista.UnstructuredGrid, node_ids: list[int], radius: float = 2) -> numpy.ndarray\n\nFind cell IDs close to nodes.\n\nParameters\n\nmesh\n\npv.UnstructuredGrid\n\nTarget mesh.\n\nnode_ids\n\npython:list[python:int]\n\nNode IDs.\n\nradius\n\npython:float, default: 2\n\nInfluence radius.\n\nReturns\n\nnp.ndarray\n\nCell IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.get_boundary_edges",
        "title": "The vtk_utils.py module > Module detail > get_boundary_edges",
        "section": "Module detail > get_boundary_edges",
        "text": "vtk_utils.get_boundary_edges(surface: pyvista.PolyData) -> pyvista.MultiBlock\n\nGet the boundary edges from an input surface.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface to check for boundary edges.\n\nReturns\n\npv.MultiBlock\n\nMulti-block data, where each block represents connected edges.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.get_boundary_edge_loops",
        "title": "The vtk_utils.py module > Module detail > get_boundary_edge_loops",
        "section": "Module detail > get_boundary_edge_loops",
        "text": "vtk_utils.get_boundary_edge_loops(surface: pyvista.PolyData, remove_open_edge_loops: bool = True, return_types: bool = False) -> dict | tuple[dict, dict]\n\nGet the closed/open boundary edge loops of a surface mesh.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface mesh to check for boundary edges.\n\nremove_open_edge_loops\n\nbool, default: python:True\n\nWhether to remove open edge loops from the returned dictionary.\n\nReturns\n\npython:dict\n\nDictionary with the edges that make up the open/closed loop.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.get_patches_delaunay",
        "title": "The vtk_utils.py module > Module detail > get_patches_delaunay",
        "section": "Module detail > get_patches_delaunay",
        "text": "vtk_utils.get_patches_delaunay(surface: pyvista.PolyData, closed_only: bool = True) -> list[pyvista.PolyData]\n\nPatch boundary edges with the Delaunay algorithm.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface with boundary edges to find patches for.\n\nclosed_only\n\nbool, default: python:True\n\nWhether to return patches for closed loops of boundary edges.\n\nReturns\n\nList[pv.PolyData]\n\nList of patches that close the open surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.get_patches_with_centroid",
        "title": "The vtk_utils.py module > Module detail > get_patches_with_centroid",
        "section": "Module detail > get_patches_with_centroid",
        "text": "vtk_utils.get_patches_with_centroid(surface: pyvista.PolyData, closed_only: bool = True) -> list[pyvista.PolyData] | None\n\nPatch boundary edges with a custom algorithm using a central node.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface with boundary edges to find patches for.\n\nclosed_only\n\nbool, default: python:True\n\nWhether to return patches for closed loops of boundary edges.\n\nReturns\n\nList[pv.PolyData]\n\nList of patches that close the open surface.\n\nNotes\n\nEdges must be sorted properly for this method to return sensible patches.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.are_connected",
        "title": "The vtk_utils.py module > Module detail > are_connected",
        "section": "Module detail > are_connected",
        "text": "vtk_utils.are_connected(mesh1: pyvista.PolyData | pyvista.UnstructuredGrid, mesh2: pyvista.PolyData | pyvista.UnstructuredGrid) -> bool\n\nCheck whether two polydata or unstructured grid objects are connected.\n\nParameters\n\nmesh1\n\nUnion[pv.PolyData, pv.UnstructuredGrid]\n\nFirst mesh.\n\nmesh2\n\nUnion[pv.PolyData, pv.UnstructuredGrid]\n\nSecond mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.add_solid_name_to_stl",
        "title": "The vtk_utils.py module > Module detail > add_solid_name_to_stl",
        "section": "Module detail > add_solid_name_to_stl",
        "text": "vtk_utils.add_solid_name_to_stl(filename, solid_name, file_type: str = 'ascii') -> None\n\nAdd the name of the solid to the STL file.\n\nNotes\n\nThis method supports only a single block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.find_corresponding_points",
        "title": "The vtk_utils.py module > Module detail > find_corresponding_points",
        "section": "Module detail > find_corresponding_points",
        "text": "vtk_utils.find_corresponding_points(first_surface: pyvista.PolyData, second_surface: pyvista.PolyData, distance: float = 20) -> numpy.ndarray\n\nFind corresponding points between two surfaces.\n\nParameters\n\nfirst_surface\n\npv.PolyData\n\nFirst surface.\n\nsecond_surface\n\npv.PolyData\n\nSecond surface.\n\ndistance\n\npython:float\n\nApproximate largest distance between two surfaces.\n\nReturns\n\nnp.ndarray\n\n2*N array\nThe first row contains node IDs of the first surface.\nThe second row contains corresponding node IDs on the second surface.\nIf no corresponding node is found, None is returned.\n\nNotes\n\nThis method uses ray tracing.\nThe two surfaces are assumed to be close and nearly parallel.\nAs a result, the correspondence is not one to one. Some points might\nhave no corresponding match, while others might share the same\ncorresponding point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/vtk_utils/index",
        "href": "api/ansys/health/heart/utils/vtk_utils/index.html#vtk_utils.generate_thickness_lines",
        "title": "The vtk_utils.py module > Module detail > generate_thickness_lines",
        "section": "Module detail > generate_thickness_lines",
        "text": "vtk_utils.generate_thickness_lines(surface1: pyvista.PolyData, surface2: pyvista.PolyData, corresponding_points: numpy.ndarray = None) -> pyvista.PolyData\n\nGenerate lines from points on surface 1 to corresponding points on surface 2.\n\nParameters\n\nsurface1\n\npv.PolyData\n\nFirst surface.\n\nsurface2\n\npv.PolyData\n\nSecond surface.\n\ncorresponding_points\n\nnp.ndarray, default: python:None\n\nCorresponding points array.\n\nReturns\n\npv.PolyData\n\nObject contains cell data named thickness.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Septum",
        "href": "api/ansys/health/heart/parts/Septum.html#septum",
        "title": "Septum",
        "section": "Septum",
        "text": "Bases: Part\nSeptum part.\nSeptum\nSeptum\nPart"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Septum",
        "href": "api/ansys/health/heart/parts/Septum.html#ansys.health.heart.parts.Septum",
        "title": "Septum > Septum > Septum",
        "section": "Septum > Septum",
        "text": "class ansys.health.heart.parts.Septum(name: str = None)\n\nBases: Part\n\nSeptum part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Septum",
        "href": "api/ansys/health/heart/parts/Septum.html#import-detail",
        "title": "Septum > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/index",
        "href": "api/ansys/health/heart/models/index.html#the-modelspy-module",
        "title": "The models.py module",
        "section": "The models.py module",
        "text": "The models.py module\nmodels.py"
    },
    {
        "objectID": "api/ansys/health/heart/models/index",
        "href": "api/ansys/health/heart/models/index.html#summary",
        "title": "The models.py module > Summary",
        "section": "Summary",
        "text": "HeartModel\nParent class for heart models.\nLeftVentricle\nModel of only the left ventricle.\nBiVentricle\nModel of the left and right ventricles.\nFourChamber\nModel of the left/right ventricle and left/right atrium.\nFullHeart\nModel of both ventricles, both atria, the aorta, and the pulmonary artery.\nSummary\nHeartModel\nLeftVentricle\nBiVentricle\nFourChamber\nFullHeart"
    },
    {
        "objectID": "api/ansys/health/heart/models/index",
        "href": "api/ansys/health/heart/models/index.html#description",
        "title": "The models.py module > Description",
        "section": "Description",
        "text": "Module containing classes for the various heart models.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#the-laplace_postpy-module",
        "title": "The laplace_post.py module",
        "section": "The laplace_post.py module",
        "text": "The laplace_post.py module\nlaplace_post.py"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#summary",
        "title": "The laplace_post.py module > Summary",
        "section": "Summary",
        "text": "read_laplace_solution\nRead laplace fields from d3plot files.\nupdate_transmural_by_normal\nUse surface normal for transmural direction.\northogonalization\nOrthogonalization.\ncompute_la_fiber_cs\nCompute left atrium fibers coordinate system.\ncompute_ra_fiber_cs\nCompute right atrium fibers coordinate system.\nset_rotation_bounds\nDefine rotation bounds from input parameters.\ncompute_rotation_angle\nRotate by alpha and beta angles.\ncompute_ventricle_fiber_by_drbm\nCompute the fiber coordinate system from Laplace solving.\nSummary\nread_laplace_solution\nupdate_transmural_by_normal\northogonalization\ncompute_la_fiber_cs\ncompute_ra_fiber_cs\nset_rotation_bounds\ncompute_rotation_angle\ncompute_ventricle_fiber_by_drbm"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#description",
        "title": "The laplace_post.py module > Description",
        "section": "Description",
        "text": "Postprocessing script related to Laplace solving (UHC, fibers).\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#module-detail",
        "title": "The laplace_post.py module > Module detail",
        "section": "Module detail",
        "text": "Read laplace fields from d3plot files.\nDirectory of d3plot files.\nName of each d3plot file/field.\nWhether to read heatflux.\nGrid with point data of each field.\nUse surface normal for transmural direction.\nAtrium grid.\nAtrium endocardium surface.\nCell transmural direction vector.\nAssume mesh is coarse compared to the thickness. Solid cell normal\nis interpolated from closest surface normal.\nOrthogonalization.\nTransmural vector.\nBundle selection vector.\nLocal coordinate system e_l, e_n, e_t.\nCompute left atrium fibers coordinate system.\nDirectory of d3plot files.\nAtrial fiber settings.\n_description_. If given, normal direction is updated by the surface\nnormal instead of the Laplace solution.\nPV object with fiber coordinates system.\nThis method is described in Modeling cardiac muscle fibers in ventricular and\natrial electrophysiology simulations.\nCompute right atrium fibers coordinate system.\nDirectory of d3plot files.\nAtrial fiber settings.\n_description_. If given, normal direction is updated by the surface normal\ninstead of the Laplace solution.\nPV object with the fiber coordinates system.\nThis method is described in Modeling cardiac muscle fibers in ventricular and\natrial electrophysiology simulations.\nDefine rotation bounds from input parameters.\nIntra-ventricular interpolation weight if outflow_tracts is not None.\nRotation angle at endocardium.\nRotation angle at epicardium.\nRotation angle of enendocardium do and epicardium on outflow tract.\nCell-wise rotation bounds for endocardium and epicardium.\nRotate by alpha and beta angles.\nMesh grid.\nIntral ventricular interpolation weight.\nRotation angles in degrees at endocardium and epicardium.\nRotation angle of enendocardium do and epicardium on outflow tract.\nCell-wise rotation angles.\nCompute for all cells, but filter by left/right mask outside of this function.\nCompute the fiber coordinate system from Laplace solving.\nDirectory of d3plot/tprint files.\nRotation angles. By default: { \"alpha_left\": [-60, 60], \"alpha_right\": [-60, 60],\n\"alpha_ot\": None, \"beta_left\": [-65, 25], \"beta_right\": [-65, 25], \"beta_ot\": None, }.\nWhether to only compute fibers on the left ventricle.\nGrid containing fiber, cross-fiber, and sheet vectors.\nThe D-RBM method is described in Modeling cardiac muscle fibers in ventricular and\natrial electrophysiology simulations.\nModule detail\npython:str\npython:list\npython:str\npython:False\npv.UnstructuredGrid\npv.UnstructuredGrid\npv.PolyData\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:tuple\nnp.ndarray\nnp.ndarray\nnp.ndarray\ne_l, e_n, e_t\npython:str\nAtrialFiber\npv.PolyData\npython:None\n_description_\npv.UnstructuredGrid\npython:str\nAtrialFiber\npv.PolyData\npython:None\n_description_\npv.UnstructuredGrid\nnp.ndarray\noutflow_tracts\nNone\npython:float\npython:float\npython:list\npython:float\npython:float\npython:None\npython:tuple\nnp.ndarray\nnp.ndarray\npv.UnstructuredGrid\nnp.ndarray\npython:list\npython:float\npython:float\npython:list\npython:float\npython:float\npython:None\nnp.ndarray\npython:str\npython:dict\noptional\n{ \"alpha_left\": [-60, 60], \"alpha_right\": [-60, 60],\n\"alpha_ot\": None, \"beta_left\": [-65, 25], \"beta_right\": [-65, 25], \"beta_ot\": None, }\npython:False\npv.UnstructuredGrid\nfiber\ncross-fiber\nsheet"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.read_laplace_solution",
        "title": "The laplace_post.py module > Module detail > read_laplace_solution",
        "section": "Module detail > read_laplace_solution",
        "text": "laplace_post.read_laplace_solution(directory: str, field_list: list[str], read_heatflux: bool = False) -> pyvista.UnstructuredGrid\n\nRead laplace fields from d3plot files.\n\nParameters\n\ndirectory\n\npython:str\n\nDirectory of d3plot files.\n\nfield_list\n\npython:list[python:str]\n\nName of each d3plot file/field.\n\nread_heatflux\n\nbool, default: python:False\n\nWhether to read heatflux.\n\nReturns\n\npv.UnstructuredGrid\n\nGrid with point data of each field.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.update_transmural_by_normal",
        "title": "The laplace_post.py module > Module detail > update_transmural_by_normal",
        "section": "Module detail > update_transmural_by_normal",
        "text": "laplace_post.update_transmural_by_normal(grid: pyvista.UnstructuredGrid, surface: pyvista.PolyData) -> numpy.ndarray\n\nUse surface normal for transmural direction.\n\nParameters\n\ngrid\n\npv.UnstructuredGrid\n\nAtrium grid.\n\nsurface\n\npv.PolyData\n\nAtrium endocardium surface.\n\nReturns\n\nnp.ndarray\n\nCell transmural direction vector.\n\nNotes\n\nAssume mesh is coarse compared to the thickness. Solid cell normal\nis interpolated from closest surface normal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.orthogonalization",
        "title": "The laplace_post.py module > Module detail > orthogonalization",
        "section": "Module detail > orthogonalization",
        "text": "laplace_post.orthogonalization(grad_trans: numpy.ndarray, k: numpy.ndarray) -> tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nOrthogonalization.\n\nParameters\n\ngrad_trans\n\nnp.ndarray\n\nTransmural vector.\n\nk\n\nnp.ndarray\n\nBundle selection vector.\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray, np.ndarray]\n\nLocal coordinate system e_l, e_n, e_t.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.compute_la_fiber_cs",
        "title": "The laplace_post.py module > Module detail > compute_la_fiber_cs",
        "section": "Module detail > compute_la_fiber_cs",
        "text": "laplace_post.compute_la_fiber_cs(directory: str, settings: ansys.health.heart.settings.settings.AtrialFiber, endo_surface: pyvista.PolyData = None) -> pyvista.UnstructuredGrid\n\nCompute left atrium fibers coordinate system.\n\nParameters\n\ndirectory\n\npython:str\n\nDirectory of d3plot files.\n\nsettings\n\nAtrialFiber\n\nAtrial fiber settings.\n\nendo_surface\n\npv.PolyData, default: python:None\n\n_description_. If given, normal direction is updated by the surface\nnormal instead of the Laplace solution.\n\nReturns\n\npv.UnstructuredGrid\n\nPV object with fiber coordinates system.\n\nNotes\n\nThis method is described in Modeling cardiac muscle fibers in ventricular and\natrial electrophysiology simulations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.compute_ra_fiber_cs",
        "title": "The laplace_post.py module > Module detail > compute_ra_fiber_cs",
        "section": "Module detail > compute_ra_fiber_cs",
        "text": "laplace_post.compute_ra_fiber_cs(directory: str, settings: ansys.health.heart.settings.settings.AtrialFiber, endo_surface: pyvista.PolyData = None) -> pyvista.UnstructuredGrid\n\nCompute right atrium fibers coordinate system.\n\nParameters\n\ndirectory\n\npython:str\n\nDirectory of d3plot files.\n\nsettings\n\nAtrialFiber\n\nAtrial fiber settings.\n\nendo_surface\n\npv.PolyData, default: python:None\n\n_description_. If given, normal direction is updated by the surface normal\ninstead of the Laplace solution.\n\nReturns\n\npv.UnstructuredGrid\n\nPV object with the fiber coordinates system.\n\nNotes\n\nThis method is described in Modeling cardiac muscle fibers in ventricular and\natrial electrophysiology simulations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.set_rotation_bounds",
        "title": "The laplace_post.py module > Module detail > set_rotation_bounds",
        "section": "Module detail > set_rotation_bounds",
        "text": "laplace_post.set_rotation_bounds(w: numpy.ndarray, endo: float, epi: float, outflow_tracts: list[float, float] = None) -> tuple[numpy.ndarray, numpy.ndarray]\n\nDefine rotation bounds from input parameters.\n\nParameters\n\nw\n\nnp.ndarray\n\nIntra-ventricular interpolation weight if outflow_tracts is not None.\n\nendo\n\npython:float\n\nRotation angle at endocardium.\n\nepi\n\npython:float\n\nRotation angle at epicardium.\n\noutflow_tracts\n\npython:list[python:float, python:float], default: python:None\n\nRotation angle of enendocardium do and epicardium on outflow tract.\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\nCell-wise rotation bounds for endocardium and epicardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.compute_rotation_angle",
        "title": "The laplace_post.py module > Module detail > compute_rotation_angle",
        "section": "Module detail > compute_rotation_angle",
        "text": "laplace_post.compute_rotation_angle(grid: pyvista.UnstructuredGrid, w: numpy.ndarray, rotation: list[float, float], outflow_tracts: list[float, float] = None) -> numpy.ndarray\n\nRotate by alpha and beta angles.\n\nParameters\n\ngrid\n\npv.UnstructuredGrid\n\nMesh grid.\n\nw\n\nnp.ndarray\n\nIntral ventricular interpolation weight.\n\nrotation\n\npython:list[python:float, python:float]\n\nRotation angles in degrees at endocardium and epicardium.\n\noutflow_tracts\n\npython:list[python:float, python:float], default: python:None\n\nRotation angle of enendocardium do and epicardium on outflow tract.\n\nReturns\n\nnp.ndarray\n\nCell-wise rotation angles.\n\nNotes\n\nCompute for all cells, but filter by left/right mask outside of this function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/laplace_post/index",
        "href": "api/ansys/health/heart/post/laplace_post/index.html#laplace_post.compute_ventricle_fiber_by_drbm",
        "title": "The laplace_post.py module > Module detail > compute_ventricle_fiber_by_drbm",
        "section": "Module detail > compute_ventricle_fiber_by_drbm",
        "text": "laplace_post.compute_ventricle_fiber_by_drbm(directory: str, settings: dict = {'alpha_left': [-60, 60], 'alpha_right': [-60, 60], 'alpha_ot': None, 'beta_left': [-65, 25], 'beta_right': [-65, 25], 'beta_ot': None}, left_only: bool = False) -> pyvista.UnstructuredGrid\n\nCompute the fiber coordinate system from Laplace solving.\n\nParameters\n\ndirectory\n\npython:str\n\nDirectory of d3plot/tprint files.\n\nsettings\n\npython:dict, optional\n\nRotation angles. By default: { \"alpha_left\": [-60, 60], \"alpha_right\": [-60, 60],\n\"alpha_ot\": None, \"beta_left\": [-65, 25], \"beta_right\": [-65, 25], \"beta_ot\": None, }.\n\nleft_only\n\nbool, default: python:False\n\nWhether to only compute fibers on the left ventricle.\n\nReturns\n\npv.UnstructuredGrid\n\nGrid containing fiber, cross-fiber, and sheet vectors.\n\nNotes\n\nThe D-RBM method is described in Modeling cardiac muscle fibers in ventricular and\natrial electrophysiology simulations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#purkinje",
        "title": "Purkinje",
        "section": "Purkinje",
        "text": "Bases: Settings\nClass for keeping track of Purkinje settings.\nPurkinje\nPurkinje\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#ansys.health.heart.settings.settings.Purkinje",
        "title": "Purkinje > Purkinje > Purkinje",
        "section": "Purkinje > Purkinje",
        "text": "class ansys.health.heart.settings.settings.Purkinje\n\nBases: Settings\n\nClass for keeping track of Purkinje settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#overview",
        "title": "Purkinje > Overview",
        "section": "Overview",
        "text": "node_id_origin_left\nLeft Purkinje origin ID.\nnode_id_origin_right\nRight Purkinje origin id.\nedgelen\nEdge length.\nngen\nNumber of generations.\nnbrinit\nNumber of beams from origin point.\nnsplit\nNumber of splits at each leaf.\npmjtype\nPurkinje muscle junction type.\npmjradius\nPurkinje muscle junction radius.\nOverview\nnode_id_origin_left\nnode_id_origin_right\nedgelen\nngen\nnbrinit\nnsplit\npmjtype\npmjradius"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#import-detail",
        "title": "Purkinje > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#attribute-detail",
        "title": "Purkinje > Attribute detail",
        "section": "Attribute detail",
        "text": "Left Purkinje origin ID.\nRight Purkinje origin id.\nEdge length.\nNumber of generations.\nNumber of beams from origin point.\nNumber of splits at each leaf.\nPurkinje muscle junction type.\nPurkinje muscle junction radius.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.node_id_origin_left",
        "title": "Purkinje > Attribute detail > node_id_origin_left",
        "section": "Attribute detail > node_id_origin_left",
        "text": "Purkinje.node_id_origin_left: int = None\n\nLeft Purkinje origin ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.node_id_origin_right",
        "title": "Purkinje > Attribute detail > node_id_origin_right",
        "section": "Attribute detail > node_id_origin_right",
        "text": "Purkinje.node_id_origin_right: int = None\n\nRight Purkinje origin id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.edgelen",
        "title": "Purkinje > Attribute detail > edgelen",
        "section": "Attribute detail > edgelen",
        "text": "Purkinje.edgelen: pint.Quantity = 0\n\nEdge length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.ngen",
        "title": "Purkinje > Attribute detail > ngen",
        "section": "Attribute detail > ngen",
        "text": "Purkinje.ngen: pint.Quantity = 0\n\nNumber of generations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.nbrinit",
        "title": "Purkinje > Attribute detail > nbrinit",
        "section": "Attribute detail > nbrinit",
        "text": "Purkinje.nbrinit: pint.Quantity = 0\n\nNumber of beams from origin point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.nsplit",
        "title": "Purkinje > Attribute detail > nsplit",
        "section": "Attribute detail > nsplit",
        "text": "Purkinje.nsplit: pint.Quantity = 0\n\nNumber of splits at each leaf.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.pmjtype",
        "title": "Purkinje > Attribute detail > pmjtype",
        "section": "Attribute detail > pmjtype",
        "text": "Purkinje.pmjtype: pint.Quantity = 0\n\nPurkinje muscle junction type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Purkinje",
        "href": "api/ansys/health/heart/settings/settings/Purkinje.html#Purkinje.pmjradius",
        "title": "Purkinje > Attribute detail > pmjradius",
        "section": "Attribute detail > pmjradius",
        "text": "Purkinje.pmjradius: pint.Quantity = 0\n\nPurkinje muscle junction radius.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/postprocessor/ep-postprocess-reaction-eikonal",
        "href": "examples/postprocessor/ep-postprocess-reaction-eikonal.html#postprocess-a-reaction-eikonal-model",
        "title": "Postprocess a Reaction-Eikonal model.",
        "section": "Postprocess a Reaction-Eikonal model.",
        "text": "This example shows how to postprocess a full heart reaction eikonal model.\nWhen using a standalone version of the DPF Server, you must accept the license terms. To\naccept these terms, you can set this environment variable:\nPostprocess a Reaction-Eikonal model."
    },
    {
        "objectID": "examples/postprocessor/ep-postprocess-reaction-eikonal",
        "href": "examples/postprocessor/ep-postprocess-reaction-eikonal.html#perform-the-required-imports",
        "title": "Postprocess a Reaction-Eikonal model. > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths.\nPerform the required imports"
    },
    {
        "objectID": "examples/postprocessor/ep-postprocess-reaction-eikonal",
        "href": "examples/postprocessor/ep-postprocess-reaction-eikonal.html#create-a-postprocessor-object",
        "title": "Postprocess a Reaction-Eikonal model. > Create a postprocessor object",
        "section": "Create a postprocessor object",
        "text": "This example assumes that you have you ran a full heart electrophysiology simulation\nand that the d3plot files are located in data_path.\nCreate a postprocessor object\ndata_path"
    },
    {
        "objectID": "examples/postprocessor/ep-postprocess-reaction-eikonal",
        "href": "examples/postprocessor/ep-postprocess-reaction-eikonal.html#call-methods-to-retrieve-activation-time",
        "title": "Postprocess a Reaction-Eikonal model. > Call methods to retrieve activation time",
        "section": "Call methods to retrieve activation time",
        "text": "Call methods to retrieve activation time"
    },
    {
        "objectID": "examples/postprocessor/ep-postprocess-reaction-eikonal",
        "href": "examples/postprocessor/ep-postprocess-reaction-eikonal.html#create-a-clip-view",
        "title": "Postprocess a Reaction-Eikonal model. > Create a clip view.",
        "section": "Create a clip view.",
        "text": "Total running time of the script: (0 minutes 9.113 seconds)\nDownload Jupyter notebook: ep-postprocess-reaction-eikonal.ipynb\nDownload Python source code: ep-postprocess-reaction-eikonal.py\nDownload zipped: ep-postprocess-reaction-eikonal.zip\nGallery generated by Sphinx-Gallery\nCreate a clip view.\nDownload Jupyter notebook: ep-postprocess-reaction-eikonal.ipynb\nDownload Python source code: ep-postprocess-reaction-eikonal.py\nDownload zipped: ep-postprocess-reaction-eikonal.zip"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#run-a-full-heart-electrophysiology-simulation",
        "title": "Run a full-heart electrophysiology simulation",
        "section": "Run a full-heart electrophysiology simulation",
        "text": "This example shows how to consume a full-heart model and set it up for the\nmain electrophysiology simulation. It loads a pre-computed heart model\nand computes the fiber orientation, Purkinje network, and conduction system. It\nthen simulates the electrophysiology.\nWhen using a standalone version of the DPF Server, you must accept the license terms. To\naccept these terms, you can set this environment variable:\nRun a full-heart electrophysiology simulation"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#perform-the-required-imports",
        "title": "Run a full-heart electrophysiology simulation > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, heart model, and LS-DYNA executable file.\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#load-the-full-heart-model",
        "title": "Run a full-heart electrophysiology simulation > Load the full-heart model",
        "section": "Load the full-heart model",
        "text": "Load the full-heart model.\nLoad the full-heart model"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#instantiate-the-simulator",
        "title": "Run a full-heart electrophysiology simulation > Instantiate the simulator",
        "section": "Instantiate the simulator",
        "text": "Instantiate the simulator and define settings.\nInstantiate the simulator"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#load-simulation-settings",
        "title": "Run a full-heart electrophysiology simulation > Load simulation settings",
        "section": "Load simulation settings",
        "text": "Load the default settings.\nLoad simulation settings"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#compute-fiber-orientation",
        "title": "Run a full-heart electrophysiology simulation > Compute fiber orientation",
        "section": "Compute fiber orientation",
        "text": "Compute fiber orientation and plot the fibers on the entire model.\nCompute fiber orientation"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#compute-the-conduction-system",
        "title": "Run a full-heart electrophysiology simulation > Compute the conduction system",
        "section": "Compute the conduction system",
        "text": "Compute the conduction system and Purkinje network, and then visualize the results.\nThe action potential propagates faster through this system compared to the rest of the model.\nCompute the conduction system"
    },
    {
        "objectID": "examples/simulator/ep-simulator-fullheart_rodero",
        "href": "examples/simulator/ep-simulator-fullheart_rodero.html#start-the-main-simulation",
        "title": "Run a full-heart electrophysiology simulation > Start the main simulation",
        "section": "Start the main simulation",
        "text": "Start the main electrophysiology simulation. This uses the previously computed fiber orientation\nand Purkinje network to set up and run the LS-DYNA model.\nTotal running time of the script: (7 minutes 55.673 seconds)\nDownload Jupyter notebook: ep-simulator-fullheart_rodero.ipynb\nDownload Python source code: ep-simulator-fullheart_rodero.py\nDownload zipped: ep-simulator-fullheart_rodero.zip\nGallery generated by Sphinx-Gallery\nStart the main simulation\nDownload Jupyter notebook: ep-simulator-fullheart_rodero.ipynb\nDownload Python source code: ep-simulator-fullheart_rodero.py\nDownload zipped: ep-simulator-fullheart_rodero.zip"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/index",
        "href": "api/ansys/health/heart/models_utils/index.html#the-models_utilspy-module",
        "title": "The models_utils.py module",
        "section": "The models_utils.py module",
        "text": "The models_utils.py module\nmodels_utils.py"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/index",
        "href": "api/ansys/health/heart/models_utils/index.html#summary",
        "title": "The models_utils.py module > Summary",
        "section": "Summary",
        "text": "LandMarks\nHeart anatomical points.\nHeartModelUtils\nStateless methods for the heart model.\nSummary\nLandMarks\nHeartModelUtils"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/index",
        "href": "api/ansys/health/heart/models_utils/index.html#description",
        "title": "The models_utils.py module > Description",
        "section": "Description",
        "text": "Stateless methods for the heart model.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.html#mechanicalmaterialmodel",
        "title": "MechanicalMaterialModel",
        "section": "MechanicalMaterialModel",
        "text": "Base class for all mechanical material model.\nMechanicalMaterialModel\nMechanicalMaterialModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.html#ansys.health.heart.settings.material.material.MechanicalMaterialModel",
        "title": "MechanicalMaterialModel > MechanicalMaterialModel > MechanicalMaterialModel",
        "section": "MechanicalMaterialModel > MechanicalMaterialModel",
        "text": "class ansys.health.heart.settings.material.material.MechanicalMaterialModel\n\nBase class for all mechanical material model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.html#import-detail",
        "title": "MechanicalMaterialModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.html#classes",
        "title": "MechanicalMaterialModel > Classes",
        "section": "Classes",
        "text": "DummyMaterial\nJust for initialization.\nClasses\nDummyMaterial"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#systemstate",
        "title": "SystemState",
        "section": "SystemState",
        "text": "System state including pressure, flow, and volume.\nFuture development.\nSystemState\nSystemState"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#ansys.health.heart.post.system_model_post.SystemState",
        "title": "SystemState > SystemState > SystemState",
        "section": "SystemState > SystemState",
        "text": "class ansys.health.heart.post.system_model_post.SystemState\n\nSystem state including pressure, flow, and volume.\n\nNotes\n\nFuture development.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#overview",
        "title": "SystemState > Overview",
        "section": "Overview",
        "text": "pressure\nflow\nvolume\nOverview\npressure\nflow\nvolume"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#import-detail",
        "title": "SystemState > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#attribute-detail",
        "title": "SystemState > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#SystemState.pressure",
        "title": "SystemState > Attribute detail > pressure",
        "section": "Attribute detail > pressure",
        "text": "SystemState.pressure: Pressure\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#SystemState.flow",
        "title": "SystemState > Attribute detail > flow",
        "section": "Attribute detail > flow",
        "text": "SystemState.flow: Flow\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/SystemState",
        "href": "api/ansys/health/heart/post/system_model_post/SystemState.html#SystemState.volume",
        "title": "SystemState > Attribute detail > volume",
        "section": "Attribute detail > volume",
        "text": "SystemState.volume: Volume\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/index",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/index.html#the-ep_mechanics_writerpy-module",
        "title": "The ep_mechanics_writer.py module",
        "section": "The ep_mechanics_writer.py module",
        "text": "The ep_mechanics_writer.py module\nep_mechanics_writer.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/index",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/index.html#summary",
        "title": "The ep_mechanics_writer.py module > Summary",
        "section": "Summary",
        "text": "ElectroMechanicsDynaWriter\nClass for preparing the input for LS-DYNA electromechanical simulation.\nSummary\nElectroMechanicsDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_mechanics_writer/index",
        "href": "api/ansys/health/heart/writer/ep_mechanics_writer/index.html#description",
        "title": "The ep_mechanics_writer.py module > Description",
        "section": "Description",
        "text": "Module containing classes for writing LS-DYNA keyword files for ep-mechanics simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/InvalidInputModelTypeError",
        "href": "api/ansys/health/heart/exceptions/InvalidInputModelTypeError.html#invalidinputmodeltypeerror",
        "title": "InvalidInputModelTypeError",
        "section": "InvalidInputModelTypeError",
        "text": "Bases: TypeError\nException raised when the input heart model type is invalid.\nInvalidInputModelTypeError\nInvalidInputModelTypeError\nTypeError"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/InvalidInputModelTypeError",
        "href": "api/ansys/health/heart/exceptions/InvalidInputModelTypeError.html#ansys.health.heart.exceptions.InvalidInputModelTypeError",
        "title": "InvalidInputModelTypeError > InvalidInputModelTypeError > InvalidInputModelTypeError",
        "section": "InvalidInputModelTypeError > InvalidInputModelTypeError",
        "text": "exception ansys.health.heart.exceptions.InvalidInputModelTypeError(message: str)\n\nBases: TypeError\n\nException raised when the input heart model type is invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/InvalidInputModelTypeError",
        "href": "api/ansys/health/heart/exceptions/InvalidInputModelTypeError.html#import-detail",
        "title": "InvalidInputModelTypeError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "getting-started",
        "href": "getting-started.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This section helps you get started with PyAnsys Heart. It provides an overview of\nkey techniques in cardiac modeling, package prerequisites, and installation information.\nLearn about the key techniques in cardiac modeling and the theory behind PyAnsys Heart.\nLearn about the prerequisites for using PyAnsys Heart.\nLearn how to install PyAnsys Heart.\nGetting started"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#cavity",
        "title": "Cavity",
        "section": "Cavity",
        "text": "Bases: Feature\nCavity class.\nCavity\nCavity\nFeature"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#ansys.health.heart.objects.Cavity",
        "title": "Cavity > Cavity > Cavity",
        "section": "Cavity > Cavity",
        "text": "class ansys.health.heart.objects.Cavity(surface: SurfaceMesh = None, centroid: numpy.ndarray = None, name=None)\n\nBases: Feature\n\nCavity class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#overview",
        "title": "Cavity > Overview",
        "section": "Overview",
        "text": "compute_centroid\nCompute the centroid of the cavity.\nvolume\nVolume of the cavity.\nsurface\nSurface mesh making up the cavity.\ncentroid\nCentroid of the cavity.\nOverview\ncompute_centroid\nvolume\nsurface\ncentroid"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#import-detail",
        "title": "Cavity > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#property-detail",
        "title": "Cavity > Property detail",
        "section": "Property detail",
        "text": "Volume of the cavity.\nProperty detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#Cavity.volume",
        "title": "Cavity > Property detail > volume",
        "section": "Property detail > volume",
        "text": "property Cavity.volume\n\nVolume of the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#attribute-detail",
        "title": "Cavity > Attribute detail",
        "section": "Attribute detail",
        "text": "Surface mesh making up the cavity.\nCentroid of the cavity.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#Cavity.surface",
        "title": "Cavity > Attribute detail > surface",
        "section": "Attribute detail > surface",
        "text": "Cavity.surface: SurfaceMesh\n\nSurface mesh making up the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#Cavity.centroid",
        "title": "Cavity > Attribute detail > centroid",
        "section": "Attribute detail > centroid",
        "text": "Cavity.centroid: numpy.ndarray = None\n\nCentroid of the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#method-detail",
        "title": "Cavity > Method detail",
        "section": "Method detail",
        "text": "Compute the centroid of the cavity.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cavity",
        "href": "api/ansys/health/heart/objects/Cavity.html#Cavity.compute_centroid",
        "title": "Cavity > Method detail > compute_centroid",
        "section": "Method detail > compute_centroid",
        "text": "Cavity.compute_centroid()\n\nCompute the centroid of the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.html#activemodel",
        "title": "ActiveModel",
        "section": "ActiveModel",
        "text": "Abstract class for different active models.\nActiveModel\nActiveModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.html#ansys.health.heart.settings.material.material.ActiveModel",
        "title": "ActiveModel > ActiveModel > ActiveModel",
        "section": "ActiveModel > ActiveModel",
        "text": "class ansys.health.heart.settings.material.material.ActiveModel\n\nAbstract class for different active models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.html#import-detail",
        "title": "ActiveModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.html#classes",
        "title": "ActiveModel > Classes",
        "section": "Classes",
        "text": "Model1\nHold data for active model 1, check manual for details.\nModel3\nHold data for active model 3, check manual for details.\nModel4\nHold data for active model 4.\nModel2\nHold data for active model 2.\nModel5\nHold data for active model 5.\nClasses\nModel1\nModel3\nModel4\nModel2\nModel5"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#conductionpath",
        "title": "ConductionPath",
        "section": "ConductionPath",
        "text": "Conduction path class.\nConductionPath\nConductionPath"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ansys.health.heart.pre.conduction_path.ConductionPath",
        "title": "ConductionPath > ConductionPath > ConductionPath",
        "section": "ConductionPath > ConductionPath",
        "text": "class ansys.health.heart.pre.conduction_path.ConductionPath(name: ConductionPathType, mesh: ansys.health.heart.objects.Mesh, id: int, is_connected: numpy.ndarray, relying_surface: pyvista.PolyData, material: ansys.health.heart.settings.material.ep_material.EPMaterial = EPMaterial.DummyMaterial(), up_path: ConductionPath | None = None, down_path: ConductionPath | None = None)\n\nConduction path class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#overview",
        "title": "ConductionPath > Overview",
        "section": "Overview",
        "text": "plot\nPlot the conduction path with underlying surface.\nup_path\nGet upstream conduction path.\ndown_path\nGet downstream conduction path.\nlength\nLength of the conduction path.\nname\nmesh\nid\nis_connected\nrelying_surface\nep_material\ncreate_from_keypoints\nCreate a conduction path on a base mesh through a set of keypoints.\ncreate_from_k_file\nBuild conduction path from LS-DYNA k-file.\nOverview\nplot\nup_path\ndown_path\nlength\nname\nmesh\nid\nis_connected\nrelying_surface\nep_material\ncreate_from_keypoints\ncreate_from_k_file"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#import-detail",
        "title": "ConductionPath > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#property-detail",
        "title": "ConductionPath > Property detail",
        "section": "Property detail",
        "text": "Get upstream conduction path.\nGet downstream conduction path.\nLength of the conduction path.\nProperty detail"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.up_path",
        "title": "ConductionPath > Property detail > up_path",
        "section": "Property detail > up_path",
        "text": "property ConductionPath.up_path: ConductionPath | None\n\nGet upstream conduction path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.down_path",
        "title": "ConductionPath > Property detail > down_path",
        "section": "Property detail > down_path",
        "text": "property ConductionPath.down_path: ConductionPath | None\n\nGet downstream conduction path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.length",
        "title": "ConductionPath > Property detail > length",
        "section": "Property detail > length",
        "text": "property ConductionPath.length\n\nLength of the conduction path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#attribute-detail",
        "title": "ConductionPath > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.name",
        "title": "ConductionPath > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "ConductionPath.name\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.mesh",
        "title": "ConductionPath > Attribute detail > mesh",
        "section": "Attribute detail > mesh",
        "text": "ConductionPath.mesh\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.id",
        "title": "ConductionPath > Attribute detail > id",
        "section": "Attribute detail > id",
        "text": "ConductionPath.id\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.is_connected",
        "title": "ConductionPath > Attribute detail > is_connected",
        "section": "Attribute detail > is_connected",
        "text": "ConductionPath.is_connected\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.relying_surface",
        "title": "ConductionPath > Attribute detail > relying_surface",
        "section": "Attribute detail > relying_surface",
        "text": "ConductionPath.relying_surface\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.ep_material",
        "title": "ConductionPath > Attribute detail > ep_material",
        "section": "Attribute detail > ep_material",
        "text": "ConductionPath.ep_material\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#method-detail",
        "title": "ConductionPath > Method detail",
        "section": "Method detail",
        "text": "Plot the conduction path with underlying surface.\nCreate a conduction path on a base mesh through a set of keypoints.\nName of the conduction path.\nKeypoints used to construct the path on the base mesh.\nID of the conduction path.\nBase mesh where the conductionn path is created. If PolyData, then the\nresult is a geodesic path on the surface. If pv.UnstructuredGrid, then the\nresult the shortest path in the solid.\nDescribes how the path is connected to the solid mesh.\nLength of line element in case of refinement.\nConduction path.\nBuild conduction path from LS-DYNA k-file.\nConduction path name.\nPath to LS-DYNA k-file.\nID of the conduction path.\nSurface mesh that the conduction path is relying on.\nHeartModel object.\nWhether to merge the apex node with the solid mesh.\nConduction path.\nMethod detail\nConductionPathType\npython:list\nnp.ndarray\npython:int\npv.PolyData\npv.UnstructuredGrid\nPolyData\npv.UnstructuredGrid\nLiteral\npython:float\npython:None\nConductionPath\nConductionPathType\npython:str\npython:int\npv.PolyData\nHeartModel\npython:True\nConductionPath"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.plot",
        "title": "ConductionPath > Method detail > plot",
        "section": "Method detail > plot",
        "text": "ConductionPath.plot()\n\nPlot the conduction path with underlying surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.create_from_keypoints",
        "title": "ConductionPath > Method detail > create_from_keypoints",
        "section": "Method detail > create_from_keypoints",
        "text": "static ConductionPath.create_from_keypoints(name: ConductionPathType, keypoints: list[numpy.ndarray], id: int, base_mesh: pyvista.PolyData | pyvista.UnstructuredGrid, connection: Literal['none', 'first', 'last', 'all'] = 'none', line_length: float | None = 1.5) -> ConductionPath\n\nCreate a conduction path on a base mesh through a set of keypoints.\n\nParameters\n\nname\n\nConductionPathType\n\nName of the conduction path.\n\nkeypoints\n\npython:list[np.ndarray]\n\nKeypoints used to construct the path on the base mesh.\n\nid\n\npython:int\n\nID of the conduction path.\n\nbase_mesh\n\npv.PolyData | pv.UnstructuredGrid\n\nBase mesh where the conductionn path is created. If PolyData, then the\nresult is a geodesic path on the surface. If pv.UnstructuredGrid, then the\nresult the shortest path in the solid.\n\nconnection\n\nLiteral[&quot;none&quot;, &quot;first&quot;, &quot;last&quot;, &quot;all&quot;]\n\n\n\n, default: “none”\n\nDescribes how the path is connected to the solid mesh.\n\nline_length\n\npython:float | python:None, default: 1.5\n\nLength of line element in case of refinement.\n\nReturns\n\nConductionPath\n\nConduction path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/ConductionPath",
        "href": "api/ansys/health/heart/pre/conduction_path/ConductionPath.html#ConductionPath.create_from_k_file",
        "title": "ConductionPath > Method detail > create_from_k_file",
        "section": "Method detail > create_from_k_file",
        "text": "static ConductionPath.create_from_k_file(name: ConductionPathType, k_file: str, id: int, base_mesh: pyvista.PolyData, model, merge_apex: bool = True) -> ConductionPath\n\nBuild conduction path from LS-DYNA k-file.\n\nParameters\n\nname\n\nConductionPathType\n\nConduction path name.\n\nk_file\n\npython:str\n\nPath to LS-DYNA k-file.\n\nid\n\npython:int\n\nID of the conduction path.\n\nbase_mesh\n\npv.PolyData\n\nSurface mesh that the conduction path is relying on.\n\nmodel\n\nHeartModel\n\nHeartModel object.\n\nmerge_apex\n\nbool, default: python:True\n\nWhether to merge the apex node with the solid mesh.\n\nReturns\n\nConductionPath\n\nConduction path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/index",
        "href": "api/ansys/health/heart/utils/index.html#the-utils-package",
        "title": "The utils package",
        "section": "The utils package",
        "text": "The utils package\nutils"
    },
    {
        "objectID": "api/ansys/health/heart/utils/index",
        "href": "api/ansys/health/heart/utils/index.html#summary",
        "title": "The utils package > Summary",
        "section": "Summary",
        "text": "connectivity\nModule containing methods for mesh connectivity.\ndownload\nModule containing methods to download cases from public databases.\nfluent_reader\nModule containing functions to read and write Fluent meshes in HDF5 format.\nlandmark_utils\nModule for computing heart anatomical landmarks.\nvtk_utils\nModule containing methods for mesh operations related to the VTK library.\nSummary\nconnectivity\ndownload\nfluent_reader\nlandmark_utils\nvtk_utils"
    },
    {
        "objectID": "api/ansys/health/heart/utils/index",
        "href": "api/ansys/health/heart/utils/index.html#description",
        "title": "The utils package > Description",
        "section": "Description",
        "text": "Subpackage containing various utilities.\nDescription"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#contribute-as-a-user",
        "title": "Contribute as a user",
        "section": "Contribute as a user",
        "text": "Users can contribute in a variety of ways, such as reporting bugs, requesting\nnew features, testing in-development features, starting discussions, answering\nquestions, and sharing their work with the community.\nDo not include any proprietary or sensitive information when reporting bugs\nor showcasing your work.\nFound a bug? Report it here.\nGot an idea for a new feature? Share it!\nAnxious to try out a new feature? Here’s how you can do it.\nWant to discuss something? Start or contribute to a discussion.\nHelp others by answering their questions.\nShare your work with the community.\nContribute as a user"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#report-bugs",
        "title": "Contribute as a user > Report bugs",
        "section": "Report bugs",
        "text": "If you encounter a bug or an issue while using the project, report it.\nYour feedback helps to identify problems and get them resolved.\nSearch the PyAnsys Heart Issues page to see if the issue has already been reported.\nCreate an issue if one doesn’t already exist.\nInclude a clear description of the issue.\nProvide steps to reproduce the issue.\nMention the version of the project you’re using.\nInclude screenshots or logs if possible.\nReport bugs"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#request-a-new-feature",
        "title": "Contribute as a user > Request a new feature",
        "section": "Request a new feature",
        "text": "Do you have an idea for a new feature or an improvement? Your suggestions are\nwelcome. You can request a new feature by creating an issue on the PyAnsys Heart Issues\npage.\nRequest a new feature"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#test-a-new-feature",
        "title": "Contribute as a user > Test a new feature",
        "section": "Test a new feature",
        "text": "You can test a new feature before it is officially released. To do\nso, you can install PyAnsys Heart from the source code by performing the\nsteps in the following child topics.\nTest a new feature"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#clone-the-repository",
        "title": "Contribute as a user > Clone the repository",
        "section": "Clone the repository",
        "text": "Clone and install the repository:\nClone the repository"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#install-for-users",
        "title": "Contribute as a user > Install for users",
        "section": "Install for users",
        "text": "Install the latest version of PyAnsys Heart to test the latest features as\nthey are being developed, without having to wait for releases.\nInstall for users"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#set-up-a-virtual-environment",
        "title": "Contribute as a user > Set up a virtual environment",
        "section": "Set up a virtual environment",
        "text": "Navigate to the project’s root directory:\nCreate a new virtual environment named .venv to isolate your system’s\nPython environment:\nActivate this environment:\nSet up a virtual environment\n.venv"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#install-the-latest-version",
        "title": "Contribute as a user > Install the latest version",
        "section": "Install the latest version",
        "text": "Install PyAnsys Heart in editable mode:\nVerify the installation by checking the version of the library:\nInstall the latest version"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#start-a-discussion",
        "title": "Contribute as a user > Start a discussion",
        "section": "Start a discussion",
        "text": "Complex topics might require a discussion. Whether you want to know how to use\nPyAnsys Heart for solving your specific problem or you have a suggestion for a new\nfeature, a discussion is a good place to start. You can open a new discussion\non the `PyAnsys Heart Discussions`_ page.\nStart a discussion"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#answer-questions",
        "title": "Contribute as a user > Answer questions",
        "section": "Answer questions",
        "text": "Another great way to contribute is to help others by answering their questions.\nMaintain a positive and constructive attitude while answering questions. If you\ndon’t know the answer, you can still help by pointing the person in the right\ndirection.\nAnswer questions"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#share-your-work",
        "title": "Contribute as a user > Share your work",
        "section": "Share your work",
        "text": "If you have used PyAnsys Heart to create something interesting, share it with the rest\nof the community. You can share your work on the `PyAnsys Heart discussions`_ page. Include\na brief description of your work and any relevant links that others might find\nuseful.\nShare your work"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/zeropressure/index",
        "href": "api/ansys/health/heart/settings/defaults/zeropressure/index.html#the-zeropressurepy-module",
        "title": "The zeropressure.py module",
        "section": "The zeropressure.py module",
        "text": "The zeropressure.py module\nzeropressure.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/zeropressure/index",
        "href": "api/ansys/health/heart/settings/defaults/zeropressure/index.html#summary",
        "title": "The zeropressure.py module > Summary",
        "section": "Summary",
        "text": "analysis\nSummary\nanalysis"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/zeropressure/index",
        "href": "api/ansys/health/heart/settings/defaults/zeropressure/index.html#description",
        "title": "The zeropressure.py module > Description",
        "section": "Description",
        "text": "Module contains default values for zero-pressure/stress-free-configuration simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/zeropressure/index",
        "href": "api/ansys/health/heart/settings/defaults/zeropressure/index.html#module-detail",
        "title": "The zeropressure.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/zeropressure/index",
        "href": "api/ansys/health/heart/settings/defaults/zeropressure/index.html#zeropressure.analysis",
        "title": "The zeropressure.py module > Module detail > analysis",
        "section": "Module detail > analysis",
        "text": "zeropressure.analysis\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/index",
        "href": "api/ansys/health/heart/writer/mechanics_writer/index.html#the-mechanics_writerpy-module",
        "title": "The mechanics_writer.py module",
        "section": "The mechanics_writer.py module",
        "text": "The mechanics_writer.py module\nmechanics_writer.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/index",
        "href": "api/ansys/health/heart/writer/mechanics_writer/index.html#summary",
        "title": "The mechanics_writer.py module > Summary",
        "section": "Summary",
        "text": "MechanicsDynaWriter\nClass for preparing the input for a mechanics LS-DYNA simulation.\nZeroPressureMechanicsDynaWriter\nClass for preparing the input for a stress-free LS-DYNA simulation.\nSummary\nMechanicsDynaWriter\nZeroPressureMechanicsDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/index",
        "href": "api/ansys/health/heart/writer/mechanics_writer/index.html#description",
        "title": "The mechanics_writer.py module > Description",
        "section": "Description",
        "text": "Module containing classes for writing LS-DYNA keyword files mechanics simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#dummymaterial",
        "title": "DummyMaterial",
        "section": "DummyMaterial",
        "text": "Just for initialization.\nDummyMaterial\nDummyMaterial"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#ansys.health.heart.settings.material.material.MechanicalMaterialModel.DummyMaterial",
        "title": "DummyMaterial > DummyMaterial > DummyMaterial",
        "section": "DummyMaterial > DummyMaterial",
        "text": "class ansys.health.heart.settings.material.material.MechanicalMaterialModel.DummyMaterial\n\nJust for initialization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#overview",
        "title": "DummyMaterial > Overview",
        "section": "Overview",
        "text": "__repr__\nPrint a message.\nOverview\n__repr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#import-detail",
        "title": "DummyMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#method-detail",
        "title": "DummyMaterial > Method detail",
        "section": "Method detail",
        "text": "Print a message.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#DummyMaterial.__repr__",
        "title": "DummyMaterial > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DummyMaterial.__repr__()\n\nPrint a message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#the-writer_utilspy-module",
        "title": "The writer_utils.py module",
        "section": "The writer_utils.py module",
        "text": "The writer_utils.py module\nwriter_utils.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#summary",
        "title": "The writer_utils.py module > Summary",
        "section": "Summary",
        "text": "create_node_keyword\nCreate node keyword from a NumPy array of nodes.\nadd_nodes_to_kw\nAdd nodes to an existing *NODE keyword.\nadd_beams_to_kw\nAdd beams to an existing *ELEMENT_BEAM keyword.\ncreate_segment_set_keyword\nCreate a segment set keyword from an array with the segment set definition.\ncreate_node_set_keyword\nCreate a nodeset.\ncreate_element_shell_keyword\nCreate an element shell keyword.\ncreate_element_solid_keyword\nFormat the *ELEMENT_SOLID keyword with the provided input.\ncreate_element_solid_ortho_keyword\nFormat the *ELEMENT_SOLID_ORTHO keyword with the provided input.\ncreate_define_curve_kw\nCreate define curve from x and y values.\ncreate_define_sd_orientation_kw\nCreate define SD orientation keyword.\ncreate_discrete_elements_kw\nCreate discrete elements based on input arguments.\nget_list_of_used_ids\nGet array of used IDs in the database.\nfast_element_writer\nFast implementation of the element writer.\nSummary\ncreate_node_keyword\nadd_nodes_to_kw\nadd_beams_to_kw\ncreate_segment_set_keyword\ncreate_node_set_keyword\ncreate_element_shell_keyword\ncreate_element_solid_keyword\ncreate_element_solid_ortho_keyword\ncreate_define_curve_kw\ncreate_define_sd_orientation_kw\ncreate_discrete_elements_kw\nget_list_of_used_ids\nfast_element_writer"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#description",
        "title": "The writer_utils.py module > Description",
        "section": "Description",
        "text": "Module for useful methods to help format LS-DYNA keywords.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#module-detail",
        "title": "The writer_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Create node keyword from a NumPy array of nodes.\nNumPy array containing the node coordinates.\nFormatted node keyword.\nAdd nodes to an existing *NODE keyword.\nNumPy array of node coordinates to add.\nIf (n,3), the node ID is continuous by offset.\nIf (n,4), the first column is the node ID.\nNode keyword.\nNode ID offset.\nIf nodes are already defined, this method adds both the nodes in the previous\nkeyword and the specified array of nodes. It automatically computes\nthe index offset in case node_kw.nodes is not empty.\nAdd beams to an existing *ELEMENT_BEAM keyword.\nNumPy array of beam coordinates to add.\nBeam keyword.\nBeam ID offset.\nIf beams are already defined, this method adds both the beams in the previous\nkeyword and the specified array of beams. It automatically computes\nthe index offset in case beam_kw.elements is not empty.\nCreate a segment set keyword from an array with the segment set definition.\nArray of node indices that make up the segment. If three columns are provided,\nit is assumed that the segments are triangular\nSegment set ID.\nTitle of the segment set.\nFormatted segment set keyword.\nCreate a nodeset.\nList of node IDs to include in the nodeset.\nID of the nodeset.\nTitle of the nodeset\nFormatted nodeset.\nCreate an element shell keyword.\nThis method creates an element shell keyword from a NumPy array of elements.\nEach row corresponds to an element.\nFormat the *ELEMENT_SOLID keyword with the provided input.\nNumPy array of integers with element definition.\nPart IDs of each element.\nElement ID.\nType of element to write\nFormatted *ELEMENT_SOLID keyword.\nFormat the *ELEMENT_SOLID_ORTHO keyword with the provided input.\nNumPy array of integers with element definition\nVector specifying the A direction.\nVector specifying the D direction.\nPart IDs of each element.\nElement ID.\nType of element to write.\nFormatted *ELEMENT_SOLID_ORTHO keyword.\nCreate define curve from x and y values.\nCreate define SD orientation keyword.\nArray of shape Nx3 with the defined vector.\nOffset for the vector ID.\nOption.\nCreate discrete elements based on input arguments.\nNx2 array with node IDs used for the discrete element.\nPart ID of the discrete elements given.\nOrientation IDs (vector IDs) that the spring acts on.\nYou can provide either an array of length N or a scalar integer.\nScale factor on forces. You can provide either an array of length N\nor a scalar value.\nOffset value for the element IDs.\nInitial offset, which is the initial displacement or rotation at t=0.\nGet array of used IDs in the database.\nDatabase of keywords.\nKeyword to find.\nArray of IDs (integers) that are already used\nFor example, for *SECTION, you would get *PART and *MAT IDs.\nFast implementation of the element writer.\nUse this method as an alternative to the PyDYNA keywords module.\nModule detail\nnp.ndarray\nkeywords.Node\nnp.ndarray\nkeywords.Node\npython:int\nnode_kw.nodes\nnp.ndarray\nkeywords.ElementBeam\npython:int\nbeam_kw.elements\nnp.ndarray\npython:int\npython:str\nkeywords.SetSegment\nnp.ndarray\npython:list\npython:int\npython:int\npython:int\npython:str\n'nodeset-title'\nkeywords.SetNodeList\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:str\n'tetra'\nkeywords.ElementSolid\nnp.ndarray\nnp.ndarray\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:str\n'tetra'\nkeywords.ElementSolidOrtho\nnp.ndarray\npython:int\npython:int\nnp.ndarray\npython:int\nnp.ndarray\npython:int\nnp.ndarray\npython:float\npython:int\npython:float\nDeck\npython:str\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_node_keyword",
        "title": "The writer_utils.py module > Module detail > create_node_keyword",
        "section": "Module detail > create_node_keyword",
        "text": "writer_utils.create_node_keyword(nodes: numpy.ndarray, offset: int = 0) -> ansys.dyna.core.keywords.keywords.Node\n\nCreate node keyword from a NumPy array of nodes.\n\nParameters\n\nnodes\n\nnp.ndarray\n\nNumPy array containing the node coordinates.\n\nReturns\n\nkeywords.Node\n\nFormatted node keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.add_nodes_to_kw",
        "title": "The writer_utils.py module > Module detail > add_nodes_to_kw",
        "section": "Module detail > add_nodes_to_kw",
        "text": "writer_utils.add_nodes_to_kw(nodes: numpy.ndarray, node_kw: ansys.dyna.core.keywords.keywords.Node, offset: int = 0) -> ansys.dyna.core.keywords.keywords.Node\n\nAdd nodes to an existing *NODE keyword.\n\nParameters\n\nnodes\n\nnp.ndarray\n\nNumPy array of node coordinates to add.\nIf (n,3), the node ID is continuous by offset.\nIf (n,4), the first column is the node ID.\n\nnode_kw\n\nkeywords.Node\n\nNode keyword.\n\noffset\n\npython:int\n\nNode ID offset.\n\nNotes\n\nIf nodes are already defined, this method adds both the nodes in the previous\nkeyword and the specified array of nodes. It automatically computes\nthe index offset in case node_kw.nodes is not empty.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.add_beams_to_kw",
        "title": "The writer_utils.py module > Module detail > add_beams_to_kw",
        "section": "Module detail > add_beams_to_kw",
        "text": "writer_utils.add_beams_to_kw(beams: numpy.ndarray, beam_kw: ansys.dyna.core.keywords.keywords.ElementBeam, pid: int, offset: int = 0) -> ansys.dyna.core.keywords.keywords.ElementBeam\n\nAdd beams to an existing *ELEMENT_BEAM keyword.\n\nParameters\n\nbeams\n\nnp.ndarray\n\nNumPy array of beam coordinates to add.\n\nbeam_kw\n\nkeywords.ElementBeam\n\nBeam keyword.\n\noffset\n\npython:int\n\nBeam ID offset.\n\nNotes\n\nIf beams are already defined, this method adds both the beams in the previous\nkeyword and the specified array of beams. It automatically computes\nthe index offset in case beam_kw.elements is not empty.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_segment_set_keyword",
        "title": "The writer_utils.py module > Module detail > create_segment_set_keyword",
        "section": "Module detail > create_segment_set_keyword",
        "text": "writer_utils.create_segment_set_keyword(segments: numpy.ndarray, segid: int = 1, title: str = '') -> ansys.dyna.core.keywords.keywords.SetSegment\n\nCreate a segment set keyword from an array with the segment set definition.\n\nParameters\n\nsegments\n\nnp.ndarray\n\nArray of node indices that make up the segment. If three columns are provided,\nit is assumed that the segments are triangular\n\nsegid\n\npython:int, default: 1\n\nSegment set ID.\n\ntitle\n\npython:str, default: “”\n\nTitle of the segment set.\n\nReturns\n\nkeywords.SetSegment\n\nFormatted segment set keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_node_set_keyword",
        "title": "The writer_utils.py module > Module detail > create_node_set_keyword",
        "section": "Module detail > create_node_set_keyword",
        "text": "writer_utils.create_node_set_keyword(node_ids: numpy.ndarray | list[int] | int, node_set_id: int = 1, title: str = 'nodeset-title') -> ansys.dyna.core.keywords.keywords.SetNodeList\n\nCreate a nodeset.\n\nParameters\n\nnode_ids\n\nnp.ndarray | python:list[python:int] | python:int\n\nList of node IDs to include in the nodeset.\n\nnode_set_id\n\npython:int, default: 1\n\nID of the nodeset.\n\ntitle\n\npython:str, default: 'nodeset-title'\n\nTitle of the nodeset\n\nReturns\n\nkeywords.SetNodeList\n\nFormatted nodeset.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_element_shell_keyword",
        "title": "The writer_utils.py module > Module detail > create_element_shell_keyword",
        "section": "Module detail > create_element_shell_keyword",
        "text": "writer_utils.create_element_shell_keyword(shells: numpy.ndarray, part_id: int = 1, id_offset: int = 0) -> ansys.dyna.core.keywords.keywords.ElementShell\n\nCreate an element shell keyword.\n\nNotes\n\nThis method creates an element shell keyword from a NumPy array of elements.\nEach row corresponds to an element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_element_solid_keyword",
        "title": "The writer_utils.py module > Module detail > create_element_solid_keyword",
        "section": "Module detail > create_element_solid_keyword",
        "text": "writer_utils.create_element_solid_keyword(elements: numpy.ndarray, e_id: numpy.ndarray, part_id: numpy.ndarray, element_type: str = 'tetra') -> ansys.dyna.core.keywords.keywords.ElementSolid\n\nFormat the *ELEMENT_SOLID keyword with the provided input.\n\nParameters\n\nelements\n\nnp.ndarray\n\nNumPy array of integers with element definition.\n\npart_id\n\nnp.ndarray\n\nPart IDs of each element.\n\ne_id\n\nnp.ndarray\n\nElement ID.\n\nelement_type\n\npython:str, default: 'tetra'\n\nType of element to write\n\nReturns\n\nkeywords.ElementSolid\n\nFormatted *ELEMENT_SOLID keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_element_solid_ortho_keyword",
        "title": "The writer_utils.py module > Module detail > create_element_solid_ortho_keyword",
        "section": "Module detail > create_element_solid_ortho_keyword",
        "text": "writer_utils.create_element_solid_ortho_keyword(elements: numpy.ndarray, a_vec: numpy.ndarray, d_vec: numpy.ndarray, e_id: numpy.ndarray, part_id: numpy.ndarray, element_type: str = 'tetra') -> ansys.dyna.core.keywords.keywords.ElementSolidOrtho\n\nFormat the *ELEMENT_SOLID_ORTHO keyword with the provided input.\n\nParameters\n\nelements\n\nnp.ndarray\n\nNumPy array of integers with element definition\n\na_vec\n\nnp.ndarray\n\nVector specifying the A direction.\n\nd_vec\n\nnp.ndarray\n\nVector specifying the D direction.\n\npart_id\n\nnp.ndarray\n\nPart IDs of each element.\n\ne_id\n\nnp.ndarray\n\nElement ID.\n\nelement_type\n\npython:str, default: 'tetra'\n\nType of element to write.\n\nReturns\n\nkeywords.ElementSolidOrtho\n\nFormatted *ELEMENT_SOLID_ORTHO keyword.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_define_curve_kw",
        "title": "The writer_utils.py module > Module detail > create_define_curve_kw",
        "section": "Module detail > create_define_curve_kw",
        "text": "writer_utils.create_define_curve_kw(x: numpy.ndarray, y: numpy.ndarray, curve_name: str = 'my-title', curve_id: int = 1, lcint: int = 15000) -> ansys.dyna.core.keywords.keywords.DefineCurve\n\nCreate define curve from x and y values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_define_sd_orientation_kw",
        "title": "The writer_utils.py module > Module detail > create_define_sd_orientation_kw",
        "section": "Module detail > create_define_sd_orientation_kw",
        "text": "writer_utils.create_define_sd_orientation_kw(vectors: numpy.ndarray, vector_id_offset: int = 0, iop: int = 0) -> ansys.dyna.core.keywords.keywords.DefineSdOrientation\n\nCreate define SD orientation keyword.\n\nParameters\n\nvectors\n\nnp.ndarray\n\nArray of shape Nx3 with the defined vector.\n\nvector_id_offset\n\npython:int, default: 0\n\nOffset for the vector ID.\n\niop\n\npython:int, default: 0\n\nOption.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.create_discrete_elements_kw",
        "title": "The writer_utils.py module > Module detail > create_discrete_elements_kw",
        "section": "Module detail > create_discrete_elements_kw",
        "text": "writer_utils.create_discrete_elements_kw(nodes: numpy.ndarray, part_id: int, vector_ids: numpy.ndarray | int, scale_factor: numpy.ndarray | float, element_id_offset: int = 0) -> ansys.dyna.core.keywords.keywords.ElementDiscrete\n\nCreate discrete elements based on input arguments.\n\nParameters\n\nnodes\n\nnp.ndarray\n\nNx2 array with node IDs used for the discrete element.\n\npart_id\n\npython:int\n\nPart ID of the discrete elements given.\n\nvector_ids\n\nnp.ndarray | python:int\n\nOrientation IDs (vector IDs) that the spring acts on.\nYou can provide either an array of length N or a scalar integer.\n\nscale_factor\n\nnp.ndarray | python:float\n\nScale factor on forces. You can provide either an array of length N\nor a scalar value.\n\nelement_id_offset\n\npython:int, default: 0\n\nOffset value for the element IDs.\n\ninit_offset\n\npython:float, default: 0.0\n\nInitial offset, which is the initial displacement or rotation at t=0.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.get_list_of_used_ids",
        "title": "The writer_utils.py module > Module detail > get_list_of_used_ids",
        "section": "Module detail > get_list_of_used_ids",
        "text": "writer_utils.get_list_of_used_ids(keyword_db: ansys.dyna.core.Deck, keyword_str: str) -> numpy.ndarray\n\nGet array of used IDs in the database.\n\nParameters\n\ndatabase\n\nDeck\n\nDatabase of keywords.\n\nkeyword\n\npython:str\n\nKeyword to find.\n\nReturns\n\nnp.ndarray\n\nArray of IDs (integers) that are already used\n\nNotes\n\nFor example, for *SECTION, you would get *PART and *MAT IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/writer_utils/index",
        "href": "api/ansys/health/heart/writer/writer_utils/index.html#writer_utils.fast_element_writer",
        "title": "The writer_utils.py module > Module detail > fast_element_writer",
        "section": "Module detail > fast_element_writer",
        "text": "writer_utils.fast_element_writer(element_kw: ansys.dyna.core.keywords.keywords.ElementSolidOrtho | ansys.dyna.core.keywords.keywords.ElementSolid, filename: str) -> None\n\nFast implementation of the element writer.\n\nNotes\n\nUse this method as an alternative to the PyDYNA keywords module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/input/index",
        "href": "api/ansys/health/heart/pre/input/index.html#the-inputpy-module",
        "title": "The input.py module",
        "section": "The input.py module",
        "text": "The input.py module\ninput.py"
    },
    {
        "objectID": "api/ansys/health/heart/pre/input/index",
        "href": "api/ansys/health/heart/pre/input/index.html#summary",
        "title": "The input.py module > Summary",
        "section": "Summary",
        "text": "Summary"
    },
    {
        "objectID": "api/ansys/health/heart/pre/input/index",
        "href": "api/ansys/health/heart/pre/input/index.html#description",
        "title": "The input.py module > Description",
        "section": "Description",
        "text": "Module to manage input.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/pre/input/index",
        "href": "api/ansys/health/heart/pre/input/index.html#notes",
        "title": "The input.py module > Notes",
        "section": "Notes",
        "text": "This module manages the different types of input that can be handled and includes\nuser-specified boundary meshes. This require remeshing.\nMethods are provided to validate the volume and boundary mesh objects (PyVista objects),\nand to get the necessary parts or boundaries for each respective model.\nNotes"
    },
    {
        "objectID": "api/ansys/health/heart/settings/index",
        "href": "api/ansys/health/heart/settings/index.html#the-settings-package",
        "title": "The settings package",
        "section": "The settings package",
        "text": "The settings package\nsettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/index",
        "href": "api/ansys/health/heart/settings/index.html#summary",
        "title": "The settings package > Summary",
        "section": "Summary",
        "text": "settings\nModule that defines classes that hold settings relevant for PyAnsys-Heart.\nSummary\nsettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/index",
        "href": "api/ansys/health/heart/settings/index.html#description",
        "title": "The settings package > Description",
        "section": "Description",
        "text": "Settings subpackage.\nDescription"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#define-materials",
        "title": "Define materials",
        "section": "Define materials",
        "text": "This example shows how to create a mechanical material and assign it to a heart part.\nDefine materials"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#import-material-module",
        "title": "Define materials > Import material module",
        "section": "Import material module",
        "text": "The unit system for heart modeling in LS-DYNA is [\"MPa\", \"mm\", \"N\", \"ms\", \"g\"].\nImport material module\n[\"MPa\", \"mm\", \"N\", \"ms\", \"g\"]"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#create-a-material",
        "title": "Define materials > Create a material",
        "section": "Create a material",
        "text": "Create a Neo-Hookean material as follows.\nThe recommended way to create a Neo-Hookean material is by\nactivating only the isotropic module in MAT_295.\nFor more information on MAT_295, see the LS-DYNA manuals.\nCreate a material"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#plot-ca2-with-threshold",
        "title": "Define materials > Plot Ca2+ with threshold",
        "section": "Plot Ca2+ with threshold",
        "text": "Plot Ca2+ with the threshold.\nWhen eta=0 in model 3, the stress curve is the active stress for all elements.\nIf eta!=0, this is the idealized active stress when fiber stretch stays at 1.\nPlot Ca2+ with threshold"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#create-mat_295-with-modules",
        "title": "Define materials > Create MAT_295 with modules",
        "section": "Create MAT_295 with modules",
        "text": "Create MAT_295 with the preceding modules.\nCreate MAT_295 with modules"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#create-ep-materials",
        "title": "Define materials > Create EP materials",
        "section": "Create EP materials",
        "text": "Create EP materials"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#assign-materials-to-a-part",
        "title": "Define materials > Assign materials to a part",
        "section": "Assign materials to a part",
        "text": "Assign the materials to the heart model.\nAssign materials to a part"
    },
    {
        "objectID": "examples/preprocessor/demo-material_pr",
        "href": "examples/preprocessor/demo-material_pr.html#load-a-heart-model",
        "title": "Define materials > Load a heart model",
        "section": "Load a heart model",
        "text": "You must complete the full heart preprocessing example first.\nIf no material is set before writing k files, the default material\nfrom the settings object is used.\nCreate a new part and set material\nTotal running time of the script: (0 minutes 7.523 seconds)\nDownload Jupyter notebook: demo-material_pr.ipynb\nDownload Python source code: demo-material_pr.py\nDownload zipped: demo-material_pr.zip\nGallery generated by Sphinx-Gallery\nLoad a heart model\nsettings\nDownload Jupyter notebook: demo-material_pr.ipynb\nDownload Python source code: demo-material_pr.py\nDownload zipped: demo-material_pr.zip"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.html#epmaterial",
        "title": "EPMaterial",
        "section": "EPMaterial",
        "text": "Bases: EPMaterialModel\nEP material module.\nEPMaterial\nEPMaterial\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.html#ansys.health.heart.settings.material.ep_material.EPMaterial",
        "title": "EPMaterial > EPMaterial > EPMaterial",
        "section": "EPMaterial > EPMaterial",
        "text": "class ansys.health.heart.settings.material.ep_material.EPMaterial\n\nBases: EPMaterialModel\n\nEP material module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.html#import-detail",
        "title": "EPMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.html#classes",
        "title": "EPMaterial > Classes",
        "section": "Classes",
        "text": "Insulator\nInsulator material.\nActive\nHold data for EP material.\nActiveBeam\nHold data for beam active EP material.\nPassive\nHold data for EP passive material.\nDummyMaterial\nJust for initialization.\nClasses\nInsulator\nActive\nActiveBeam\nPassive\nDummyMaterial"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#atrialfiber",
        "title": "AtrialFiber",
        "section": "AtrialFiber",
        "text": "Bases: Settings\nClass for keeping track of atrial fiber settings.\nDefault parameters are from doi.org/10.1016/j.cma.2020.113468 for idealized geometry.\nAtrialFiber\nAtrialFiber\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#ansys.health.heart.settings.settings.AtrialFiber",
        "title": "AtrialFiber > AtrialFiber > AtrialFiber",
        "section": "AtrialFiber > AtrialFiber",
        "text": "class ansys.health.heart.settings.settings.AtrialFiber\n\nBases: Settings\n\nClass for keeping track of atrial fiber settings.\n\nDefault parameters are from doi.org/10.1016/j.cma.2020.113468 for idealized geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#overview",
        "title": "AtrialFiber > Overview",
        "section": "Overview",
        "text": "tau_mv\ntau_lpv\ntau_rpv\ntau_tv\ntau_raw\ntau_ct_minus\ntau_ct_plus\ntau_icv\ntau_scv\ntau_ib\ntau_ras\nOverview\ntau_mv\ntau_lpv\ntau_rpv\ntau_tv\ntau_raw\ntau_ct_minus\ntau_ct_plus\ntau_icv\ntau_scv\ntau_ib\ntau_ras"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#import-detail",
        "title": "AtrialFiber > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#attribute-detail",
        "title": "AtrialFiber > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_mv",
        "title": "AtrialFiber > Attribute detail > tau_mv",
        "section": "Attribute detail > tau_mv",
        "text": "AtrialFiber.tau_mv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_lpv",
        "title": "AtrialFiber > Attribute detail > tau_lpv",
        "section": "Attribute detail > tau_lpv",
        "text": "AtrialFiber.tau_lpv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_rpv",
        "title": "AtrialFiber > Attribute detail > tau_rpv",
        "section": "Attribute detail > tau_rpv",
        "text": "AtrialFiber.tau_rpv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_tv",
        "title": "AtrialFiber > Attribute detail > tau_tv",
        "section": "Attribute detail > tau_tv",
        "text": "AtrialFiber.tau_tv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_raw",
        "title": "AtrialFiber > Attribute detail > tau_raw",
        "section": "Attribute detail > tau_raw",
        "text": "AtrialFiber.tau_raw: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_ct_minus",
        "title": "AtrialFiber > Attribute detail > tau_ct_minus",
        "section": "Attribute detail > tau_ct_minus",
        "text": "AtrialFiber.tau_ct_minus: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_ct_plus",
        "title": "AtrialFiber > Attribute detail > tau_ct_plus",
        "section": "Attribute detail > tau_ct_plus",
        "text": "AtrialFiber.tau_ct_plus: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_icv",
        "title": "AtrialFiber > Attribute detail > tau_icv",
        "section": "Attribute detail > tau_icv",
        "text": "AtrialFiber.tau_icv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_scv",
        "title": "AtrialFiber > Attribute detail > tau_scv",
        "section": "Attribute detail > tau_scv",
        "text": "AtrialFiber.tau_scv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_ib",
        "title": "AtrialFiber > Attribute detail > tau_ib",
        "section": "Attribute detail > tau_ib",
        "text": "AtrialFiber.tau_ib: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AtrialFiber",
        "href": "api/ansys/health/heart/settings/settings/AtrialFiber.html#AtrialFiber.tau_ras",
        "title": "AtrialFiber > Attribute detail > tau_ras",
        "section": "Attribute detail > tau_ras",
        "text": "AtrialFiber.tau_ras: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/SupportedFluentVersionNotFoundError",
        "href": "api/ansys/health/heart/exceptions/SupportedFluentVersionNotFoundError.html#supportedfluentversionnotfounderror",
        "title": "SupportedFluentVersionNotFoundError",
        "section": "SupportedFluentVersionNotFoundError",
        "text": "Bases: Exception\nException raised when no supported Fluent version is found.\nSupportedFluentVersionNotFoundError\nSupportedFluentVersionNotFoundError\nException"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/SupportedFluentVersionNotFoundError",
        "href": "api/ansys/health/heart/exceptions/SupportedFluentVersionNotFoundError.html#ansys.health.heart.exceptions.SupportedFluentVersionNotFoundError",
        "title": "SupportedFluentVersionNotFoundError > SupportedFluentVersionNotFoundError > SupportedFluentVersionNotFoundError",
        "section": "SupportedFluentVersionNotFoundError > SupportedFluentVersionNotFoundError",
        "text": "exception ansys.health.heart.exceptions.SupportedFluentVersionNotFoundError\n\nBases: Exception\n\nException raised when no supported Fluent version is found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/SupportedFluentVersionNotFoundError",
        "href": "api/ansys/health/heart/exceptions/SupportedFluentVersionNotFoundError.html#import-detail",
        "title": "SupportedFluentVersionNotFoundError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#aniso",
        "title": "ANISO",
        "section": "ANISO",
        "text": "Anisotropic module of MAT_295.\nANISO\nANISO"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ansys.health.heart.settings.material.material.ANISO",
        "title": "ANISO > ANISO > ANISO",
        "section": "ANISO > ANISO",
        "text": "class ansys.health.heart.settings.material.material.ANISO\n\nAnisotropic module of MAT_295.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#overview",
        "title": "ANISO > Overview",
        "section": "Overview",
        "text": "atype\nType of anisotropic model.\nfibers\nList of fibers.\nk1fs\nk1 for HGO model for coupling between fibers.\nk2fs\nk2 for HGO model for coupling between fibers.\nvec_a\nComponent of fiber direction, don’t change it.\nvec_d\nComponent of sheet direction, don’t change it.\n__post_init__\nCheck and deduce other parameters from input.\n__repr__\nMake sure print contains field in __post_init__.\nOverview\natype\nfibers\nk1fs\nk2fs\nvec_a\nvec_d\n__post_init__\n__repr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#import-detail",
        "title": "ANISO > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#attribute-detail",
        "title": "ANISO > Attribute detail",
        "section": "Attribute detail",
        "text": "Type of anisotropic model.\nList of fibers.\nk1 for HGO model for coupling between fibers.\nk2 for HGO model for coupling between fibers.\nComponent of fiber direction, don’t change it.\nComponent of sheet direction, don’t change it.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.atype",
        "title": "ANISO > Attribute detail > atype",
        "section": "Attribute detail > atype",
        "text": "ANISO.atype: int = -1\n\nType of anisotropic model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.fibers",
        "title": "ANISO > Attribute detail > fibers",
        "section": "Attribute detail > fibers",
        "text": "ANISO.fibers: List[ANISO.HGOFiber] = None\n\nList of fibers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.k1fs",
        "title": "ANISO > Attribute detail > k1fs",
        "section": "Attribute detail > k1fs",
        "text": "ANISO.k1fs: float | None = None\n\nk1 for HGO model for coupling between fibers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.k2fs",
        "title": "ANISO > Attribute detail > k2fs",
        "section": "Attribute detail > k2fs",
        "text": "ANISO.k2fs: float | None = None\n\nk2 for HGO model for coupling between fibers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.vec_a",
        "title": "ANISO > Attribute detail > vec_a",
        "section": "Attribute detail > vec_a",
        "text": "ANISO.vec_a: tuple = (1.0, 0.0, 0.0)\n\nComponent of fiber direction, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.vec_d",
        "title": "ANISO > Attribute detail > vec_d",
        "section": "Attribute detail > vec_d",
        "text": "ANISO.vec_d: tuple = (0.0, 1.0, 0.0)\n\nComponent of sheet direction, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#method-detail",
        "title": "ANISO > Method detail",
        "section": "Method detail",
        "text": "Check and deduce other parameters from input.\nMake sure print contains field in __post_init__.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.__post_init__",
        "title": "ANISO > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "ANISO.__post_init__()\n\nCheck and deduce other parameters from input.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#ANISO.__repr__",
        "title": "ANISO > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "ANISO.__repr__()\n\nMake sure print contains field in __post_init__.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ANISO",
        "href": "api/ansys/health/heart/settings/material/material/ANISO.html#classes",
        "title": "ANISO > Classes",
        "section": "Classes",
        "text": "HGOFiber\nDefine HGO type fiber from k1 and k2.\nClasses\nHGOFiber"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/ZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/ZeroPressure.html#zeropressure",
        "title": "ZeroPressure",
        "section": "ZeroPressure",
        "text": "Bases: Settings\nClass for keeping track of settings for stress-free-configuration computation.\nZeroPressure\nZeroPressure\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/ZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/ZeroPressure.html#ansys.health.heart.settings.settings.ZeroPressure",
        "title": "ZeroPressure > ZeroPressure > ZeroPressure",
        "section": "ZeroPressure > ZeroPressure",
        "text": "class ansys.health.heart.settings.settings.ZeroPressure\n\nBases: Settings\n\nClass for keeping track of settings for stress-free-configuration computation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/ZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/ZeroPressure.html#overview",
        "title": "ZeroPressure > Overview",
        "section": "Overview",
        "text": "analysis\nGeneric analysis settings.\nOverview\nanalysis"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/ZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/ZeroPressure.html#import-detail",
        "title": "ZeroPressure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/ZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/ZeroPressure.html#attribute-detail",
        "title": "ZeroPressure > Attribute detail",
        "section": "Attribute detail",
        "text": "Generic analysis settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/ZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/ZeroPressure.html#ZeroPressure.analysis",
        "title": "ZeroPressure > Attribute detail > analysis",
        "section": "Attribute detail > analysis",
        "text": "ZeroPressure.analysis: AnalysisZeroPressure\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user-guide",
        "href": "user-guide.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This section provides an overview of the capabilities of PyAnsys Heart, explaining key concepts of\nthe preprocessor, simulator, and postprocessor.\nLearn how to preprocess the input files for PyAnsys Heart.\nLearn how to simulate the heart model using PyAnsys Heart.\nLearn how to postprocess the simulation results using PyAnsys Heart.\nUser guide"
    },
    {
        "objectID": "api/ansys/health/heart/parts/index",
        "href": "api/ansys/health/heart/parts/index.html#the-partspy-module",
        "title": "The parts.py module",
        "section": "The parts.py module",
        "text": "The parts.py module\nparts.py"
    },
    {
        "objectID": "api/ansys/health/heart/parts/index",
        "href": "api/ansys/health/heart/parts/index.html#summary",
        "title": "The parts.py module > Summary",
        "section": "Summary",
        "text": "Part\nBase part class.\nSeptum\nSeptum part.\nChamber\nIntermediate class for heart chambers with endocardium and epicardium.\nVentricle\nVentricle part.\nAtrium\nAtrium part.\nArtery\nArtery part.\nMyocardium\nMyocardium part.\nSummary\nPart\nSeptum\nChamber\nVentricle\nAtrium\nArtery\nMyocardium"
    },
    {
        "objectID": "api/ansys/health/heart/parts/index",
        "href": "api/ansys/health/heart/parts/index.html#description",
        "title": "The parts.py module > Description",
        "section": "Description",
        "text": "Define classes for anatomical parts.\nEach class extends the base Part class and provides specialized attributes for different\nheart structures.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#biventricle",
        "title": "BiVentricle",
        "section": "BiVentricle",
        "text": "Bases: HeartModel\nModel of the left and right ventricles.\nBiVentricle\nBiVentricle\nHeartModel"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#ansys.health.heart.models.BiVentricle",
        "title": "BiVentricle > BiVentricle > BiVentricle",
        "section": "BiVentricle > BiVentricle",
        "text": "class ansys.health.heart.models.BiVentricle(working_directory: pathlib.Path | str = None)\n\nBases: HeartModel\n\nModel of the left and right ventricles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#overview",
        "title": "BiVentricle > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nright_ventricle\nRight ventricle part.\nseptum\nSeptum.\nOverview\nleft_ventricle\nright_ventricle\nseptum"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#import-detail",
        "title": "BiVentricle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#attribute-detail",
        "title": "BiVentricle > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nRight ventricle part.\nSeptum.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#BiVentricle.left_ventricle",
        "title": "BiVentricle > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "BiVentricle.left_ventricle: ansys.health.heart.parts.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#BiVentricle.right_ventricle",
        "title": "BiVentricle > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "BiVentricle.right_ventricle: ansys.health.heart.parts.Part\n\nRight ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/BiVentricle",
        "href": "api/ansys/health/heart/models/BiVentricle.html#BiVentricle.septum",
        "title": "BiVentricle > Attribute detail > septum",
        "section": "Attribute detail > septum",
        "text": "BiVentricle.septum: ansys.health.heart.parts.Part\n\nSeptum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#chamber",
        "title": "Chamber",
        "section": "Chamber",
        "text": "Bases: Part\nIntermediate class for heart chambers with endocardium and epicardium.\nChamber\nChamber\nPart"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#ansys.health.heart.parts.Chamber",
        "title": "Chamber > Chamber > Chamber",
        "section": "Chamber > Chamber",
        "text": "class ansys.health.heart.parts.Chamber(name: str = None, part_type: _PartType = None)\n\nBases: Part\n\nIntermediate class for heart chambers with endocardium and epicardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#overview",
        "title": "Chamber > Overview",
        "section": "Overview",
        "text": "endocardium\nEndocardial surface.\nepicardium\nEpicardial surface.\nseptum\nSeptal surface.\nmyocardium\nMyocardial part.\ncaps\nList of caps belonging to the part.\ncavity\nCavity belonging to the part.\nactive\nFlag indicating if active stress should be included.\nfiber\nFlag indicating if fiber/sheet data should be included.\nOverview\nendocardium\nepicardium\nseptum\nmyocardium\ncaps\ncavity\nactive\nfiber"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#import-detail",
        "title": "Chamber > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#attribute-detail",
        "title": "Chamber > Attribute detail",
        "section": "Attribute detail",
        "text": "Endocardial surface.\nEpicardial surface.\nSeptal surface.\nMyocardial part.\nList of caps belonging to the part.\nCavity belonging to the part.\nFlag indicating if active stress should be included.\nFlag indicating if fiber/sheet data should be included.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.endocardium",
        "title": "Chamber > Attribute detail > endocardium",
        "section": "Attribute detail > endocardium",
        "text": "Chamber.endocardium\n\nEndocardial surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.epicardium",
        "title": "Chamber > Attribute detail > epicardium",
        "section": "Attribute detail > epicardium",
        "text": "Chamber.epicardium\n\nEpicardial surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.septum",
        "title": "Chamber > Attribute detail > septum",
        "section": "Attribute detail > septum",
        "text": "Chamber.septum\n\nSeptal surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.myocardium",
        "title": "Chamber > Attribute detail > myocardium",
        "section": "Attribute detail > myocardium",
        "text": "Chamber.myocardium\n\nMyocardial part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.caps",
        "title": "Chamber > Attribute detail > caps",
        "section": "Attribute detail > caps",
        "text": "Chamber.caps: list[ansys.health.heart.objects.Cap] = []\n\nList of caps belonging to the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.cavity",
        "title": "Chamber > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Chamber.cavity: ansys.health.heart.objects.Cavity = None\n\nCavity belonging to the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.active",
        "title": "Chamber > Attribute detail > active",
        "section": "Attribute detail > active",
        "text": "Chamber.active: bool = True\n\nFlag indicating if active stress should be included.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Chamber",
        "href": "api/ansys/health/heart/parts/Chamber.html#Chamber.fiber",
        "title": "Chamber > Attribute detail > fiber",
        "section": "Attribute detail > fiber",
        "text": "Chamber.fiber: bool = True\n\nFlag indicating if fiber/sheet data should be included.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user-guide/postprocessor",
        "href": "user-guide/postprocessor.html#postprocessor",
        "title": "User guide > Postprocessor",
        "section": "Postprocessor",
        "text": "The postprocessor module provides methods to postprocess the results of a cardiac simulation. Use this module to extract and visualize results from simulation output files, such as LS-DYNA’s d3plot files and other relevant information.\nThis module includes two main classes:\nansys.health.heart.post.dpf_utils.D3plotReader: This class provides methods to read LS-DYNA d3plot files.\nansys.health.heart.post.dpf_utils.EPpostprocessor: This class provides methods to postprocess electrophysiology simulation results.\nThese classes build on PyDPF to make it easier to extract relevant simulation results. For example, you can use the ansys.health.heart.post.dpf_utils.EPpostprocessor class to extract the transmembrane potential and other quantities from simulation results.\nHere is an example of how to use these classes:\nPostprocessor\npostprocessor\nd3plot\nansys.health.heart.post.dpf_utils.D3plotReader\nd3plot\nansys.health.heart.post.dpf_utils.EPpostprocessor\nansys.health.heart.post.dpf_utils.EPpostprocessor"
    },
    {
        "objectID": "examples/preprocessor/preprocess-fullheart",
        "href": "examples/preprocessor/preprocess-fullheart.html#create-a-full-heart-model",
        "title": "Create a full-heart model",
        "section": "Create a full-heart model",
        "text": "This example shows how to process a case from Rodero et al. (2021) into\na simulation-ready heart model.\nCreate a full-heart model"
    },
    {
        "objectID": "examples/preprocessor/preprocess-fullheart",
        "href": "examples/preprocessor/preprocess-fullheart.html#perform-the-required-imports",
        "title": "Create a full-heart model > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory and generated model.\nYou can also manually download the CASE or VTK files from the Strocchi 2020\nand Rodero 2021 databases. For more information, see:\nA Publicly Available Virtual Cohort of Four-chamber Heart Meshes for\nCardiac Electro-mechanics Simulations\nVirtual cohort of adult healthy four-chamber heart meshes from CT images\nAlternatively, you can simply click one of the buttons at the bottom of this page\nto download a CASE file for the Rodero 2021 database in an IPYNB, PY, or ZIP format.\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/preprocess-fullheart",
        "href": "examples/preprocessor/preprocess-fullheart.html#convert-the-vtk-file-to-a-compatible-input-format",
        "title": "Create a full-heart model > Convert the VTK file to a compatible input format",
        "section": "Convert the VTK file to a compatible input format",
        "text": "Convert the VTK file to a compatible input format"
    },
    {
        "objectID": "examples/preprocessor/preprocess-fullheart",
        "href": "examples/preprocessor/preprocess-fullheart.html#create-a-heart-model",
        "title": "Create a full-heart model > Create a heart model",
        "section": "Create a heart model",
        "text": "Create a full-heart model.\nCreate a heart model"
    },
    {
        "objectID": "examples/preprocessor/preprocess-fullheart",
        "href": "examples/preprocessor/preprocess-fullheart.html#visualize-results",
        "title": "Create a full-heart model > Visualize results",
        "section": "Visualize results",
        "text": "Visualize and inspect the components of the model by accessing\nvarious properties or attributes and invoking methods.\nTotal running time of the script: (8 minutes 29.768 seconds)\nDownload Jupyter notebook: preprocess-fullheart.ipynb\nDownload Python source code: preprocess-fullheart.py\nDownload zipped: preprocess-fullheart.zip\nGallery generated by Sphinx-Gallery\nVisualize results\nDownload Jupyter notebook: preprocess-fullheart.ipynb\nDownload Python source code: preprocess-fullheart.py\nDownload zipped: preprocess-fullheart.zip"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#tentusscherendo",
        "title": "TentusscherEndo",
        "section": "TentusscherEndo",
        "text": "Bases: Tentusscher\nHold data for Tentusscher cell model in its endocardium version.\nTentusscherEndo\nTentusscherEndo\nTentusscher"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#ansys.health.heart.settings.material.ep_material.CellModel.TentusscherEndo",
        "title": "TentusscherEndo > TentusscherEndo > TentusscherEndo",
        "section": "TentusscherEndo > TentusscherEndo",
        "text": "class ansys.health.heart.settings.material.ep_material.CellModel.TentusscherEndo\n\nBases: Tentusscher\n\nHold data for Tentusscher cell model in its endocardium version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#overview",
        "title": "TentusscherEndo > Overview",
        "section": "Overview",
        "text": "gks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#import-detail",
        "title": "TentusscherEndo > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#attribute-detail",
        "title": "TentusscherEndo > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.gks",
        "title": "TentusscherEndo > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "TentusscherEndo.gks: float = 0.392\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.gto",
        "title": "TentusscherEndo > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "TentusscherEndo.gto: float = 0.073\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.v",
        "title": "TentusscherEndo > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "TentusscherEndo.v: float = -86.709\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.ki",
        "title": "TentusscherEndo > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "TentusscherEndo.ki: float = 138.4\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.nai",
        "title": "TentusscherEndo > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "TentusscherEndo.nai: float = 10.355\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.cai",
        "title": "TentusscherEndo > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "TentusscherEndo.cai: float = 0.00013\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.cass",
        "title": "TentusscherEndo > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "TentusscherEndo.cass: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.casr",
        "title": "TentusscherEndo > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "TentusscherEndo.casr: float = 3.715\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.rpri",
        "title": "TentusscherEndo > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "TentusscherEndo.rpri: float = 0.9068\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.xr1",
        "title": "TentusscherEndo > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "TentusscherEndo.xr1: float = 0.00448\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.xr2",
        "title": "TentusscherEndo > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "TentusscherEndo.xr2: float = 0.476\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.xs",
        "title": "TentusscherEndo > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "TentusscherEndo.xs: float = 0.0087\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.m",
        "title": "TentusscherEndo > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "TentusscherEndo.m: float = 0.00155\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.h",
        "title": "TentusscherEndo > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "TentusscherEndo.h: float = 0.7573\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.j",
        "title": "TentusscherEndo > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "TentusscherEndo.j: float = 0.7225\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.d",
        "title": "TentusscherEndo > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "TentusscherEndo.d: float = 3.164e-05\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.f",
        "title": "TentusscherEndo > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "TentusscherEndo.f: float = 0.8009\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.f2",
        "title": "TentusscherEndo > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "TentusscherEndo.f2: float = 0.9778\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.fcass",
        "title": "TentusscherEndo > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "TentusscherEndo.fcass: float = 0.9953\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.s",
        "title": "TentusscherEndo > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "TentusscherEndo.s: float = 0.3212\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.r",
        "title": "TentusscherEndo > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "TentusscherEndo.r: float = 2.235e-08\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#activecurve",
        "title": "ActiveCurve",
        "section": "ActiveCurve",
        "text": "Active stress or Ca2+ curve.\nActiveCurve\nActiveCurve"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ansys.health.heart.settings.material.curve.ActiveCurve",
        "title": "ActiveCurve > ActiveCurve > ActiveCurve",
        "section": "ActiveCurve > ActiveCurve",
        "text": "class ansys.health.heart.settings.material.curve.ActiveCurve(func: tuple[numpy.ndarray, numpy.ndarray], type: Literal['stress', 'ca2'] = 'ca2', threshold: float = 5e-07, n: int = 5)\n\nActive stress or Ca2+ curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#overview",
        "title": "ActiveCurve > Overview",
        "section": "Overview",
        "text": "plot_time_vs_ca2\nPlot Ca2+ with threshold.\nplot_time_vs_stress\nPlot stress.\ndyna_input\nReturn x,y input for k files.\ntype\nn_beat\nthreshold\ntime\nt_beat\nOverview\nplot_time_vs_ca2\nplot_time_vs_stress\ndyna_input\ntype\nn_beat\nthreshold\ntime\nt_beat"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#import-detail",
        "title": "ActiveCurve > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#property-detail",
        "title": "ActiveCurve > Property detail",
        "section": "Property detail",
        "text": "Return x,y input for k files.\nProperty detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.dyna_input",
        "title": "ActiveCurve > Property detail > dyna_input",
        "section": "Property detail > dyna_input",
        "text": "property ActiveCurve.dyna_input\n\nReturn x,y input for k files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#attribute-detail",
        "title": "ActiveCurve > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.type",
        "title": "ActiveCurve > Attribute detail > type",
        "section": "Attribute detail > type",
        "text": "ActiveCurve.type = 'ca2'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.n_beat",
        "title": "ActiveCurve > Attribute detail > n_beat",
        "section": "Attribute detail > n_beat",
        "text": "ActiveCurve.n_beat = 5\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.threshold",
        "title": "ActiveCurve > Attribute detail > threshold",
        "section": "Attribute detail > threshold",
        "text": "ActiveCurve.threshold = 5e-07\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.time",
        "title": "ActiveCurve > Attribute detail > time",
        "section": "Attribute detail > time",
        "text": "ActiveCurve.time\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.t_beat",
        "title": "ActiveCurve > Attribute detail > t_beat",
        "section": "Attribute detail > t_beat",
        "text": "ActiveCurve.t_beat\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#method-detail",
        "title": "ActiveCurve > Method detail",
        "section": "Method detail",
        "text": "Plot Ca2+ with threshold.\nPlot stress.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.plot_time_vs_ca2",
        "title": "ActiveCurve > Method detail > plot_time_vs_ca2",
        "section": "Method detail > plot_time_vs_ca2",
        "text": "ActiveCurve.plot_time_vs_ca2()\n\nPlot Ca2+ with threshold.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/ActiveCurve",
        "href": "api/ansys/health/heart/settings/material/curve/ActiveCurve.html#ActiveCurve.plot_time_vs_stress",
        "title": "ActiveCurve > Method detail > plot_time_vs_stress",
        "section": "Method detail > plot_time_vs_stress",
        "text": "ActiveCurve.plot_time_vs_stress()\n\nPlot stress.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#mat295",
        "title": "Mat295",
        "section": "Mat295",
        "text": "Bases: MechanicalMaterialModel\nHold data for MAT_ANISOTROPIC_HYPERELASTIC (MAT_295).\nMat295\nMat295\nMechanicalMaterialModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#ansys.health.heart.settings.material.material.Mat295",
        "title": "Mat295 > Mat295 > Mat295",
        "section": "Mat295 > Mat295",
        "text": "class ansys.health.heart.settings.material.material.Mat295\n\nBases: MechanicalMaterialModel\n\nHold data for MAT_ANISOTROPIC_HYPERELASTIC (MAT_295).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#overview",
        "title": "Mat295 > Overview",
        "section": "Overview",
        "text": "rho\nDensity of the material.\niso\nIsotropic module.\naopt\nMatrerial axe option, don’t change it.\naniso\nAnisotropic module.\nactive\nActive module.\nOverview\nrho\niso\naopt\naniso\nactive"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#import-detail",
        "title": "Mat295 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#attribute-detail",
        "title": "Mat295 > Attribute detail",
        "section": "Attribute detail",
        "text": "Density of the material.\nIsotropic module.\nMatrerial axe option, don’t change it.\nAnisotropic module.\nActive module.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#Mat295.rho",
        "title": "Mat295 > Attribute detail > rho",
        "section": "Attribute detail > rho",
        "text": "Mat295.rho: float\n\nDensity of the material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#Mat295.iso",
        "title": "Mat295 > Attribute detail > iso",
        "section": "Attribute detail > iso",
        "text": "Mat295.iso: ISO\n\nIsotropic module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#Mat295.aopt",
        "title": "Mat295 > Attribute detail > aopt",
        "section": "Attribute detail > aopt",
        "text": "Mat295.aopt: float = 2.0\n\nMatrerial axe option, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#Mat295.aniso",
        "title": "Mat295 > Attribute detail > aniso",
        "section": "Attribute detail > aniso",
        "text": "Mat295.aniso: ANISO | None = None\n\nAnisotropic module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/Mat295",
        "href": "api/ansys/health/heart/settings/material/material/Mat295.html#Mat295.active",
        "title": "Mat295 > Attribute detail > active",
        "section": "Attribute detail > active",
        "text": "Mat295.active: ACTIVE | None = None\n\nActive module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#boundaryconditions",
        "title": "BoundaryConditions",
        "section": "BoundaryConditions",
        "text": "Bases: Settings\nStores settings/parameters for boundary conditions.\nBoundaryConditions\nBoundaryConditions\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#ansys.health.heart.settings.settings.BoundaryConditions",
        "title": "BoundaryConditions > BoundaryConditions > BoundaryConditions",
        "section": "BoundaryConditions > BoundaryConditions",
        "text": "class ansys.health.heart.settings.settings.BoundaryConditions\n\nBases: Settings\n\nStores settings/parameters for boundary conditions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#overview",
        "title": "BoundaryConditions > Overview",
        "section": "Overview",
        "text": "robin\nParameters for pericardium spring/damper b.c.\nvalve\nParameters for valve spring b.c.\nend_diastolic_cavity_pressure\nEnd-diastolic pressure.\nOverview\nrobin\nvalve\nend_diastolic_cavity_pressure"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#import-detail",
        "title": "BoundaryConditions > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#attribute-detail",
        "title": "BoundaryConditions > Attribute detail",
        "section": "Attribute detail",
        "text": "Parameters for pericardium spring/damper b.c.\nParameters for valve spring b.c.\nEnd-diastolic pressure.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#BoundaryConditions.robin",
        "title": "BoundaryConditions > Attribute detail > robin",
        "section": "Attribute detail > robin",
        "text": "BoundaryConditions.robin: AttrDict = None\n\nParameters for pericardium spring/damper b.c.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#BoundaryConditions.valve",
        "title": "BoundaryConditions > Attribute detail > valve",
        "section": "Attribute detail > valve",
        "text": "BoundaryConditions.valve: AttrDict = None\n\nParameters for valve spring b.c.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/BoundaryConditions",
        "href": "api/ansys/health/heart/settings/settings/BoundaryConditions.html#BoundaryConditions.end_diastolic_cavity_pressure",
        "title": "BoundaryConditions > Attribute detail > end_diastolic_cavity_pressure",
        "section": "Attribute detail > end_diastolic_cavity_pressure",
        "text": "BoundaryConditions.end_diastolic_cavity_pressure: AttrDict = None\n\nEnd-diastolic pressure.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/preprocessor/sg_execution_times",
        "href": "examples/preprocessor/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "12:47.590 total execution time for 4 files from examplespreprocessor:\nExample\nTime\nMem (MB)\nsphx_glr_examples_preprocessor_preprocess-fullheart.py (preprocess-fullheart.py)\n08:29.768\n0.0\nsphx_glr_examples_preprocessor_compute-atrial-fibers_pr.py (compute-atrial-fibers_pr.py)\n03:59.172\n0.0\nsphx_glr_examples_preprocessor_download-case_pr.py (download-case_pr.py)\n00:11.127\n0.0\nsphx_glr_examples_preprocessor_demo-material_pr.py (demo-material_pr.py)\n00:07.523\n0.0\nComputation times\npreprocess-fullheart.py\ncompute-atrial-fibers_pr.py\ndownload-case_pr.py\ndemo-material_pr.py"
    },
    {
        "objectID": "examples/preprocessor/index",
        "href": "examples/preprocessor/index.html#preprocessor-examples",
        "title": "Preprocessor examples",
        "section": "Preprocessor examples",
        "text": "These examples show how to use the preprocessor module\nto generate different kinds of heart models, including a\nbiventricular, four-chamber heart model and a full-heart model.\nsphx_glr_examples_preprocessor_compute-atrial-fibers_pr.py\nsphx_glr_examples_preprocessor_demo-material_pr.py\nsphx_glr_examples_preprocessor_download-case_pr.py\nsphx_glr_examples_preprocessor_preprocess-fullheart.py\nPreprocessor examples\npreprocessor"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#active",
        "title": "ACTIVE",
        "section": "ACTIVE",
        "text": "Active module of MAT_295.\nACTIVE\nACTIVE"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ansys.health.heart.settings.material.material.ACTIVE",
        "title": "ACTIVE > ACTIVE > ACTIVE",
        "section": "ACTIVE > ACTIVE",
        "text": "class ansys.health.heart.settings.material.material.ACTIVE\n\nActive module of MAT_295.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#overview",
        "title": "ACTIVE > Overview",
        "section": "Overview",
        "text": "acid\nDo not define it, it will be assigned with an ID of Ca2+ curve\nactype\nType of active model, will be deduced in __post_init__.\nacthr\nCa2+ threshold for active stress, need to be defined for ep-coupled,\nacdir\nDirection of active stress, don’t change it.\nsf\nScaling factor on fiber direction.\nss\nScaling factor on sheet direction.\nsn\nScaling factor on normal direction.\nmodel\nActive model.\nca2_curve\nCa2+ curve for mechanical problem.\n__post_init__\nDeduce actype.\nOverview\nacid\nactype\nacthr\nacdir\nsf\nss\nsn\nmodel\nca2_curve\n__post_init__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#import-detail",
        "title": "ACTIVE > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#attribute-detail",
        "title": "ACTIVE > Attribute detail",
        "section": "Attribute detail",
        "text": "Do not define it, it will be assigned with an ID of Ca2+ curve\nfor mechanical problem or empty for ep-coupled problem.\nType of active model, will be deduced in __post_init__.\nCa2+ threshold for active stress, need to be defined for ep-coupled,\nfor mechanics it’s defined in ActiveCurve.\nDirection of active stress, don’t change it.\nScaling factor on fiber direction.\nScaling factor on sheet direction.\nScaling factor on normal direction.\nActive model.\nCa2+ curve for mechanical problem.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.acid",
        "title": "ACTIVE > Attribute detail > acid",
        "section": "Attribute detail > acid",
        "text": "ACTIVE.acid: int = None\n\nDo not define it, it will be assigned with an ID of Ca2+ curve\nfor mechanical problem or empty for ep-coupled problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.actype",
        "title": "ACTIVE > Attribute detail > actype",
        "section": "Attribute detail > actype",
        "text": "ACTIVE.actype: int = None\n\nType of active model, will be deduced in __post_init__.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.acthr",
        "title": "ACTIVE > Attribute detail > acthr",
        "section": "Attribute detail > acthr",
        "text": "ACTIVE.acthr: float = None\n\nCa2+ threshold for active stress, need to be defined for ep-coupled,\nfor mechanics it’s defined in ActiveCurve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.acdir",
        "title": "ACTIVE > Attribute detail > acdir",
        "section": "Attribute detail > acdir",
        "text": "ACTIVE.acdir: int = 1\n\nDirection of active stress, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.sf",
        "title": "ACTIVE > Attribute detail > sf",
        "section": "Attribute detail > sf",
        "text": "ACTIVE.sf: float = 1.0\n\nScaling factor on fiber direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.ss",
        "title": "ACTIVE > Attribute detail > ss",
        "section": "Attribute detail > ss",
        "text": "ACTIVE.ss: float = 0.0\n\nScaling factor on sheet direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.sn",
        "title": "ACTIVE > Attribute detail > sn",
        "section": "Attribute detail > sn",
        "text": "ACTIVE.sn: float = 0.0\n\nScaling factor on normal direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.model",
        "title": "ACTIVE > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "ACTIVE.model: ActiveModel\n\nActive model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.ca2_curve",
        "title": "ACTIVE > Attribute detail > ca2_curve",
        "section": "Attribute detail > ca2_curve",
        "text": "ACTIVE.ca2_curve: ansys.health.heart.settings.material.curve.ActiveCurve\n\nCa2+ curve for mechanical problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#method-detail",
        "title": "ACTIVE > Method detail",
        "section": "Method detail",
        "text": "Deduce actype.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ACTIVE",
        "href": "api/ansys/health/heart/settings/material/material/ACTIVE.html#ACTIVE.__post_init__",
        "title": "ACTIVE > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "ACTIVE.__post_init__()\n\nDeduce actype.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Ventricle",
        "href": "api/ansys/health/heart/parts/Ventricle.html#ventricle",
        "title": "Ventricle",
        "section": "Ventricle",
        "text": "Bases: Chamber\nVentricle part.\nVentricle\nVentricle\nChamber"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Ventricle",
        "href": "api/ansys/health/heart/parts/Ventricle.html#ansys.health.heart.parts.Ventricle",
        "title": "Ventricle > Ventricle > Ventricle",
        "section": "Ventricle > Ventricle",
        "text": "class ansys.health.heart.parts.Ventricle(name: str = None)\n\nBases: Chamber\n\nVentricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Ventricle",
        "href": "api/ansys/health/heart/parts/Ventricle.html#overview",
        "title": "Ventricle > Overview",
        "section": "Overview",
        "text": "apex_points\nList of apex points.\nOverview\napex_points"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Ventricle",
        "href": "api/ansys/health/heart/parts/Ventricle.html#import-detail",
        "title": "Ventricle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Ventricle",
        "href": "api/ansys/health/heart/parts/Ventricle.html#attribute-detail",
        "title": "Ventricle > Attribute detail",
        "section": "Attribute detail",
        "text": "List of apex points.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Ventricle",
        "href": "api/ansys/health/heart/parts/Ventricle.html#Ventricle.apex_points",
        "title": "Ventricle > Attribute detail > apex_points",
        "section": "Attribute detail > apex_points",
        "text": "Ventricle.apex_points: list[ansys.health.heart.objects.Point] = []\n\nList of apex points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#activebeam",
        "title": "ActiveBeam",
        "section": "ActiveBeam",
        "text": "Bases: Active\nHold data for beam active EP material.\nActiveBeam\nActiveBeam\nActive"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#ansys.health.heart.settings.material.ep_material.EPMaterial.ActiveBeam",
        "title": "ActiveBeam > ActiveBeam > ActiveBeam",
        "section": "ActiveBeam > ActiveBeam",
        "text": "class ansys.health.heart.settings.material.ep_material.EPMaterial.ActiveBeam\n\nBases: Active\n\nHold data for beam active EP material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#overview",
        "title": "ActiveBeam > Overview",
        "section": "Overview",
        "text": "sigma_fiber\ncell_model\npmjres\nOverview\nsigma_fiber\ncell_model\npmjres"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#import-detail",
        "title": "ActiveBeam > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#attribute-detail",
        "title": "ActiveBeam > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#ActiveBeam.sigma_fiber",
        "title": "ActiveBeam > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "ActiveBeam.sigma_fiber\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#ActiveBeam.cell_model",
        "title": "ActiveBeam > Attribute detail > cell_model",
        "section": "Attribute detail > cell_model",
        "text": "ActiveBeam.cell_model\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.ActiveBeam.html#ActiveBeam.pmjres",
        "title": "ActiveBeam > Attribute detail > pmjres",
        "section": "Attribute detail > pmjres",
        "text": "ActiveBeam.pmjres: float\n\n"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#run-a-full-heart-ep-mechanics-simulation",
        "title": "Run a full-heart EP mechanics simulation",
        "section": "Run a full-heart EP mechanics simulation",
        "text": "This example shows how to consume a full-heart model and\nset it up for a coupled electromechanical simulation.\nWhen using a standalone version of the DPF Server, you must accept the license terms. To\naccept these terms, you can set this environment variable:\nRun a full-heart EP mechanics simulation"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#perform-the-required-imports",
        "title": "Run a full-heart EP mechanics simulation > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules.\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#set-the-required-paths",
        "title": "Run a full-heart EP mechanics simulation > Set the required paths",
        "section": "Set the required paths",
        "text": "Set the working directory and path to the model.\nSet the required paths"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#load-the-full-heart-model",
        "title": "Run a full-heart EP mechanics simulation > Load the full-heart model",
        "section": "Load the full-heart model",
        "text": "Load the full-heart model"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#instantiate-the-simulator",
        "title": "Run a full-heart EP mechanics simulation > Instantiate the simulator",
        "section": "Instantiate the simulator",
        "text": "Instantiate the simulator"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#compute-the-fiber-orientation",
        "title": "Run a full-heart EP mechanics simulation > Compute the fiber orientation",
        "section": "Compute the fiber orientation",
        "text": "Compute the fiber orientation"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#set-up-the-simulation-for-the-mechanical-simulations",
        "title": "Run a full-heart EP mechanics simulation > Set up the simulation for the mechanical simulations",
        "section": "Set up the simulation for the mechanical simulations",
        "text": "Computing the stress-free configuration is required since the geometry is imaged\nat end-of-diastole. The compute_stress_free_configuration() method runs a\nsequence of static simulations to estimate the stress-free state of the model and\nthe initial stresses present. This step is computationally expensive and can take\nrelatively long. You can consider reusing earlier runs by setting the overwrite\nflag to False. This reuses the results of the previous run.\nSet up the simulation for the mechanical simulations\ncompute_stress_free_configuration()\noverwrite\nFalse"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#compute-a-conduction-system",
        "title": "Run a full-heart EP mechanics simulation > Compute a conduction system",
        "section": "Compute a conduction system",
        "text": "Compute a conduction system"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#start-the-main-simulation",
        "title": "Run a full-heart EP mechanics simulation > Start the main simulation",
        "section": "Start the main simulation",
        "text": "Set the simulation end time and frequency of output files.\nA constant pressure is prescribed to the atria.\nNo circulation system is coupled with the atria.\nThe ReactionEikonal solver is suitable for coarse meshes and is\nincluded here for demonstration purposes. However, it currently supports\nonly a single cardiac cycle. To simulate multiple cardiac cycles, use the\nMonodomain solver, which requires a fine mesh and small time step size.\nStart the main simulation\nReactionEikonal\nMonodomain"
    },
    {
        "objectID": "examples/simulator/ep-mechanics-simulator-fullheart",
        "href": "examples/simulator/ep-mechanics-simulator-fullheart.html#visualize-and-animate-results-ls-prepost",
        "title": "Run a full-heart EP mechanics simulation > Visualize and animate results LS-PrePost",
        "section": "Visualize and animate results LS-PrePost",
        "text": "Total running time of the script: (60 minutes 4.222 seconds)\nDownload Jupyter notebook: ep-mechanics-simulator-fullheart.ipynb\nDownload Python source code: ep-mechanics-simulator-fullheart.py\nDownload zipped: ep-mechanics-simulator-fullheart.zip\nGallery generated by Sphinx-Gallery\nVisualize and animate results LS-PrePost\nDownload Jupyter notebook: ep-mechanics-simulator-fullheart.ipynb\nDownload Python source code: ep-mechanics-simulator-fullheart.py\nDownload zipped: ep-mechanics-simulator-fullheart.zip"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#epmaterial",
        "title": "EpMaterial",
        "section": "EpMaterial",
        "text": "Bases: Settings\nClass for storing EP material settings.\nEpMaterial\nEpMaterial\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#ansys.health.heart.settings.settings.EpMaterial",
        "title": "EpMaterial > EpMaterial > EpMaterial",
        "section": "EpMaterial > EpMaterial",
        "text": "class ansys.health.heart.settings.settings.EpMaterial\n\nBases: Settings\n\nClass for storing EP material settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#overview",
        "title": "EpMaterial > Overview",
        "section": "Overview",
        "text": "myocardium\nMyocardium material.\natrium\nAtrial material.\ncap\nCap material.\nbeam\nBeam material.\nOverview\nmyocardium\natrium\ncap\nbeam"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#import-detail",
        "title": "EpMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#attribute-detail",
        "title": "EpMaterial > Attribute detail",
        "section": "Attribute detail",
        "text": "Myocardium material.\nAtrial material.\nCap material.\nBeam material.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#EpMaterial.myocardium",
        "title": "EpMaterial > Attribute detail > myocardium",
        "section": "Attribute detail > myocardium",
        "text": "EpMaterial.myocardium: AttrDict = None\n\nMyocardium material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#EpMaterial.atrium",
        "title": "EpMaterial > Attribute detail > atrium",
        "section": "Attribute detail > atrium",
        "text": "EpMaterial.atrium: AttrDict = None\n\nAtrial material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#EpMaterial.cap",
        "title": "EpMaterial > Attribute detail > cap",
        "section": "Attribute detail > cap",
        "text": "EpMaterial.cap: AttrDict = None\n\nCap material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EpMaterial",
        "href": "api/ansys/health/heart/settings/settings/EpMaterial.html#EpMaterial.beam",
        "title": "EpMaterial > Attribute detail > beam",
        "section": "Attribute detail > beam",
        "text": "EpMaterial.beam: AttrDict = None\n\nBeam material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#contribute-as-a-documentarian",
        "title": "Contribute as a documentarian",
        "section": "Contribute as a documentarian",
        "text": "Learn how to get started, use, and contribute to the project.\nWrite a new example to showcase the capabilities of PyAnsys Heart.\nBuild the documentation to see your changes rendered.\nContribute as a documentarian"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#write-documentation",
        "title": "Contribute as a documentarian > Write documentation",
        "section": "Write documentation",
        "text": "Sphinx is the tool used to generate PyAnsys Heart documentation. You write most of the content\nin ReStructuredText files. However, some of the content, like the\nexamples, use a mix of ReStructuredText and Python files, thanks to Sphinx-Gallery.\nIf you are interested in writing examples, see the write-examples.\nThe documentation is located in the doc/source directory. The landing page\nis declared in the doc/source/index.rst file. The subdirectories contain\nthe pages of different sections of the documentation. Finally, the\ndoc/source/_static/ directory contains various assets like images and CSS\nfiles.\nThe layout of the doc/source directory is reflected in the URLs of the\nonline documentation. For example, the\ndoc/source/contribute/documentarian.rst file renders as the\nhttps://heart.health.docs.pyansys.com/version/stable/contribute/documentarian.html URL.\nThus, if you create a file, it is important to follow these rules:\nUse lowercase letters for file and directory names.\nUse short and descriptive names.\nUse hyphens to separate words.\nLogically organize the hierarchy of the files and directories\nYou must include all files in the table of contents. Sphinx does not permit any orphan files.\nIf you do not include a file in the table of contents, Sphinx raises a warning that causes\nthe build to fail.\nYou declare the table of contents using a directive like this:\nThe path to the file is relative to the directory where the table of contents\nis declared.\nWrite documentation\ndoc/source\ndoc/source/index.rst\ndoc/source/_static/\ndoc/source\ndoc/source/contribute/documentarian.rst\nhttps://heart.health.docs.pyansys.com/version/stable/contribute/documentarian.html"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#write-a-new-example",
        "title": "Contribute as a documentarian > Write a new example",
        "section": "Write a new example",
        "text": "The examples section of the documentation showcases different\ncapabilities of PyAnsys Heart. Each example is a standalone Python script. You group\nrelated examples into subdirectories. Despite being PY files, they are written in a mix\nof ReStructuredText and Python. This is possible thanks to the Sphinx-Gallery\nextension.\nDocumentarians writing new examples are encouraged to familiarize themselves with\nStructuring Python scripts for Sphinx-Gallery.\nOnce the PY file for a new example is properly set up, Sphinx-Gallery automatically\ngenerates Sphinx ReStructuredText  (RST) files from it. The rendering of the resulting\nRST file for each example provides links for downloading a IPYNB (Jupyter notebook) and PY file.\nFinally, here are some tips for writing examples:\nStart the example with an explanation of the main topic. Try to use as many relevant\nkeywords as possible in this section for search engine optimization.\nInclude an explanation with each code cell. The explanations should\nbe included before, not after, the corresponding code.\nThe examples are built with the documentation. During the build process,\nscreenshots are inserted in the rendered document. You do not need\nto include the screenshots yourself.\nWhen creating a child directory that is to include multiple related examples, ensure that\nyou include a README.txt file  with the ReStructuredText content to\nuse for the index page for this subsection’s examples in the generated documentation.\nWrite a new example\nREADME.txt"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#build-the-documentation",
        "title": "Contribute as a documentarian > Build the documentation",
        "section": "Build the documentation",
        "text": "Tox is used for automating the build of the documentation.\nTo install Tox:\nThere are different environments for cleaning the build, building the documentation\nin different formats such as HTML and PDF, and running the tests.\nThe following environments are available:\nEnvironment\nDescription\nCommand\ndoc-links\nEnvironment for verifying the integrity of external links within the documentation\npython -m tox -e doc-links\ndoc-html\nEnvironment for generating HTML documentation\npython -m tox -e doc-html\ndoc-pdf\nEnvironment for generating PDF documentation\npython -m tox -e doc-pdf\ndoc-clean\nEnvironment for cleaning documentation generated files\npython -m tox -e doc-clean\nBuild the documentation"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#edpvr",
        "title": "EDPVR",
        "section": "EDPVR",
        "text": "End diastolic pressure-volume relation.\nRef: Klotz, et al. Nature protocols 2.9 (2007): 2152-2158.\nEDPVR\nEDPVR"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#ansys.health.heart.post.klotz_curve.EDPVR",
        "title": "EDPVR > EDPVR > EDPVR",
        "section": "EDPVR > EDPVR",
        "text": "class ansys.health.heart.post.klotz_curve.EDPVR(vm: float, pm: float)\n\nEnd diastolic pressure-volume relation.\n\nNotes\n\nRef: Klotz, et al. Nature protocols 2.9 (2007): 2152-2158.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#overview",
        "title": "EDPVR > Overview",
        "section": "Overview",
        "text": "get_pressure\nCompute pressure from volume.\nget_volume\nCompute volume from pressure.\nplot_EDPVR\nPlot Llotz curve  with simulation data if it exists.\nAn\nBn\nvm\npm\nv0\nv30\nOverview\nget_pressure\nget_volume\nplot_EDPVR\nAn\nBn\nvm\npm\nv0\nv30"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#import-detail",
        "title": "EDPVR > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#attribute-detail",
        "title": "EDPVR > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.An",
        "title": "EDPVR > Attribute detail > An",
        "section": "Attribute detail > An",
        "text": "EDPVR.An = 27.78\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.Bn",
        "title": "EDPVR > Attribute detail > Bn",
        "section": "Attribute detail > Bn",
        "text": "EDPVR.Bn = 2.76\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.vm",
        "title": "EDPVR > Attribute detail > vm",
        "section": "Attribute detail > vm",
        "text": "EDPVR.vm\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.pm",
        "title": "EDPVR > Attribute detail > pm",
        "section": "Attribute detail > pm",
        "text": "EDPVR.pm\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.v0",
        "title": "EDPVR > Attribute detail > v0",
        "section": "Attribute detail > v0",
        "text": "EDPVR.v0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.v30",
        "title": "EDPVR > Attribute detail > v30",
        "section": "Attribute detail > v30",
        "text": "EDPVR.v30\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#method-detail",
        "title": "EDPVR > Method detail",
        "section": "Method detail",
        "text": "Compute pressure from volume.\nVolume in mL.\nPressure in mmHg.\nCompute volume from pressure.\nPressure in mmHg.\nVolume in mL.\nPlot Llotz curve  with simulation data if it exists.\n[volume, pressure] from simulation.\nFigure.\nMethod detail\npython:float\nnp.ndarray\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:list\npython:None\n[volume, pressure]\nmatplotlib.figure.Figure"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.get_pressure",
        "title": "EDPVR > Method detail > get_pressure",
        "section": "Method detail > get_pressure",
        "text": "EDPVR.get_pressure(volume: float | numpy.ndarray) -> float | numpy.ndarray\n\nCompute pressure from volume.\n\nParameters\n\nvolume\n\npython:float | np.ndarray\n\nVolume in mL.\n\nReturns\n\nfloat| np.ndarray\n\nPressure in mmHg.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.get_volume",
        "title": "EDPVR > Method detail > get_volume",
        "section": "Method detail > get_volume",
        "text": "EDPVR.get_volume(pressure: numpy.ndarray) -> numpy.ndarray\n\nCompute volume from pressure.\n\nParameters\n\npressure\n\nnp.ndarray\n\nPressure in mmHg.\n\nReturns\n\nnp.ndarray\n\nVolume in mL.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/EDPVR",
        "href": "api/ansys/health/heart/post/klotz_curve/EDPVR.html#EDPVR.plot_EDPVR",
        "title": "EDPVR > Method detail > plot_EDPVR",
        "section": "Method detail > plot_EDPVR",
        "text": "EDPVR.plot_EDPVR(simulation_data: list = None) -> matplotlib.figure.Figure\n\nPlot Llotz curve  with simulation data if it exists.\n\nParameters\n\nsimulation_data\n\npython:list, default: python:None\n\n[volume, pressure] from simulation.\n\nReturns\n\nmatplotlib.figure.Figure\n\nFigure.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPMechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/EPMechanicsSimulator.html#epmechanicssimulator",
        "title": "EPMechanicsSimulator",
        "section": "EPMechanicsSimulator",
        "text": "Bases: EPSimulator, MechanicsSimulator\nCoupled EP-mechanics simulator with computed electrophysiology.\nEPMechanicsSimulator\nEPMechanicsSimulator\nEPSimulator\nMechanicsSimulator"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPMechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/EPMechanicsSimulator.html#ansys.health.heart.simulator.EPMechanicsSimulator",
        "title": "EPMechanicsSimulator > EPMechanicsSimulator > EPMechanicsSimulator",
        "section": "EPMechanicsSimulator > EPMechanicsSimulator",
        "text": "class ansys.health.heart.simulator.EPMechanicsSimulator(model: ansys.health.heart.models.HeartModel, dyna_settings: ansys.health.heart.settings.settings.DynaSettings, simulation_directory: pathlib = '')\n\nBases: EPSimulator, MechanicsSimulator\n\nCoupled EP-mechanics simulator with computed electrophysiology.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPMechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/EPMechanicsSimulator.html#overview",
        "title": "EPMechanicsSimulator > Overview",
        "section": "Overview",
        "text": "simulate\nLaunch the main electro-mechanical simulation.\nOverview\nsimulate"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPMechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/EPMechanicsSimulator.html#import-detail",
        "title": "EPMechanicsSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPMechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/EPMechanicsSimulator.html#method-detail",
        "title": "EPMechanicsSimulator > Method detail",
        "section": "Method detail",
        "text": "Launch the main electro-mechanical simulation.\nSimulation folder name.\nFolder containing stress-free simulation.\nIf None, the zeropressure folder under the root directory is used.\nWhether to run postprocessing scripts.\nUser-defined k files.\nMethod detail\npython:str\n'main-mechanics'\npython:str\npython:None\npython:None\nNone\nzeropressure\npython:True\npython:list\npython:str\npython:None"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPMechanicsSimulator",
        "href": "api/ansys/health/heart/simulator/EPMechanicsSimulator.html#EPMechanicsSimulator.simulate",
        "title": "EPMechanicsSimulator > Method detail > simulate",
        "section": "Method detail > simulate",
        "text": "EPMechanicsSimulator.simulate(folder_name: str = 'ep_meca', zerop_folder: str | None = None, auto_post: bool = True, extra_k_files: list[str] | None = None)\n\nLaunch the main electro-mechanical simulation.\n\nParameters\n\nfolder_name\n\npython:str, default: 'main-mechanics'\n\nSimulation folder name.\n\nzerop_folder\n\npython:str | python:None, default: python:None\n\nFolder containing stress-free simulation.\nIf None, the zeropressure folder under the root directory is used.\n\nauto_post\n\nbool, default: python:True\n\nWhether to run postprocessing scripts.\n\nextra_k_files\n\npython:list[python:str], default: python:None\n\nUser-defined k files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/index",
        "href": "api/ansys/health/heart/pre/index.html#the-pre-package",
        "title": "The pre package",
        "section": "The pre package",
        "text": "The pre package\npre"
    },
    {
        "objectID": "api/ansys/health/heart/pre/index",
        "href": "api/ansys/health/heart/pre/index.html#summary",
        "title": "The pre package > Summary",
        "section": "Summary",
        "text": "conduction_path\nConduction system class.\ndatabase_utils\nSome helper methods to process cases from Strocchi and Rodero databases.\ninput\nModule to manage input.\nmesher\nModule containing methods for interaction with Fluent meshing.\nSummary\nconduction_path\ndatabase_utils\ninput\nmesher"
    },
    {
        "objectID": "api/ansys/health/heart/pre/index",
        "href": "api/ansys/health/heart/pre/index.html#description",
        "title": "The pre package > Description",
        "section": "Description",
        "text": "Preprocessing subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#captype",
        "title": "CapType",
        "section": "CapType",
        "text": "Bases: enum.Enum\nEnumeration tracking cap names.\nCapType\nCapType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#ansys.health.heart.objects.CapType",
        "title": "CapType > CapType > CapType",
        "section": "CapType > CapType",
        "text": "class ansys.health.heart.objects.CapType(*args, **kwds)\n\nBases: enum.Enum\n\nEnumeration tracking cap names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#overview",
        "title": "CapType > Overview",
        "section": "Overview",
        "text": "MITRAL_VALVE\nCap representing mitral valve region.\nAORTIC_VALVE\nCap representing aortic valve region.\nMITRAL_VALVE_ATRIUM\nCap representing mitral valve region on the atrial side.\nCOMBINED_MITRAL_AORTIC_VALVE\nCombined mitral aortic valve. Valid for truncated models.\nPULMONARY_VALVE\nCap representing pulmonary valve region.\nTRICUSPID_VALVE\nCap representing tricuspid valve region.\nTRICUSPID_VALVE_ATRIUM\nCap representing tricuspid valve region on the atrial side.\nLEFT_ATRIUM_APPENDAGE\nCap representing left atrium appendage region.\nLEFT_SUPERIOR_PULMONARY_VEIN\nCap representing left superior pulmonary vein region.\nLEFT_INFERIOR_PULMONARY_VEIN\nCap representing left inferior pulmonary vein region.\nRIGHT_INFERIOR_PULMONARY_VEIN\nCap representing right inferior pulmonary vein region.\nRIGHT_SUPERIOR_PULMONARY_VEIN\nCap representing right superior pulmonary vein region.\nSUPERIOR_VENA_CAVA\nCap representing superior vena cava region.\nINFERIOR_VENA_CAVA\nCap representing inferior vena cava region.\nUNKNOWN\nCap with unknown association.\nOverview\nMITRAL_VALVE\nAORTIC_VALVE\nMITRAL_VALVE_ATRIUM\nCOMBINED_MITRAL_AORTIC_VALVE\nPULMONARY_VALVE\nTRICUSPID_VALVE\nTRICUSPID_VALVE_ATRIUM\nLEFT_ATRIUM_APPENDAGE\nLEFT_SUPERIOR_PULMONARY_VEIN\nLEFT_INFERIOR_PULMONARY_VEIN\nRIGHT_INFERIOR_PULMONARY_VEIN\nRIGHT_SUPERIOR_PULMONARY_VEIN\nSUPERIOR_VENA_CAVA\nINFERIOR_VENA_CAVA\nUNKNOWN"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#import-detail",
        "title": "CapType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#attribute-detail",
        "title": "CapType > Attribute detail",
        "section": "Attribute detail",
        "text": "Cap representing mitral valve region.\nCap representing aortic valve region.\nCap representing mitral valve region on the atrial side.\nCombined mitral aortic valve. Valid for truncated models.\nCap representing pulmonary valve region.\nCap representing tricuspid valve region.\nCap representing tricuspid valve region on the atrial side.\nCap representing left atrium appendage region.\nCap representing left superior pulmonary vein region.\nCap representing left inferior pulmonary vein region.\nCap representing right inferior pulmonary vein region.\nCap representing right superior pulmonary vein region.\nCap representing superior vena cava region.\nCap representing inferior vena cava region.\nCap with unknown association.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.MITRAL_VALVE",
        "title": "CapType > Attribute detail > MITRAL_VALVE",
        "section": "Attribute detail > MITRAL_VALVE",
        "text": "CapType.MITRAL_VALVE = 'mitral-valve'\n\nCap representing mitral valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.AORTIC_VALVE",
        "title": "CapType > Attribute detail > AORTIC_VALVE",
        "section": "Attribute detail > AORTIC_VALVE",
        "text": "CapType.AORTIC_VALVE = 'aortic-valve'\n\nCap representing aortic valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.MITRAL_VALVE_ATRIUM",
        "title": "CapType > Attribute detail > MITRAL_VALVE_ATRIUM",
        "section": "Attribute detail > MITRAL_VALVE_ATRIUM",
        "text": "CapType.MITRAL_VALVE_ATRIUM = 'mitral-valve-atrium'\n\nCap representing mitral valve region on the atrial side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.COMBINED_MITRAL_AORTIC_VALVE",
        "title": "CapType > Attribute detail > COMBINED_MITRAL_AORTIC_VALVE",
        "section": "Attribute detail > COMBINED_MITRAL_AORTIC_VALVE",
        "text": "CapType.COMBINED_MITRAL_AORTIC_VALVE = 'combined-mitral-aortic-valve'\n\nCombined mitral aortic valve. Valid for truncated models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.PULMONARY_VALVE",
        "title": "CapType > Attribute detail > PULMONARY_VALVE",
        "section": "Attribute detail > PULMONARY_VALVE",
        "text": "CapType.PULMONARY_VALVE = 'pulmonary-valve'\n\nCap representing pulmonary valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.TRICUSPID_VALVE",
        "title": "CapType > Attribute detail > TRICUSPID_VALVE",
        "section": "Attribute detail > TRICUSPID_VALVE",
        "text": "CapType.TRICUSPID_VALVE = 'tricuspid-valve'\n\nCap representing tricuspid valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.TRICUSPID_VALVE_ATRIUM",
        "title": "CapType > Attribute detail > TRICUSPID_VALVE_ATRIUM",
        "section": "Attribute detail > TRICUSPID_VALVE_ATRIUM",
        "text": "CapType.TRICUSPID_VALVE_ATRIUM = 'tricuspid-valve-atrium'\n\nCap representing tricuspid valve region on the atrial side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.LEFT_ATRIUM_APPENDAGE",
        "title": "CapType > Attribute detail > LEFT_ATRIUM_APPENDAGE",
        "section": "Attribute detail > LEFT_ATRIUM_APPENDAGE",
        "text": "CapType.LEFT_ATRIUM_APPENDAGE = 'left-atrium-appendage'\n\nCap representing left atrium appendage region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.LEFT_SUPERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > LEFT_SUPERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > LEFT_SUPERIOR_PULMONARY_VEIN",
        "text": "CapType.LEFT_SUPERIOR_PULMONARY_VEIN = 'left-superior-pulmonary-vein'\n\nCap representing left superior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.LEFT_INFERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > LEFT_INFERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > LEFT_INFERIOR_PULMONARY_VEIN",
        "text": "CapType.LEFT_INFERIOR_PULMONARY_VEIN = 'left-inferior-pulmonary-vein'\n\nCap representing left inferior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.RIGHT_INFERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > RIGHT_INFERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > RIGHT_INFERIOR_PULMONARY_VEIN",
        "text": "CapType.RIGHT_INFERIOR_PULMONARY_VEIN = 'right-inferior-pulmonary-vein'\n\nCap representing right inferior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.RIGHT_SUPERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > RIGHT_SUPERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > RIGHT_SUPERIOR_PULMONARY_VEIN",
        "text": "CapType.RIGHT_SUPERIOR_PULMONARY_VEIN = 'right-superior-pulmonary-vein'\n\nCap representing right superior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.SUPERIOR_VENA_CAVA",
        "title": "CapType > Attribute detail > SUPERIOR_VENA_CAVA",
        "section": "Attribute detail > SUPERIOR_VENA_CAVA",
        "text": "CapType.SUPERIOR_VENA_CAVA = 'superior-vena-cava'\n\nCap representing superior vena cava region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.INFERIOR_VENA_CAVA",
        "title": "CapType > Attribute detail > INFERIOR_VENA_CAVA",
        "section": "Attribute detail > INFERIOR_VENA_CAVA",
        "text": "CapType.INFERIOR_VENA_CAVA = 'inferior-vena-cava'\n\nCap representing inferior vena cava region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/CapType",
        "href": "api/ansys/health/heart/objects/CapType.html#CapType.UNKNOWN",
        "title": "CapType > Attribute detail > UNKNOWN",
        "section": "Attribute detail > UNKNOWN",
        "text": "CapType.UNKNOWN = 'unknown-cap'\n\nCap with unknown association.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/SupportedDPFServerNotFoundError",
        "href": "api/ansys/health/heart/exceptions/SupportedDPFServerNotFoundError.html#supporteddpfservernotfounderror",
        "title": "SupportedDPFServerNotFoundError",
        "section": "SupportedDPFServerNotFoundError",
        "text": "Bases: Exception\nException raised when no supported DPF server is found.\nSupportedDPFServerNotFoundError\nSupportedDPFServerNotFoundError\nException"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/SupportedDPFServerNotFoundError",
        "href": "api/ansys/health/heart/exceptions/SupportedDPFServerNotFoundError.html#ansys.health.heart.exceptions.SupportedDPFServerNotFoundError",
        "title": "SupportedDPFServerNotFoundError > SupportedDPFServerNotFoundError > SupportedDPFServerNotFoundError",
        "section": "SupportedDPFServerNotFoundError > SupportedDPFServerNotFoundError",
        "text": "exception ansys.health.heart.exceptions.SupportedDPFServerNotFoundError\n\nBases: Exception\n\nException raised when no supported DPF server is found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/SupportedDPFServerNotFoundError",
        "href": "api/ansys/health/heart/exceptions/SupportedDPFServerNotFoundError.html#import-detail",
        "title": "SupportedDPFServerNotFoundError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Part",
        "href": "api/ansys/health/heart/objects/Part.html#part",
        "title": "Part",
        "section": "Part",
        "text": "Part class for backward compatibility.\nPart\nPart"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Part",
        "href": "api/ansys/health/heart/objects/Part.html#ansys.health.heart.objects.Part",
        "title": "Part > Part > Part",
        "section": "Part > Part",
        "text": "class ansys.health.heart.objects.Part(*args, **kwargs)\n\nPart class for backward compatibility.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Part",
        "href": "api/ansys/health/heart/objects/Part.html#overview",
        "title": "Part > Overview",
        "section": "Overview",
        "text": "__class__\nOverview\n__class__"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Part",
        "href": "api/ansys/health/heart/objects/Part.html#import-detail",
        "title": "Part > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Part",
        "href": "api/ansys/health/heart/objects/Part.html#attribute-detail",
        "title": "Part > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Part",
        "href": "api/ansys/health/heart/objects/Part.html#Part.__class__",
        "title": "Part > Attribute detail > __class__",
        "section": "Attribute detail > __class__",
        "text": "Part.__class__\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#cap",
        "title": "Cap",
        "section": "Cap",
        "text": "Bases: Feature\nCap class.\nCap\nCap\nFeature"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#ansys.health.heart.objects.Cap",
        "title": "Cap > Cap > Cap",
        "section": "Cap > Cap",
        "text": "class ansys.health.heart.objects.Cap(name: str = None, cap_type: CapType = None)\n\nBases: Feature\n\nCap class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#overview",
        "title": "Cap > Overview",
        "section": "Overview",
        "text": "global_node_ids_edge\nGlobal node IDs of the edge of the cap.\nglobal_centroid_id\nGlobal centroid ID.\ncentroid\nCentroid of the cap.\ncap_normal\nCompute mean normal of the cap.\nOverview\nglobal_node_ids_edge\nglobal_centroid_id\ncentroid\ncap_normal"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#import-detail",
        "title": "Cap > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#property-detail",
        "title": "Cap > Property detail",
        "section": "Property detail",
        "text": "Global node IDs of the edge of the cap.\nGlobal centroid ID.\nCentroid of the cap.\nCompute mean normal of the cap.\nProperty detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#Cap.global_node_ids_edge",
        "title": "Cap > Property detail > global_node_ids_edge",
        "section": "Property detail > global_node_ids_edge",
        "text": "property Cap.global_node_ids_edge\n\nGlobal node IDs of the edge of the cap.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#Cap.global_centroid_id",
        "title": "Cap > Property detail > global_centroid_id",
        "section": "Property detail > global_centroid_id",
        "text": "property Cap.global_centroid_id\n\nGlobal centroid ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#Cap.centroid",
        "title": "Cap > Property detail > centroid",
        "section": "Property detail > centroid",
        "text": "property Cap.centroid\n\nCentroid of the cap.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Cap",
        "href": "api/ansys/health/heart/objects/Cap.html#Cap.cap_normal",
        "title": "Cap > Property detail > cap_normal",
        "section": "Property detail > cap_normal",
        "text": "property Cap.cap_normal\n\nCompute mean normal of the cap.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#eppostprocessor",
        "title": "EPpostprocessor",
        "section": "EPpostprocessor",
        "text": "Postprocess EP (plectrophysiology) results.\nEPpostprocessor\nEPpostprocessor"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#ansys.health.heart.post.dpf_utils.EPpostprocessor",
        "title": "EPpostprocessor > EPpostprocessor > EPpostprocessor",
        "section": "EPpostprocessor > EPpostprocessor",
        "text": "class ansys.health.heart.post.dpf_utils.EPpostprocessor(results_path: pathlib.Path, model: ansys.health.heart.models.HeartModel = None)\n\nPostprocess EP (plectrophysiology) results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#overview",
        "title": "EPpostprocessor > Overview",
        "section": "Overview",
        "text": "load_ep_fields\nLoad all EP fields.\nget_activation_times\nGet the field with activation times.\nget_transmembrane_potential\nGet transmembrane potential.\nget_extracellular_potential\nGet extracellular potential.\nget_intracellular_potential\nGet intracellular potential.\nget_calcium\nGet calcium concentration.\nread_ep_nodout\nRead EP results.\ncreate_post_folder\nCreate postprocessing folder.\nanimate_transmembrane\nAnimate transmembrane potentials and export to VTK.\nexport_transmembrane_to_vtk\nExport transmembrane potentials to VTK.\ncompute_ECGs\nCompute ECGs.\nread_ECGs\nRead ECG text file produced by the LS-DYNA simulation.\ncompute_12_lead_ECGs\nCompute 12-lead ECGs from 10 electrodes.\nreader\nfields\nmodel\nOverview\nload_ep_fields\nget_activation_times\nget_transmembrane_potential\nget_extracellular_potential\nget_intracellular_potential\nget_calcium\nread_ep_nodout\ncreate_post_folder\nanimate_transmembrane\nexport_transmembrane_to_vtk\ncompute_ECGs\nread_ECGs\ncompute_12_lead_ECGs\nreader\nfields\nmodel"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#import-detail",
        "title": "EPpostprocessor > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#attribute-detail",
        "title": "EPpostprocessor > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.reader",
        "title": "EPpostprocessor > Attribute detail > reader",
        "section": "Attribute detail > reader",
        "text": "EPpostprocessor.reader\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.fields",
        "title": "EPpostprocessor > Attribute detail > fields",
        "section": "Attribute detail > fields",
        "text": "EPpostprocessor.fields = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.model",
        "title": "EPpostprocessor > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "EPpostprocessor.model = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#method-detail",
        "title": "EPpostprocessor > Method detail",
        "section": "Method detail",
        "text": "Load all EP fields.\nGet the field with activation times.\nGet transmembrane potential.\nGet extracellular potential.\nGet intracellular potential.\nGet calcium concentration.\nRead EP results.\nCreate postprocessing folder.\nAnimate transmembrane potentials and export to VTK.\nExport transmembrane potentials to VTK.\nCompute ECGs.\nRead ECG text file produced by the LS-DYNA simulation.\nCompute 12-lead ECGs from 10 electrodes.\nmxn array containing ECGs, where m is the number of time steps\nand n is 10 electrodes in this order:\n‘’V1’’ ‘’V2’’ ‘’V3’’ ‘’V4’’ ‘’V5’’ ‘’V6’’ ‘’RA’’ ‘’LA’’ ‘’RL’’ ‘’LL’’\nWhether to plot.\n12-lead ECGs in this order:\nI II III aVR aVL aVF V1 V2 V3 V4 V5 V6\nMethod detail\nnp.ndarray\npython:True\nnp.ndarray\nI\nII\nIII\naVR\naVL\naVF\nV1\nV2\nV3\nV4\nV5\nV6"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.load_ep_fields",
        "title": "EPpostprocessor > Method detail > load_ep_fields",
        "section": "Method detail > load_ep_fields",
        "text": "EPpostprocessor.load_ep_fields()\n\nLoad all EP fields.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_activation_times",
        "title": "EPpostprocessor > Method detail > get_activation_times",
        "section": "Method detail > get_activation_times",
        "text": "EPpostprocessor.get_activation_times(at_step: int = None)\n\nGet the field with activation times.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_transmembrane_potential",
        "title": "EPpostprocessor > Method detail > get_transmembrane_potential",
        "section": "Method detail > get_transmembrane_potential",
        "text": "EPpostprocessor.get_transmembrane_potential(node_id=None, plot: bool = False)\n\nGet transmembrane potential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_extracellular_potential",
        "title": "EPpostprocessor > Method detail > get_extracellular_potential",
        "section": "Method detail > get_extracellular_potential",
        "text": "EPpostprocessor.get_extracellular_potential(node_id=None, plot: bool = False)\n\nGet extracellular potential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_intracellular_potential",
        "title": "EPpostprocessor > Method detail > get_intracellular_potential",
        "section": "Method detail > get_intracellular_potential",
        "text": "EPpostprocessor.get_intracellular_potential(node_id=None, plot: bool = False)\n\nGet intracellular potential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_calcium",
        "title": "EPpostprocessor > Method detail > get_calcium",
        "section": "Method detail > get_calcium",
        "text": "EPpostprocessor.get_calcium(node_id=None, plot: bool = False)\n\nGet calcium concentration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.read_ep_nodout",
        "title": "EPpostprocessor > Method detail > read_ep_nodout",
        "section": "Method detail > read_ep_nodout",
        "text": "EPpostprocessor.read_ep_nodout()\n\nRead EP results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.create_post_folder",
        "title": "EPpostprocessor > Method detail > create_post_folder",
        "section": "Method detail > create_post_folder",
        "text": "EPpostprocessor.create_post_folder(path: pathlib.Path = None)\n\nCreate postprocessing folder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.animate_transmembrane",
        "title": "EPpostprocessor > Method detail > animate_transmembrane",
        "section": "Method detail > animate_transmembrane",
        "text": "EPpostprocessor.animate_transmembrane()\n\nAnimate transmembrane potentials and export to VTK.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.export_transmembrane_to_vtk",
        "title": "EPpostprocessor > Method detail > export_transmembrane_to_vtk",
        "section": "Method detail > export_transmembrane_to_vtk",
        "text": "EPpostprocessor.export_transmembrane_to_vtk()\n\nExport transmembrane potentials to VTK.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.compute_ECGs",
        "title": "EPpostprocessor > Method detail > compute_ECGs",
        "section": "Method detail > compute_ECGs",
        "text": "EPpostprocessor.compute_ECGs(electrodes: numpy.ndarray)\n\nCompute ECGs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.read_ECGs",
        "title": "EPpostprocessor > Method detail > read_ECGs",
        "section": "Method detail > read_ECGs",
        "text": "EPpostprocessor.read_ECGs(path: pathlib.Path)\n\nRead ECG text file produced by the LS-DYNA simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/health/heart/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.compute_12_lead_ECGs",
        "title": "EPpostprocessor > Method detail > compute_12_lead_ECGs",
        "section": "Method detail > compute_12_lead_ECGs",
        "text": "EPpostprocessor.compute_12_lead_ECGs(ECGs: numpy.ndarray, times: numpy.ndarray, plot: bool = True) -> numpy.ndarray\n\nCompute 12-lead ECGs from 10 electrodes.\n\nParameters\n\nECGs\n\nnp.ndarray\n\nmxn array containing ECGs, where m is the number of time steps\nand n is 10 electrodes in this order:\n‘’V1’’ ‘’V2’’ ‘’V3’’ ‘’V4’’ ‘’V5’’ ‘’V6’’ ‘’RA’’ ‘’LA’’ ‘’RL’’ ‘’LL’’\n\nplot\n\nbool, default: python:True\n\nWhether to plot.\n\nReturns\n\nnp.ndarray\n\n12-lead ECGs in this order:\nI II III aVR aVL aVF V1 V2 V3 V4 V5 V6\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/index",
        "href": "api/ansys/health/heart/post/strain_calculator/index.html#the-strain_calculatorpy-module",
        "title": "The strain_calculator.py module",
        "section": "The strain_calculator.py module",
        "text": "The strain_calculator.py module\nstrain_calculator.py"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/index",
        "href": "api/ansys/health/heart/post/strain_calculator/index.html#summary",
        "title": "The strain_calculator.py module > Summary",
        "section": "Summary",
        "text": "AhaStrainCalculator\nCompute longitudinal, radial, and circumferential strain for the left ventricle.\nSummary\nAhaStrainCalculator"
    },
    {
        "objectID": "api/ansys/health/heart/post/strain_calculator/index",
        "href": "api/ansys/health/heart/post/strain_calculator/index.html#description",
        "title": "The strain_calculator.py module > Description",
        "section": "Description",
        "text": "Compute myocardial strain.\nDescription"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#prerequisites",
        "title": "Getting started > Prerequisites",
        "section": "Prerequisites",
        "text": "Prerequisites"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#operating-system",
        "title": "Getting started > Prerequisites > Operating system",
        "section": "Operating system",
        "text": "Windows 10, Windows 11\nLinux\nOperating system"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#ansys-tools",
        "title": "Getting started > Prerequisites > Ansys tools",
        "section": "Ansys tools",
        "text": "This framework was developed and tested under Python 3.10, Python 3.11, and Python 3.12.\nBefore starting the installation, run the python --version command and check that you are using one of the supported versions.\nAnsys tools\npython --version"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#software",
        "title": "Getting started > Prerequisites > Software",
        "section": "Software",
        "text": "Product\nSupported versions\nScope\nLink to download\nAnsys Fluent\n2024 R1, 2024 R2, 2025 R1\nPreprocessor\nAnsys Customer Portal\nAnsys DPF Server\n2024.1 (comes with the 2024 R1 installation), 2024.1rc1, 2024.2rc0\nPostprocessor\nAnsys Customer Portal\nAnsys LS-DYNA\n16.0.0 IntelMPI double precision, 16.0.0 MSMPI double precision\nSimulator\nAnsys LSDYNA Product Space or contact the PyAnsys Core team to get more information.\nFluent is required for meshing. Also note that currently the postprocessor module is only compatible with Ansys DPF Servers 2024.1 (comes with the 2024 R1 installation), 2024.1rc1, and 2024.2rc0. Later versions are currently not supported. Hence installing Ansys Fluent 2024 R1 is the most convenient.\nIf you use a standalone version of the DPF Server, you must accept the DPF license terms https://dpf.docs.pyansys.com/version/stable/getting_started/licensing.html by setting\nthe environment variable ANSYS_DPF_ACCEPT_LA to Y.\nSoftware\nRequired Ansys products\nANSYS_DPF_ACCEPT_LA\nY"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#pyansysheartcustomadapter",
        "title": "PyAnsysHeartCustomAdapter",
        "section": "PyAnsysHeartCustomAdapter",
        "text": "Bases: logging.LoggerAdapter\nKeeps the reference to the PyAnsys Heart service instance dynamic.\nIf you use the standard approach, which is supplying extra input\nto the logger, you must input PyAnsys Heart service instances\neach time that you log a message.\nUsing adapters, you only need to specify the PyAnsys Heart service instance\nthat you are referring to once.\nPyAnsysHeartCustomAdapter\nPyAnsysHeartCustomAdapter\nlogging.LoggerAdapter"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#ansys.health.heart.logger.PyAnsysHeartCustomAdapter",
        "title": "PyAnsysHeartCustomAdapter > PyAnsysHeartCustomAdapter > PyAnsysHeartCustomAdapter",
        "section": "PyAnsysHeartCustomAdapter > PyAnsysHeartCustomAdapter",
        "text": "class ansys.health.heart.logger.PyAnsysHeartCustomAdapter(logger: logging.Logger)\n\nBases: logging.LoggerAdapter\n\nKeeps the reference to the PyAnsys Heart service instance dynamic.\n\nIf you use the standard approach, which is supplying extra input\nto the logger, you must input PyAnsys Heart service instances\neach time that you log a message.\n\nUsing adapters, you only need to specify the PyAnsys Heart service instance\nthat you are referring to once.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#overview",
        "title": "PyAnsysHeartCustomAdapter > Overview",
        "section": "Overview",
        "text": "process\nProcess extra arguments.\nlog_to_file\nAdd a file handler to the logger.\nlog_to_stdout\nAdd a stdout handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nlevel\nfile_handler\nstd_out_handler\nlogger\nOverview\nprocess\nlog_to_file\nlog_to_stdout\nsetLevel\nlevel\nfile_handler\nstd_out_handler\nlogger"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#import-detail",
        "title": "PyAnsysHeartCustomAdapter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#attribute-detail",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.level",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "PyAnsysHeartCustomAdapter.level = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.file_handler",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "PyAnsysHeartCustomAdapter.file_handler: logging.FileHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.std_out_handler",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "PyAnsysHeartCustomAdapter.std_out_handler: logging.StreamHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.logger",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "PyAnsysHeartCustomAdapter.logger\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#method-detail",
        "title": "PyAnsysHeartCustomAdapter > Method detail",
        "section": "Method detail",
        "text": "Process extra arguments.\nAdd a file handler to the logger.\nName of the file to record logs to.\nLevel of logging, such as DEBUG.\nAdd a stdout handler to the logger.\nLevel of the logging record.\nChange the log level of the object and the attached handlers.\nMethod detail\npython:str\nFILE_NAME\npython:str\npython:int\nLOG_LEVEL\nDEBUG\npython:str\npython:int\nLOG_LEVEL"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.process",
        "title": "PyAnsysHeartCustomAdapter > Method detail > process",
        "section": "Method detail > process",
        "text": "PyAnsysHeartCustomAdapter.process(msg: str, kwargs: MutableMapping[str, Dict[str, str]])\n\nProcess extra arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.log_to_file",
        "title": "PyAnsysHeartCustomAdapter > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "PyAnsysHeartCustomAdapter.log_to_file(filename: str = FILE_NAME, level: LOG_LEVEL_TYPE = LOG_LEVEL_FILE) -> None\n\nAdd a file handler to the logger.\n\nParameters\n\nfilename\n\npython:str, default: FILE_NAME\n\nName of the file to record logs to.\n\nlevel\n\npython:str or python:int, default: LOG_LEVEL\n\nLevel of logging, such as DEBUG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.log_to_stdout",
        "title": "PyAnsysHeartCustomAdapter > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "PyAnsysHeartCustomAdapter.log_to_stdout(level: LOG_LEVEL_TYPE = LOG_LEVEL_STDOUT) -> None\n\nAdd a stdout handler to the logger.\n\nParameters\n\nlevel\n\npython:str or python:int, default: LOG_LEVEL\n\nLevel of the logging record.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/health/heart/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.setLevel",
        "title": "PyAnsysHeartCustomAdapter > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "PyAnsysHeartCustomAdapter.setLevel(level: int | str = 'DEBUG')\n\nChange the log level of the object and the attached handlers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#d3plotreader",
        "title": "D3plotReader",
        "section": "D3plotReader",
        "text": "Use DPF to parse the d3plot.\nD3plotReader\nD3plotReader"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#ansys.health.heart.post.dpf_utils.D3plotReader",
        "title": "D3plotReader > D3plotReader > D3plotReader",
        "section": "D3plotReader > D3plotReader",
        "text": "class ansys.health.heart.post.dpf_utils.D3plotReader(path: pathlib.Path)\n\nUse DPF to parse the d3plot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#overview",
        "title": "D3plotReader > Overview",
        "section": "Overview",
        "text": "get_initial_coordinates\nGet initial coordinates.\nget_ep_fields\nGet EP fields container.\nprint_lsdyna_ms_results\nPrint available ms results.\nget_displacement_at\nGet the displacement field.\nget_material_ids\nGet a list of the material IDs.\nget_history_variable\nGet history variables in the d3plot.\nget_heatflux\nGet nodal heat flux vector from the d3plot.\nds\nmodel\nmeshgrid\ntime\nOverview\nget_initial_coordinates\nget_ep_fields\nprint_lsdyna_ms_results\nget_displacement_at\nget_material_ids\nget_history_variable\nget_heatflux\nds\nmodel\nmeshgrid\ntime"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#import-detail",
        "title": "D3plotReader > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#attribute-detail",
        "title": "D3plotReader > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.ds",
        "title": "D3plotReader > Attribute detail > ds",
        "section": "Attribute detail > ds",
        "text": "D3plotReader.ds\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.model",
        "title": "D3plotReader > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "D3plotReader.model\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.meshgrid",
        "title": "D3plotReader > Attribute detail > meshgrid",
        "section": "Attribute detail > meshgrid",
        "text": "D3plotReader.meshgrid: pyvista.UnstructuredGrid\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.time",
        "title": "D3plotReader > Attribute detail > time",
        "section": "Attribute detail > time",
        "text": "D3plotReader.time\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#method-detail",
        "title": "D3plotReader > Method detail",
        "section": "Method detail",
        "text": "Get initial coordinates.\nGet EP fields container.\nPrint available ms results.\nGet the displacement field.\nTime to get the displacement field at.\nDisplacement array.\nGet a list of the material IDs.\nGet history variables in the d3plot.\nHistory variables index.\nStep to get the history variables at.\nHistory variables data.\nd3plot.get_history_variable(hv_index=list(range(9)), at_frame=at_frame). To\nget the deformation gradient (column-wise storage), see MAT_295 in the LS-DYNA manuals.\nGet nodal heat flux vector from the d3plot.\nTime step\nHeat flux.\nMethod detail\npython:float\nnp.ndarray\nnp.ndarray\nd3plot.get_history_variable(hv_index=list(range(9)), at_frame=at_frame)\npython:int\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.get_initial_coordinates",
        "title": "D3plotReader > Method detail > get_initial_coordinates",
        "section": "Method detail > get_initial_coordinates",
        "text": "D3plotReader.get_initial_coordinates() -> numpy.ndarray\n\nGet initial coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.get_ep_fields",
        "title": "D3plotReader > Method detail > get_ep_fields",
        "section": "Method detail > get_ep_fields",
        "text": "D3plotReader.get_ep_fields(at_step: int = None) -> ansys.dpf.core.FieldsContainer\n\nGet EP fields container.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.print_lsdyna_ms_results",
        "title": "D3plotReader > Method detail > print_lsdyna_ms_results",
        "section": "Method detail > print_lsdyna_ms_results",
        "text": "D3plotReader.print_lsdyna_ms_results() -> None\n\nPrint available ms results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.get_displacement_at",
        "title": "D3plotReader > Method detail > get_displacement_at",
        "section": "Method detail > get_displacement_at",
        "text": "D3plotReader.get_displacement_at(time: float) -> numpy.ndarray\n\nGet the displacement field.\n\nParameters\n\ntime\n\npython:float\n\nTime to get the displacement field at.\n\nReturns\n\nnp.ndarray\n\nDisplacement array.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.get_material_ids",
        "title": "D3plotReader > Method detail > get_material_ids",
        "section": "Method detail > get_material_ids",
        "text": "D3plotReader.get_material_ids() -> numpy.ndarray\n\nGet a list of the material IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.get_history_variable",
        "title": "D3plotReader > Method detail > get_history_variable",
        "section": "Method detail > get_history_variable",
        "text": "D3plotReader.get_history_variable(hv_index: List[int], at_step: int = 0) -> numpy.ndarray\n\nGet history variables in the d3plot.\n\nParameters\n\nhv_index: List[int]\n\nHistory variables index.\n\nat_step: int, default: 0\n\nStep to get the history variables at.\n\nReturns\n\nnp.ndarray\n\nHistory variables data.\n\nNotes\n\nd3plot.get_history_variable(hv_index=list(range(9)), at_frame=at_frame). To\nget the deformation gradient (column-wise storage), see MAT_295 in the LS-DYNA manuals.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotReader",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotReader.html#D3plotReader.get_heatflux",
        "title": "D3plotReader > Method detail > get_heatflux",
        "section": "Method detail > get_heatflux",
        "text": "D3plotReader.get_heatflux(step: int = 2) -> numpy.ndarray\n\nGet nodal heat flux vector from the d3plot.\n\nParameters\n\nstep\n\npython:int, default: 2\n\nTime step\n\nReturns\n\nnp.ndarray\n\nHeat flux.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/simulator/index",
        "href": "examples/simulator/index.html#simulator-examples",
        "title": "Simulator examples",
        "section": "Simulator examples",
        "text": "These examples show how to use the simulator module\nto consume preprocessed models, consequently using them to run various simulations.\nsphx_glr_examples_simulator_ep-mechanics-simulator-fullheart.py\nsphx_glr_examples_simulator_ep-simulator-fullheart_rodero.py\nsphx_glr_examples_simulator_mechanics-simulator-leftventricle_pr.py\nSimulator examples\nsimulator"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#basedecks",
        "title": "BaseDecks",
        "section": "BaseDecks",
        "text": "Class where each attribute corresponds to its respective deck.\nThis class used to distinguish between each of the decks.\nThis base class defines some commonly used decks.\nBaseDecks\nBaseDecks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#ansys.health.heart.writer.heart_decks.BaseDecks",
        "title": "BaseDecks > BaseDecks > BaseDecks",
        "section": "BaseDecks > BaseDecks",
        "text": "class ansys.health.heart.writer.heart_decks.BaseDecks\n\nClass where each attribute corresponds to its respective deck.\n\nNotes\n\nThis class used to distinguish between each of the decks.\nThis base class defines some commonly used decks.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#overview",
        "title": "BaseDecks > Overview",
        "section": "Overview",
        "text": "add_deck\nAdd deck by filename.\nmain\nparts\nnodes\nsolid_elements\nmaterial\nsegment_sets\nnode_sets\nboundary_conditions\nOverview\nadd_deck\nmain\nparts\nnodes\nsolid_elements\nmaterial\nsegment_sets\nnode_sets\nboundary_conditions"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#import-detail",
        "title": "BaseDecks > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#attribute-detail",
        "title": "BaseDecks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.main",
        "title": "BaseDecks > Attribute detail > main",
        "section": "Attribute detail > main",
        "text": "BaseDecks.main: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.parts",
        "title": "BaseDecks > Attribute detail > parts",
        "section": "Attribute detail > parts",
        "text": "BaseDecks.parts: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.nodes",
        "title": "BaseDecks > Attribute detail > nodes",
        "section": "Attribute detail > nodes",
        "text": "BaseDecks.nodes: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.solid_elements",
        "title": "BaseDecks > Attribute detail > solid_elements",
        "section": "Attribute detail > solid_elements",
        "text": "BaseDecks.solid_elements: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.material",
        "title": "BaseDecks > Attribute detail > material",
        "section": "Attribute detail > material",
        "text": "BaseDecks.material: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.segment_sets",
        "title": "BaseDecks > Attribute detail > segment_sets",
        "section": "Attribute detail > segment_sets",
        "text": "BaseDecks.segment_sets: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.node_sets",
        "title": "BaseDecks > Attribute detail > node_sets",
        "section": "Attribute detail > node_sets",
        "text": "BaseDecks.node_sets: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.boundary_conditions",
        "title": "BaseDecks > Attribute detail > boundary_conditions",
        "section": "Attribute detail > boundary_conditions",
        "text": "BaseDecks.boundary_conditions: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#method-detail",
        "title": "BaseDecks > Method detail",
        "section": "Method detail",
        "text": "Add deck by filename.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/BaseDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/BaseDecks.html#BaseDecks.add_deck",
        "title": "BaseDecks > Method detail > add_deck",
        "section": "Method detail > add_deck",
        "text": "BaseDecks.add_deck(deckname: str) -> None\n\nAdd deck by filename.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#d3plottovtkexporter",
        "title": "D3plotToVTKExporter",
        "section": "D3plotToVTKExporter",
        "text": "Read d3plot and save the deformed mesh.\nD3plotToVTKExporter\nD3plotToVTKExporter"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#ansys.health.heart.post.dpf_utils.D3plotToVTKExporter",
        "title": "D3plotToVTKExporter > D3plotToVTKExporter > D3plotToVTKExporter",
        "section": "D3plotToVTKExporter > D3plotToVTKExporter",
        "text": "class ansys.health.heart.post.dpf_utils.D3plotToVTKExporter(d3plot_file: str, t_to_keep: float = 100000000000.0)\n\nRead d3plot and save the deformed mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#overview",
        "title": "D3plotToVTKExporter > Overview",
        "section": "Overview",
        "text": "convert_to_pvgrid_at_t\nConvert d3plot data into a PyVista UnstructuredGrid object.\ndata\nsave_time\nOverview\nconvert_to_pvgrid_at_t\nUnstructuredGrid\ndata\nsave_time"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#import-detail",
        "title": "D3plotToVTKExporter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#attribute-detail",
        "title": "D3plotToVTKExporter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#D3plotToVTKExporter.data",
        "title": "D3plotToVTKExporter > Attribute detail > data",
        "section": "Attribute detail > data",
        "text": "D3plotToVTKExporter.data\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#D3plotToVTKExporter.save_time",
        "title": "D3plotToVTKExporter > Attribute detail > save_time",
        "section": "Attribute detail > save_time",
        "text": "D3plotToVTKExporter.save_time\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#method-detail",
        "title": "D3plotToVTKExporter > Method detail",
        "section": "Method detail",
        "text": "Convert d3plot data into a PyVista UnstructuredGrid object.\nTime to convert.\nName of file to save data to.\nResult in PyVista object.\nMethod detail\nUnstructuredGrid\npython:float\npython:str\npython:None\npv.UnstructuredGrid"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/health/heart/post/dpf_utils/D3plotToVTKExporter.html#D3plotToVTKExporter.convert_to_pvgrid_at_t",
        "title": "D3plotToVTKExporter > Method detail > convert_to_pvgrid_at_t",
        "section": "Method detail > convert_to_pvgrid_at_t",
        "text": "D3plotToVTKExporter.convert_to_pvgrid_at_t(time: float, fname: str = None) -> pyvista.UnstructuredGrid\n\nConvert d3plot data into a PyVista UnstructuredGrid object.\n\nParameters\n\ntime\n\npython:float\n\nTime to convert.\n\nfname\n\npython:str, default: python:None\n\nName of file to save data to.\n\nReturns\n\npv.UnstructuredGrid\n\nResult in PyVista object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#tentusschermid",
        "title": "TentusscherMid",
        "section": "TentusscherMid",
        "text": "Bases: Tentusscher\nHold data for Tentusscher cell model in its mid-myocardium version.\nTentusscherMid\nTentusscherMid\nTentusscher"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#ansys.health.heart.settings.material.ep_material.CellModel.TentusscherMid",
        "title": "TentusscherMid > TentusscherMid > TentusscherMid",
        "section": "TentusscherMid > TentusscherMid",
        "text": "class ansys.health.heart.settings.material.ep_material.CellModel.TentusscherMid\n\nBases: Tentusscher\n\nHold data for Tentusscher cell model in its mid-myocardium version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#overview",
        "title": "TentusscherMid > Overview",
        "section": "Overview",
        "text": "gks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#import-detail",
        "title": "TentusscherMid > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#attribute-detail",
        "title": "TentusscherMid > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.gks",
        "title": "TentusscherMid > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "TentusscherMid.gks: float = 0.098\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.gto",
        "title": "TentusscherMid > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "TentusscherMid.gto: float = 0.294\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.v",
        "title": "TentusscherMid > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "TentusscherMid.v: float = -85.423\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.ki",
        "title": "TentusscherMid > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "TentusscherMid.ki: float = 138.52\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.nai",
        "title": "TentusscherMid > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "TentusscherMid.nai: float = 10.132\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.cai",
        "title": "TentusscherMid > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "TentusscherMid.cai: float = 0.000153\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.cass",
        "title": "TentusscherMid > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "TentusscherMid.cass: float = 0.00042\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.casr",
        "title": "TentusscherMid > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "TentusscherMid.casr: float = 4.272\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.rpri",
        "title": "TentusscherMid > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "TentusscherMid.rpri: float = 0.8978\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.xr1",
        "title": "TentusscherMid > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "TentusscherMid.xr1: float = 0.0165\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.xr2",
        "title": "TentusscherMid > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "TentusscherMid.xr2: float = 0.473\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.xs",
        "title": "TentusscherMid > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "TentusscherMid.xs: float = 0.0174\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.m",
        "title": "TentusscherMid > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "TentusscherMid.m: float = 0.00165\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.h",
        "title": "TentusscherMid > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "TentusscherMid.h: float = 0.749\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.j",
        "title": "TentusscherMid > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "TentusscherMid.j: float = 0.6788\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.d",
        "title": "TentusscherMid > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "TentusscherMid.d: float = 3.288e-05\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.f",
        "title": "TentusscherMid > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "TentusscherMid.f: float = 0.7026\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.f2",
        "title": "TentusscherMid > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "TentusscherMid.f2: float = 0.9526\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.fcass",
        "title": "TentusscherMid > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "TentusscherMid.fcass: float = 0.9942\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.s",
        "title": "TentusscherMid > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "TentusscherMid.s: float = 0.999998\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.r",
        "title": "TentusscherMid > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "TentusscherMid.r: float = 2.347e-08\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#material",
        "title": "Material",
        "section": "Material",
        "text": "Bases: Settings\nClass for storing material settings.\nMaterial\nMaterial\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#ansys.health.heart.settings.settings.Material",
        "title": "Material > Material > Material",
        "section": "Material > Material",
        "text": "class ansys.health.heart.settings.settings.Material\n\nBases: Settings\n\nClass for storing material settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#overview",
        "title": "Material > Overview",
        "section": "Overview",
        "text": "myocardium\nMyocardium material.\npassive\nPassive material. For example, the vessel wall.\ncap\nCap material.\nOverview\nmyocardium\npassive\ncap"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#import-detail",
        "title": "Material > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#attribute-detail",
        "title": "Material > Attribute detail",
        "section": "Attribute detail",
        "text": "Myocardium material.\nPassive material. For example, the vessel wall.\nCap material.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#Material.myocardium",
        "title": "Material > Attribute detail > myocardium",
        "section": "Attribute detail > myocardium",
        "text": "Material.myocardium: AttrDict = None\n\nMyocardium material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#Material.passive",
        "title": "Material > Attribute detail > passive",
        "section": "Attribute detail > passive",
        "text": "Material.passive: AttrDict = None\n\nPassive material. For example, the vessel wall.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Material",
        "href": "api/ansys/health/heart/settings/settings/Material.html#Material.cap",
        "title": "Material > Attribute detail > cap",
        "section": "Attribute detail > cap",
        "text": "Material.cap: AttrDict = None\n\nCap material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialHGOMyocardium",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialHGOMyocardium.html#materialhgomyocardium",
        "title": "MaterialHGOMyocardium",
        "section": "MaterialHGOMyocardium",
        "text": "Bases: ansys.dyna.core.keywords.keywords.Mat295\nHGO material model, which is derived from Mat295.\nMaterialHGOMyocardium\nMaterialHGOMyocardium\nansys.dyna.core.keywords.keywords.Mat295"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialHGOMyocardium",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialHGOMyocardium.html#ansys.health.heart.writer.material_keywords.MaterialHGOMyocardium",
        "title": "MaterialHGOMyocardium > MaterialHGOMyocardium > MaterialHGOMyocardium",
        "section": "MaterialHGOMyocardium > MaterialHGOMyocardium",
        "text": "class ansys.health.heart.writer.material_keywords.MaterialHGOMyocardium(id: int, mat: ansys.health.heart.settings.material.material.Mat295, ignore_active: bool = False)\n\nBases: ansys.dyna.core.keywords.keywords.Mat295\n\nHGO material model, which is derived from Mat295.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialHGOMyocardium",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialHGOMyocardium.html#import-detail",
        "title": "MaterialHGOMyocardium > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/DatabaseNotSupportedError",
        "href": "api/ansys/health/heart/exceptions/DatabaseNotSupportedError.html#databasenotsupportederror",
        "title": "DatabaseNotSupportedError",
        "section": "DatabaseNotSupportedError",
        "text": "Bases: NotImplementedError\nException raised when the database is not supported.\nDatabaseNotSupportedError\nDatabaseNotSupportedError\nNotImplementedError"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/DatabaseNotSupportedError",
        "href": "api/ansys/health/heart/exceptions/DatabaseNotSupportedError.html#ansys.health.heart.exceptions.DatabaseNotSupportedError",
        "title": "DatabaseNotSupportedError > DatabaseNotSupportedError > DatabaseNotSupportedError",
        "section": "DatabaseNotSupportedError > DatabaseNotSupportedError",
        "text": "exception ansys.health.heart.exceptions.DatabaseNotSupportedError(db_type, message)\n\nBases: NotImplementedError\n\nException raised when the database is not supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/DatabaseNotSupportedError",
        "href": "api/ansys/health/heart/exceptions/DatabaseNotSupportedError.html#import-detail",
        "title": "DatabaseNotSupportedError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#active",
        "title": "Active",
        "section": "Active",
        "text": "Bases: EPMaterialModel\nHold data for EP material.\nActive\nActive\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#ansys.health.heart.settings.material.ep_material.EPMaterial.Active",
        "title": "Active > Active > Active",
        "section": "Active > Active",
        "text": "class ansys.health.heart.settings.material.ep_material.EPMaterial.Active\n\nBases: EPMaterialModel\n\nHold data for EP material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#overview",
        "title": "Active > Overview",
        "section": "Overview",
        "text": "solver_type\nsig1\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal\ncell_model\nOverview\nsolver_type\nsig1\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal\ncell_model"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#import-detail",
        "title": "Active > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#attribute-detail",
        "title": "Active > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#Active.solver_type",
        "title": "Active > Attribute detail > solver_type",
        "section": "Attribute detail > solver_type",
        "text": "Active.solver_type = 'Monodomain'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#Active.sig1",
        "title": "Active > Attribute detail > sig1",
        "section": "Attribute detail > sig1",
        "text": "Active.sig1\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#Active.sigma_fiber",
        "title": "Active > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "Active.sigma_fiber: float\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#Active.sigma_sheet",
        "title": "Active > Attribute detail > sigma_sheet",
        "section": "Attribute detail > sigma_sheet",
        "text": "Active.sigma_sheet: float | None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#Active.sigma_sheet_normal",
        "title": "Active > Attribute detail > sigma_sheet_normal",
        "section": "Attribute detail > sigma_sheet_normal",
        "text": "Active.sigma_sheet_normal: float | None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Active.html#Active.cell_model",
        "title": "Active > Attribute detail > cell_model",
        "section": "Attribute detail > cell_model",
        "text": "Active.cell_model: CellModel\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/index",
        "href": "api/ansys/health/heart/writer/index.html#the-writer-package",
        "title": "The writer package",
        "section": "The writer package",
        "text": "The writer package\nwriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/index",
        "href": "api/ansys/health/heart/writer/index.html#summary",
        "title": "The writer package > Summary",
        "section": "Summary",
        "text": "base_writer\nBase module containing classes for writing LS-DYNA keyword files.\ndefine_function_templates\nCollection of define function templates.\nep_mechanics_writer\nModule containing classes for writing LS-DYNA keyword files for ep-mechanics simulations.\nep_writer\nModule containing classes for writing LS-DYNA keyword files for electrophysiology simulations.\nheart_decks\nDefines LS-DYNA decks for heart modeling.\nlaplace_writer\nModule containing classes for writing LS-DYNA keyword files for laplace simulations.\nmaterial_keywords\nUse PyDYNA keywords module to create commonly used material cards and their default values.\nmechanics_writer\nModule containing classes for writing LS-DYNA keyword files mechanics simulations.\nwriter_utils\nModule for useful methods to help format LS-DYNA keywords.\nSummary\nbase_writer\ndefine_function_templates\nep_mechanics_writer\nep_writer\nheart_decks\nlaplace_writer\nmaterial_keywords\nmechanics_writer\nwriter_utils"
    },
    {
        "objectID": "api/ansys/health/heart/writer/index",
        "href": "api/ansys/health/heart/writer/index.html#description",
        "title": "The writer package > Description",
        "section": "Description",
        "text": "Writer subpackage.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#epmaterialmodel",
        "title": "EPMaterialModel",
        "section": "EPMaterialModel",
        "text": "Base class for all EP material models.\nEPMaterialModel\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#ansys.health.heart.settings.material.ep_material.EPMaterialModel",
        "title": "EPMaterialModel > EPMaterialModel > EPMaterialModel",
        "section": "EPMaterialModel > EPMaterialModel",
        "text": "class ansys.health.heart.settings.material.ep_material.EPMaterialModel\n\nBase class for all EP material models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#overview",
        "title": "EPMaterialModel > Overview",
        "section": "Overview",
        "text": "sigma_fiber\nsigma_sheet\nsigma_sheet_normal\nbeta\ncm\nlambda_\n__post_init__\nPost init method.\nOverview\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal\nbeta\ncm\nlambda_\n__post_init__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#import-detail",
        "title": "EPMaterialModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#attribute-detail",
        "title": "EPMaterialModel > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.sigma_fiber",
        "title": "EPMaterialModel > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "EPMaterialModel.sigma_fiber: float = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.sigma_sheet",
        "title": "EPMaterialModel > Attribute detail > sigma_sheet",
        "section": "Attribute detail > sigma_sheet",
        "text": "EPMaterialModel.sigma_sheet: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.sigma_sheet_normal",
        "title": "EPMaterialModel > Attribute detail > sigma_sheet_normal",
        "section": "Attribute detail > sigma_sheet_normal",
        "text": "EPMaterialModel.sigma_sheet_normal: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.beta",
        "title": "EPMaterialModel > Attribute detail > beta",
        "section": "Attribute detail > beta",
        "text": "EPMaterialModel.beta: float | None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.cm",
        "title": "EPMaterialModel > Attribute detail > cm",
        "section": "Attribute detail > cm",
        "text": "EPMaterialModel.cm: float | None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.lambda_",
        "title": "EPMaterialModel > Attribute detail > lambda_",
        "section": "Attribute detail > lambda_",
        "text": "EPMaterialModel.lambda_: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#method-detail",
        "title": "EPMaterialModel > Method detail",
        "section": "Method detail",
        "text": "Post init method.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.__post_init__",
        "title": "EPMaterialModel > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "EPMaterialModel.__post_init__()\n\nPost init method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#fibers",
        "title": "Fibers",
        "section": "Fibers",
        "text": "Bases: Settings\nClass for keeping track of fiber settings.\nFibers\nFibers\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#ansys.health.heart.settings.settings.Fibers",
        "title": "Fibers > Fibers > Fibers",
        "section": "Fibers > Fibers",
        "text": "class ansys.health.heart.settings.settings.Fibers\n\nBases: Settings\n\nClass for keeping track of fiber settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#overview",
        "title": "Fibers > Overview",
        "section": "Overview",
        "text": "alpha_endo\nHelical angle in endocardium.\nalpha_epi\nHelical angle in epicardium.\nbeta_endo\nAngle to the outward transmural axis of the heart in endocardium.\nbeta_epi\nAngle to the outward transmural axis of the heart in epicardium.\nbeta_endo_septum\nAngle to the outward transmural axis of the heart in left septum.\nbeta_epi_septum\nAngle to the outward transmural axis of the heart in right septum.\nOverview\nalpha_endo\nalpha_epi\nbeta_endo\nbeta_epi\nbeta_endo_septum\nbeta_epi_septum"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#import-detail",
        "title": "Fibers > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#attribute-detail",
        "title": "Fibers > Attribute detail",
        "section": "Attribute detail",
        "text": "Helical angle in endocardium.\nHelical angle in epicardium.\nAngle to the outward transmural axis of the heart in endocardium.\nAngle to the outward transmural axis of the heart in epicardium.\nAngle to the outward transmural axis of the heart in left septum.\nAngle to the outward transmural axis of the heart in right septum.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#Fibers.alpha_endo",
        "title": "Fibers > Attribute detail > alpha_endo",
        "section": "Attribute detail > alpha_endo",
        "text": "Fibers.alpha_endo: pint.Quantity = 0\n\nHelical angle in endocardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#Fibers.alpha_epi",
        "title": "Fibers > Attribute detail > alpha_epi",
        "section": "Attribute detail > alpha_epi",
        "text": "Fibers.alpha_epi: pint.Quantity = 0\n\nHelical angle in epicardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#Fibers.beta_endo",
        "title": "Fibers > Attribute detail > beta_endo",
        "section": "Attribute detail > beta_endo",
        "text": "Fibers.beta_endo: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in endocardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#Fibers.beta_epi",
        "title": "Fibers > Attribute detail > beta_epi",
        "section": "Attribute detail > beta_epi",
        "text": "Fibers.beta_epi: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in epicardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#Fibers.beta_endo_septum",
        "title": "Fibers > Attribute detail > beta_endo_septum",
        "section": "Attribute detail > beta_endo_septum",
        "text": "Fibers.beta_endo_septum: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in left septum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Fibers",
        "href": "api/ansys/health/heart/settings/settings/Fibers.html#Fibers.beta_epi_septum",
        "title": "Fibers > Attribute detail > beta_epi_septum",
        "section": "Attribute detail > beta_epi_septum",
        "text": "Fibers.beta_epi_septum: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in right septum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#surfacemesh",
        "title": "SurfaceMesh",
        "section": "SurfaceMesh",
        "text": "Bases: pyvista.PolyData\nSurface class.\nSurfaceMesh\nSurfaceMesh\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#ansys.health.heart.objects.SurfaceMesh",
        "title": "SurfaceMesh > SurfaceMesh > SurfaceMesh",
        "section": "SurfaceMesh > SurfaceMesh",
        "text": "class ansys.health.heart.objects.SurfaceMesh(var_inp: pyvista.PolyData | numpy.ndarray | list | str | pathlib.Path = None, name: str = None, triangles: numpy.ndarray = None, nodes: numpy.ndarray = None, id: int = None, **kwargs)\n\nBases: pyvista.PolyData\n\nSurface class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#overview",
        "title": "SurfaceMesh > Overview",
        "section": "Overview",
        "text": "force_normals_inwards\nForce the cell ordering of the closed surface such that normals point inward.\nnodes\nNode coordinates.\ntriangles\nTriangular faces of the surface num_faces x 3.\ntriangles_global\nGlobal triangle IDs.\nboundary_edges\nBoundary edges of self.\nboundary_edges_global\nGlobal point IDs of boundary edges.\nnode_ids_triangles\nLocal node IDs sorted by earliest occurrence.\nglobal_node_ids_triangles\nGlobal node IDs from point data.\nname\nName of the surface.\nid\nID of the surface.\nOverview\nforce_normals_inwards\nnodes\ntriangles\nnum_faces\ntriangles_global\nboundary_edges\nboundary_edges_global\nnode_ids_triangles\nglobal_node_ids_triangles\nname\nid"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#import-detail",
        "title": "SurfaceMesh > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#property-detail",
        "title": "SurfaceMesh > Property detail",
        "section": "Property detail",
        "text": "Node coordinates.\nTriangular faces of the surface num_faces x 3.\nGlobal triangle IDs.\nBoundary edges of self.\nGlobal point IDs of boundary edges.\nLocal node IDs sorted by earliest occurrence.\nGlobal node IDs from point data.\nProperty detail\nnum_faces\nTries\nto\nuse\npoint_data[\"_global-point-ids\"]\nto\nretrieve\ntriangle\ndefinitions\nin\nglobal"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.nodes",
        "title": "SurfaceMesh > Property detail > nodes",
        "section": "Property detail > nodes",
        "text": "property SurfaceMesh.nodes\n\nNode coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.triangles",
        "title": "SurfaceMesh > Property detail > triangles",
        "section": "Property detail > triangles",
        "text": "property SurfaceMesh.triangles\n\nTriangular faces of the surface num_faces x 3.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.triangles_global",
        "title": "SurfaceMesh > Property detail > triangles_global",
        "section": "Property detail > triangles_global",
        "text": "property SurfaceMesh.triangles_global\n\nGlobal triangle IDs.\n\nReturns\n\nTries to use point_data[\"_global-point-ids\"] to retrieve\n\n\n\ntriangle definitions in global IDs.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.boundary_edges",
        "title": "SurfaceMesh > Property detail > boundary_edges",
        "section": "Property detail > boundary_edges",
        "text": "property SurfaceMesh.boundary_edges\n\nBoundary edges of self.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.boundary_edges_global",
        "title": "SurfaceMesh > Property detail > boundary_edges_global",
        "section": "Property detail > boundary_edges_global",
        "text": "property SurfaceMesh.boundary_edges_global\n\nGlobal point IDs of boundary edges.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.node_ids_triangles",
        "title": "SurfaceMesh > Property detail > node_ids_triangles",
        "section": "Property detail > node_ids_triangles",
        "text": "property SurfaceMesh.node_ids_triangles: numpy.ndarray\n\nLocal node IDs sorted by earliest occurrence.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.global_node_ids_triangles",
        "title": "SurfaceMesh > Property detail > global_node_ids_triangles",
        "section": "Property detail > global_node_ids_triangles",
        "text": "property SurfaceMesh.global_node_ids_triangles\n\nGlobal node IDs from point data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#attribute-detail",
        "title": "SurfaceMesh > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of the surface.\nID of the surface.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.name",
        "title": "SurfaceMesh > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "SurfaceMesh.name = None\n\nName of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.id",
        "title": "SurfaceMesh > Attribute detail > id",
        "section": "Attribute detail > id",
        "text": "SurfaceMesh.id: int = None\n\nID of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#method-detail",
        "title": "SurfaceMesh > Method detail",
        "section": "Method detail",
        "text": "Force the cell ordering of the closed surface such that normals point inward.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/SurfaceMesh",
        "href": "api/ansys/health/heart/objects/SurfaceMesh.html#SurfaceMesh.force_normals_inwards",
        "title": "SurfaceMesh > Method detail > force_normals_inwards",
        "section": "Method detail > force_normals_inwards",
        "text": "SurfaceMesh.force_normals_inwards()\n\nForce the cell ordering of the closed surface such that normals point inward.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#zerodsystem",
        "title": "ZeroDSystem",
        "section": "ZeroDSystem",
        "text": "0D circulation system model (for one cavity).\nZeroDSystem\nZeroDSystem"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#ansys.health.heart.post.system_model_post.ZeroDSystem",
        "title": "ZeroDSystem > ZeroDSystem > ZeroDSystem",
        "section": "ZeroDSystem > ZeroDSystem",
        "text": "class ansys.health.heart.post.system_model_post.ZeroDSystem(csv_path: str, ed_state: list[float, float], name: str = '')\n\n0D circulation system model (for one cavity).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#overview",
        "title": "ZeroDSystem > Overview",
        "section": "Overview",
        "text": "name\ned\ntime\npressure\nflow\nvolume\nOverview\nname\ned\ntime\npressure\nflow\nvolume"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#import-detail",
        "title": "ZeroDSystem > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#attribute-detail",
        "title": "ZeroDSystem > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#ZeroDSystem.name",
        "title": "ZeroDSystem > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "ZeroDSystem.name = ''\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#ZeroDSystem.ed",
        "title": "ZeroDSystem > Attribute detail > ed",
        "section": "Attribute detail > ed",
        "text": "ZeroDSystem.ed\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#ZeroDSystem.time",
        "title": "ZeroDSystem > Attribute detail > time",
        "section": "Attribute detail > time",
        "text": "ZeroDSystem.time\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#ZeroDSystem.pressure",
        "title": "ZeroDSystem > Attribute detail > pressure",
        "section": "Attribute detail > pressure",
        "text": "ZeroDSystem.pressure\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#ZeroDSystem.flow",
        "title": "ZeroDSystem > Attribute detail > flow",
        "section": "Attribute detail > flow",
        "text": "ZeroDSystem.flow\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/health/heart/post/system_model_post/ZeroDSystem.html#ZeroDSystem.volume",
        "title": "ZeroDSystem > Attribute detail > volume",
        "section": "Attribute detail > volume",
        "text": "ZeroDSystem.volume\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/utils/landmark_utils/index",
        "href": "api/ansys/health/heart/utils/landmark_utils/index.html#the-landmark_utilspy-module",
        "title": "The landmark_utils.py module",
        "section": "The landmark_utils.py module",
        "text": "The landmark_utils.py module\nlandmark_utils.py"
    },
    {
        "objectID": "api/ansys/health/heart/utils/landmark_utils/index",
        "href": "api/ansys/health/heart/utils/landmark_utils/index.html#summary",
        "title": "The landmark_utils.py module > Summary",
        "section": "Summary",
        "text": "compute_anatomy_axis\nCompute the long and short axes of the left ventricle.\ncompute_aha17\nCompute the AHA17 label for left ventricle elements.\ncompute_element_cs\nCompute elemental coordinate system for AHA elements.\nSummary\ncompute_anatomy_axis\ncompute_aha17\ncompute_element_cs"
    },
    {
        "objectID": "api/ansys/health/heart/utils/landmark_utils/index",
        "href": "api/ansys/health/heart/utils/landmark_utils/index.html#description",
        "title": "The landmark_utils.py module > Description",
        "section": "Description",
        "text": "Module for computing heart anatomical landmarks.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/utils/landmark_utils/index",
        "href": "api/ansys/health/heart/utils/landmark_utils/index.html#module-detail",
        "title": "The landmark_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Compute the long and short axes of the left ventricle.\nMitral valve center.\nAortic valve center.\nLeft ventricle epicardium apex point.\nRelative distance between the mitral valve center and apex,\nwhich is used for defining the center of the short axis.\n4CV, 2CV, and short-axis. Each dictionary contains center and normal.\nCompute the AHA17 label for left ventricle elements.\nHeart model.\nShort axis.\nLong 4CV axis.\nCompute 16 or 17 segments.\nLV and RV junction points. If these points are given, they defines the start of segment 1.\nIf they are not given, the start point is defined by rotating 60 degrees from the 4CV axis.\nAHA17 IDs. No concerned elements are assigned with np.nan.\nCompute elemental coordinate system for AHA elements.\nHeart model.\nShort axis.\nElements with AHA labels. Compute only on these elements.\nLongitudinal, radial, and circumferential vectors of each AHA element.\nModule detail\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:float\npython:tuple\npython:dict\npython:dict\npython:dict\ncenter\nnormal\nHeartModel\npython:dict\npython:dict\nLiteral\nnp.ndarray\npython:None\nnp.ndarray\nnp.nan\nHeartModel\npython:dict\nnp.ndarray\npython:tuple\nnp.ndarray\nnp.ndarray\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/health/heart/utils/landmark_utils/index",
        "href": "api/ansys/health/heart/utils/landmark_utils/index.html#landmark_utils.compute_anatomy_axis",
        "title": "The landmark_utils.py module > Module detail > compute_anatomy_axis",
        "section": "Module detail > compute_anatomy_axis",
        "text": "landmark_utils.compute_anatomy_axis(mv_center: numpy.ndarray, av_center: numpy.ndarray, apex: numpy.ndarray, first_cut_short_axis: float = 0.2) -> tuple[dict, dict, dict]\n\nCompute the long and short axes of the left ventricle.\n\nParameters\n\nmv_center\n\nnp.ndarray\n\nMitral valve center.\n\nav_center\n\nnp.ndarray\n\nAortic valve center.\n\napex\n\nnp.ndarray\n\nLeft ventricle epicardium apex point.\n\nfirst_cut_short_axis\n\npython:float, default: 0.2\n\nRelative distance between the mitral valve center and apex,\nwhich is used for defining the center of the short axis.\n\nReturns\n\npython:tuple[python:dict, python:dict, python:dict]\n\n4CV, 2CV, and short-axis. Each dictionary contains center and normal.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/landmark_utils/index",
        "href": "api/ansys/health/heart/utils/landmark_utils/index.html#landmark_utils.compute_aha17",
        "title": "The landmark_utils.py module > Module detail > compute_aha17",
        "section": "Module detail > compute_aha17",
        "text": "landmark_utils.compute_aha17(model: ansys.health.heart.models.HeartModel, short_axis: dict, l4cv_axis: dict, seg: Literal[16, 17] = 17, p_junction: numpy.ndarray = None) -> numpy.ndarray\n\nCompute the AHA17 label for left ventricle elements.\n\nParameters\n\nmodel\n\nHeartModel\n\nHeart model.\n\nshort_axis\n\npython:dict\n\nShort axis.\n\nl4cv_axis\n\npython:dict\n\nLong 4CV axis.\n\nseg\n\nLiteral[16, 17], default: 17\n\nCompute 16 or 17 segments.\n\np_junction\n\nnp.ndarray, default: python:None\n\nLV and RV junction points. If these points are given, they defines the start of segment 1.\nIf they are not given, the start point is defined by rotating 60 degrees from the 4CV axis.\n\nReturns\n\nnp.ndarray\n\nAHA17 IDs. No concerned elements are assigned with np.nan.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/landmark_utils/index",
        "href": "api/ansys/health/heart/utils/landmark_utils/index.html#landmark_utils.compute_element_cs",
        "title": "The landmark_utils.py module > Module detail > compute_element_cs",
        "section": "Module detail > compute_element_cs",
        "text": "landmark_utils.compute_element_cs(model: ansys.health.heart.models.HeartModel, short_axis: dict, aha_element: numpy.ndarray) -> tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nCompute elemental coordinate system for AHA elements.\n\nParameters\n\nmodel\n\nHeartModel\n\nHeart model.\n\nshort_axis\n\npython:dict\n\nShort axis.\n\naha_element\n\nnp.ndarray\n\nElements with AHA labels. Compute only on these elements.\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray, np.ndarray]\n\nLongitudinal, radial, and circumferential vectors of each AHA element.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/index",
        "href": "api/ansys/health/heart/writer/heart_decks/index.html#the-heart_deckspy-module",
        "title": "The heart_decks.py module",
        "section": "The heart_decks.py module",
        "text": "The heart_decks.py module\nheart_decks.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/index",
        "href": "api/ansys/health/heart/writer/heart_decks/index.html#summary",
        "title": "The heart_decks.py module > Summary",
        "section": "Summary",
        "text": "BaseDecks\nClass where each attribute corresponds to its respective deck.\nMechanicsDecks\nUseful decks for a mechanics simulation.\nFiberGenerationDecks\nUseful decks for fiber generation.\nPurkinjeGenerationDecks\nUseful decks for Purkinje generation.\nElectrophysiologyDecks\nUseful decks for electrophysiology simulations.\nElectroMechanicsDecks\nUseful decks for a electromechanics simulation.\nSummary\nBaseDecks\nMechanicsDecks\nFiberGenerationDecks\nPurkinjeGenerationDecks\nElectrophysiologyDecks\nElectroMechanicsDecks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/index",
        "href": "api/ansys/health/heart/writer/heart_decks/index.html#description",
        "title": "The heart_decks.py module > Description",
        "section": "Description",
        "text": "Defines LS-DYNA decks for heart modeling.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#heartmodel",
        "title": "HeartModel",
        "section": "HeartModel",
        "text": "Parent class for heart models.\nHeartModel\nHeartModel"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#ansys.health.heart.models.HeartModel",
        "title": "HeartModel > HeartModel > HeartModel",
        "section": "HeartModel > HeartModel",
        "text": "class ansys.health.heart.models.HeartModel(working_directory: pathlib.Path | str = None)\n\nParent class for heart models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#overview",
        "title": "HeartModel > Overview",
        "section": "Overview",
        "text": "assign_conduction_paths\nAssign conduction paths to the model.\ncreate_part_by_ids\nCreate a part by element IDs.\nload_input\nLoad an input model.\nmesh_volume\nRemesh the input model and fill the volume.\nget_part\nGet a specific part based on a part name.\nadd_part\nDynamically add a part as an attribute to the object.\nremove_part\nRemove a part with a specific name from the model.\nsummary\nGet summary information of the model as a dictionary.\nplot_mesh\nPlot the volume mesh of the heart model.\nplot_part\nPlot a part in the mesh.\nplot_fibers\nPlot the mesh and fibers as streamlines.\nplot_surfaces\nPlot all surfaces in the model.\nplot_purkinje\nPlot the mesh and Purkinje network.\nsave_model\nSave the model and necessary information to reconstruct.\nload_model_from_mesh\nLoad a model from an existing VTU file and part information dictionary.\nupdate\nUpdate the model and add required features.\nget_apex_node_set\nGet a nodeset around the apex point.\ncreate_stiff_ventricle_base\nUse universal coordinates to generate a stiff base region.\ncreate_atrial_stiff_ring\nCreate a part for solids close to the atrial caps.\nparts\nList of parts.\npart_names\nList of part names.\npart_ids\nList of used part IDs.\nsurfaces\nList of all defined surfaces.\nsurface_names\nList of all defined surface names.\nsurface_ids\nList of all defined surface IDs.\ncavities\nList of all cavities in the model.\nall_caps\nList of all caps in the model.\npart_name_to_part_id\nDictionary that maps the part name to the part ID.\npart_id_to_part_name\nDictionary that maps the part ID to the part name.\nsurface_name_to_surface_id\nDictionary that maps the surface name to the surface ID.\nsurface_id_to_surface_name\nDictionary that maps the surface ID to the surface name.\nl4cv_axis\nl4cv axis.\nl2cv_axis\nl2cv axis.\nshort_axis\nl2cv axis.\ncap_centroids\nList of cap centroids.\nconduction_paths\nList of conduction paths.\nconduction_mesh\nConduction mesh.\nworkdir\nWorking directory.\nmesh\nComputational mesh.\nfluid_mesh\nGenerated fluid mesh.\nelectrodes\nElectrodes positions for ECG computing.\n__str__\nRepresent self as string.\nOverview\nassign_conduction_paths\ncreate_part_by_ids\nload_input\nmesh_volume\nget_part\nadd_part\nremove_part\nsummary\nplot_mesh\nplot_part\nplot_fibers\nplot_surfaces\nplot_purkinje\nsave_model\nload_model_from_mesh\nupdate\nget_apex_node_set\ncreate_stiff_ventricle_base\ncreate_atrial_stiff_ring\nparts\npart_names\npart_ids\nsurfaces\nsurface_names\nsurface_ids\ncavities\nall_caps\npart_name_to_part_id\npart_id_to_part_name\nsurface_name_to_surface_id\nsurface_id_to_surface_name\nl4cv_axis\nl2cv_axis\nshort_axis\ncap_centroids\nconduction_paths\nconduction_mesh\nworkdir\nmesh\nfluid_mesh\nelectrodes\n__str__"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#import-detail",
        "title": "HeartModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#property-detail",
        "title": "HeartModel > Property detail",
        "section": "Property detail",
        "text": "List of parts.\nList of part names.\nList of used part IDs.\nList of all defined surfaces.\nList of all defined surface names.\nList of all defined surface IDs.\nList of all cavities in the model.\nList of all caps in the model.\nDictionary that maps the part name to the part ID.\nDictionary that maps the part ID to the part name.\nDictionary that maps the surface name to the surface ID.\nDictionary that maps the surface ID to the surface name.\nl4cv axis.\nl2cv axis.\nl2cv axis.\nList of cap centroids.\nList of conduction paths.\nConduction mesh.\nProperty detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.parts",
        "title": "HeartModel > Property detail > parts",
        "section": "Property detail > parts",
        "text": "property HeartModel.parts: List[ansys.health.heart.parts.Part]\n\nList of parts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.part_names",
        "title": "HeartModel > Property detail > part_names",
        "section": "Property detail > part_names",
        "text": "property HeartModel.part_names: List[str]\n\nList of part names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.part_ids",
        "title": "HeartModel > Property detail > part_ids",
        "section": "Property detail > part_ids",
        "text": "property HeartModel.part_ids: List[int]\n\nList of used part IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.surfaces",
        "title": "HeartModel > Property detail > surfaces",
        "section": "Property detail > surfaces",
        "text": "property HeartModel.surfaces: List[ansys.health.heart.objects.SurfaceMesh]\n\nList of all defined surfaces.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.surface_names",
        "title": "HeartModel > Property detail > surface_names",
        "section": "Property detail > surface_names",
        "text": "property HeartModel.surface_names: List[str]\n\nList of all defined surface names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.surface_ids",
        "title": "HeartModel > Property detail > surface_ids",
        "section": "Property detail > surface_ids",
        "text": "property HeartModel.surface_ids: List[str]\n\nList of all defined surface IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.cavities",
        "title": "HeartModel > Property detail > cavities",
        "section": "Property detail > cavities",
        "text": "property HeartModel.cavities: List[ansys.health.heart.objects.Cavity]\n\nList of all cavities in the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.all_caps",
        "title": "HeartModel > Property detail > all_caps",
        "section": "Property detail > all_caps",
        "text": "property HeartModel.all_caps: list[ansys.health.heart.objects.Cap]\n\nList of all caps in the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.part_name_to_part_id",
        "title": "HeartModel > Property detail > part_name_to_part_id",
        "section": "Property detail > part_name_to_part_id",
        "text": "property HeartModel.part_name_to_part_id: dict\n\nDictionary that maps the part name to the part ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.part_id_to_part_name",
        "title": "HeartModel > Property detail > part_id_to_part_name",
        "section": "Property detail > part_id_to_part_name",
        "text": "property HeartModel.part_id_to_part_name: dict\n\nDictionary that maps the part ID to the part name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.surface_name_to_surface_id",
        "title": "HeartModel > Property detail > surface_name_to_surface_id",
        "section": "Property detail > surface_name_to_surface_id",
        "text": "property HeartModel.surface_name_to_surface_id: dict\n\nDictionary that maps the surface name to the surface ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.surface_id_to_surface_name",
        "title": "HeartModel > Property detail > surface_id_to_surface_name",
        "section": "Property detail > surface_id_to_surface_name",
        "text": "property HeartModel.surface_id_to_surface_name: dict\n\nDictionary that maps the surface ID to the surface name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.l4cv_axis",
        "title": "HeartModel > Property detail > l4cv_axis",
        "section": "Property detail > l4cv_axis",
        "text": "property HeartModel.l4cv_axis: dict\n\nl4cv axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.l2cv_axis",
        "title": "HeartModel > Property detail > l2cv_axis",
        "section": "Property detail > l2cv_axis",
        "text": "property HeartModel.l2cv_axis: dict\n\nl2cv axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.short_axis",
        "title": "HeartModel > Property detail > short_axis",
        "section": "Property detail > short_axis",
        "text": "property HeartModel.short_axis: dict\n\nl2cv axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.cap_centroids",
        "title": "HeartModel > Property detail > cap_centroids",
        "section": "Property detail > cap_centroids",
        "text": "property HeartModel.cap_centroids\n\nList of cap centroids.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.conduction_paths",
        "title": "HeartModel > Property detail > conduction_paths",
        "section": "Property detail > conduction_paths",
        "text": "property HeartModel.conduction_paths\n\nList of conduction paths.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.conduction_mesh",
        "title": "HeartModel > Property detail > conduction_mesh",
        "section": "Property detail > conduction_mesh",
        "text": "property HeartModel.conduction_mesh\n\nConduction mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#attribute-detail",
        "title": "HeartModel > Attribute detail",
        "section": "Attribute detail",
        "text": "Working directory.\nComputational mesh.\nGenerated fluid mesh.\nElectrodes positions for ECG computing.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.workdir",
        "title": "HeartModel > Attribute detail > workdir",
        "section": "Attribute detail > workdir",
        "text": "HeartModel.workdir\n\nWorking directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.mesh",
        "title": "HeartModel > Attribute detail > mesh",
        "section": "Attribute detail > mesh",
        "text": "HeartModel.mesh\n\nComputational mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.fluid_mesh",
        "title": "HeartModel > Attribute detail > fluid_mesh",
        "section": "Attribute detail > fluid_mesh",
        "text": "HeartModel.fluid_mesh\n\nGenerated fluid mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.electrodes",
        "title": "HeartModel > Attribute detail > electrodes",
        "section": "Attribute detail > electrodes",
        "text": "HeartModel.electrodes: List[ansys.health.heart.objects.Point] = []\n\nElectrodes positions for ECG computing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#method-detail",
        "title": "HeartModel > Method detail",
        "section": "Method detail",
        "text": "Assign conduction paths to the model.\nList of conduction beams.\nIf conduction paths are already defined, they are removed.\nRepresent self as string.\nCreate a part by element IDs.\nList of element IDs.\nPart name.\nPart if successful.\nLoad an input model.\nInput surface mesh represented by a VTK PolyData object.\nPart definitions of the input model. Each part is enclosed by N number of boundaries.\nScalar used to identify boundaries.\nRemesh the input model and fill the volume.\nWhether to use the non-manifold mesher.\nWhether to overwrite the existing MSH.H5 mesh.\nGlobal mesh size for the generated mesh.\nPath to the generated Fluent MSH.H5 mesh.\nDictionary specifying the target mesh size for each part.\nGlobal size for setting up the size-field for the shrink-wrap algorithm.\nPer part size for setting up the size-field for the shrink-wrap algorithm.\nWhen the input surfaces are non-manifold, the wrapper tries\nto reconstruct the surface and parts. Inevitably this leads to\nreconstruction errors. Nevertheless, in many instances, this approach is\nmore robust than meshing from a manifold surface. Moreover, any clear interface\nbetween parts is potentially lost.\nWhen the mesh_size_per_part attribute is incomplete, remaining part sizes\ndefault to the global mesh size. This is an experimental setting. Any wrap\nsizes given as input arguments are ignored when the wrapper is not used.\nGet a specific part based on a part name.\nDynamically add a part as an attribute to the object.\nRemove a part with a specific name from the model.\nGet summary information of the model as a dictionary.\nPlot the volume mesh of the heart model.\nWhether to plot the edges.\nColor by cell/point data.\nPlot a part in the mesh.\nPart to highlight in the mesh.\nPlot the mesh and fibers as streamlines.\nWhether to plot the streamlines on the raw mesh.\nNumber of seed points. While the default is 1000, using 5000\nis recommended.\nPlot all surfaces in the model.\nImport modules and load model.\nPlot the model.\nPlot the mesh and Purkinje network.\nSave the model and necessary information to reconstruct.\nPath to the model.\nThe mesh of the heart model is saved as a VTU file. An\nadditional partinfo.json file is written to reconstruct\nthe heart model from the VTU file.\nLoad a model from an existing VTU file and part information dictionary.\nPath to the VTU file containing the mesh.\nPath to the JSON file that contains the part information for reconstructing the model.\nUpdate the model and add required features.\nSynchronize input parts to model parts.\nExtract septum elements from the left ventricle.\nAssign elements to parts.\nAssign surfaces to each part.\nValidate parts and surfaces.\nAssign cavities to parts.\nUpdate cap types.\nValidate cap names.\nExtract apical points.\nCompute heart axis.\nAdd placeholder data for fiber and sheet directions.\nGet a nodeset around the apex point.\nOn which part.\nOn surface or in mesh.\nSearch in radius.\nApex nodeset\nUse universal coordinates to generate a stiff base region.\nIf the uvc_l value is larger than this threshold in the left ventricle,\nit is set as stiff material.\nIf the uvc_l value is larger than this threshold in the right ventricle,\nit is set to a stiff\nmaterial.\niso=ISO(itype=1, beta=2, kappa=10, mu1=0.1, alpha1=2)\nMaterial to assign.\nPart associated with the stiff base region.\nCreate a part for solids close to the atrial caps.\nInfluence region.\nPart of atrial rings if created.\nPart created is passive and isotropic. The material must be defined.\nMethod detail\nConductionBeams\npython:list\nConductionBeams\nList\npython:int\npython:str\nUnion\npython:None\nanatomy.Part\npv.PolyData\nPolyData\npython:dict\npython:str\npython:False\npython:True\npython:float\npython:str\npython:None\npython:dict\npython:None\npython:float\npython:dict\npython:None\nmesh_size_per_part\npython:True\npython:str\n'_volume-id'\nanatomy.Part\npython:False\npython:int\n1000\n5000\npython:str\npartinfo.json\npython:str\npython:str\nLiteral\nLiteral\npython:float\nnp.ndarray\npython:float\nuvc_l\npython:float\nuvc_l\nMechanicalMaterialModel\nMAT295\nanatomy.Part\nfoat\nUnion\npython:None\nanatomy.Part"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.assign_conduction_paths",
        "title": "HeartModel > Method detail > assign_conduction_paths",
        "section": "Method detail > assign_conduction_paths",
        "text": "HeartModel.assign_conduction_paths(paths: ansys.health.heart.pre.conduction_path.ConductionPath | list[ansys.health.heart.pre.conduction_path.ConductionPath])\n\nAssign conduction paths to the model.\n\nParameters\n\nbeams\n\nConductionBeams | python:list[ConductionBeams]\n\nList of conduction beams.\n\nNotes\n\nIf conduction paths are already defined, they are removed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.__str__",
        "title": "HeartModel > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "HeartModel.__str__()\n\nRepresent self as string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.create_part_by_ids",
        "title": "HeartModel > Method detail > create_part_by_ids",
        "section": "Method detail > create_part_by_ids",
        "text": "HeartModel.create_part_by_ids(eids: List[int], name: str) -> None | ansys.health.heart.parts.Part\n\nCreate a part by element IDs.\n\nParameters\n\neids\n\nList[python:int]\n\nList of element IDs.\n\nname\n\npython:str\n\nPart name.\n\nReturns\n\nUnion[python:None, anatomy.Part]\n\nPart if successful.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.load_input",
        "title": "HeartModel > Method detail > load_input",
        "section": "Method detail > load_input",
        "text": "HeartModel.load_input(input_vtp: pyvista.PolyData, part_definitions: dict, scalar: str)\n\nLoad an input model.\n\nParameters\n\ninput_vtp\n\npv.PolyData\n\nInput surface mesh represented by a VTK PolyData object.\n\npart_definitions\n\npython:dict\n\nPart definitions of the input model. Each part is enclosed by N number of boundaries.\n\nscalar\n\npython:str\n\nScalar used to identify boundaries.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.mesh_volume",
        "title": "HeartModel > Method detail > mesh_volume",
        "section": "Method detail > mesh_volume",
        "text": "HeartModel.mesh_volume(use_wrapper: bool = False, overwrite_existing_mesh: bool = True, global_mesh_size: float = 1.5, path_to_fluent_mesh: str = None, mesh_size_per_part: dict = None, _global_wrap_size: float = 1.5, _wrap_size_per_part: dict = None) -> ansys.health.heart.objects.Mesh\n\nRemesh the input model and fill the volume.\n\nParameters\n\nuse_wrapper\n\nbool, default: python:False\n\nWhether to use the non-manifold mesher.\n\noverwrite_existing_mesh\n\nbool, default: python:True\n\nWhether to overwrite the existing MSH.H5 mesh.\n\nglobal_mesh_size\n\npython:float, default: 1.5\n\nGlobal mesh size for the generated mesh.\n\npath_to_fluent_mesh\n\npython:str, default: python:None\n\nPath to the generated Fluent MSH.H5 mesh.\n\nmesh_size_per_part\n\npython:dict, default: python:None\n\nDictionary specifying the target mesh size for each part.\n\n_global_wrap_size\n\npython:float, default: 1.5\n\nGlobal size for setting up the size-field for the shrink-wrap algorithm.\n\n_wrap_size_per_part\n\npython:dict, default: python:None\n\nPer part size for setting up the size-field for the shrink-wrap algorithm.\n\nNotes\n\nWhen the input surfaces are non-manifold, the wrapper tries\nto reconstruct the surface and parts. Inevitably this leads to\nreconstruction errors. Nevertheless, in many instances, this approach is\nmore robust than meshing from a manifold surface. Moreover, any clear interface\nbetween parts is potentially lost.\n\nWhen the mesh_size_per_part attribute is incomplete, remaining part sizes\ndefault to the global mesh size. This is an experimental setting. Any wrap\nsizes given as input arguments are ignored when the wrapper is not used.\n\nExamples\n\n>>> from ansys.health.heart.models import HeartModel\n>>> model = HeartModel()\n>>> model.load_input(geom, part_definitions, scalar)\n>>> # mesh the volume with a global size of 1.5 and size of 1 for the left ventricle.\n>>> model.mesh_volume(\n...     use_wrapper=True,\n...     global_mesh_size=1.5,\n...     path_to_fluent_mesh=\"simulation-mesh.msh.h5\",\n...     mesh_size_per_part={\"Left ventricle\": 1},\n... )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.get_part",
        "title": "HeartModel > Method detail > get_part",
        "section": "Method detail > get_part",
        "text": "HeartModel.get_part(name: str, by_substring: bool = False) -> ansys.health.heart.parts.Part | None\n\nGet a specific part based on a part name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.add_part",
        "title": "HeartModel > Method detail > add_part",
        "section": "Method detail > add_part",
        "text": "HeartModel.add_part(part_name: str) -> None\n\nDynamically add a part as an attribute to the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.remove_part",
        "title": "HeartModel > Method detail > remove_part",
        "section": "Method detail > remove_part",
        "text": "HeartModel.remove_part(part_name: str) -> None\n\nRemove a part with a specific name from the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.summary",
        "title": "HeartModel > Method detail > summary",
        "section": "Method detail > summary",
        "text": "HeartModel.summary() -> dict\n\nGet summary information of the model as a dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.plot_mesh",
        "title": "HeartModel > Method detail > plot_mesh",
        "section": "Method detail > plot_mesh",
        "text": "HeartModel.plot_mesh(show_edges: bool = True, color_by: str = '_volume-id')\n\nPlot the volume mesh of the heart model.\n\nParameters\n\nshow_edges\n\nbool, default: python:True\n\nWhether to plot the edges.\n\ncolor_by\n\npython:str, default: '_volume-id'\n\nColor by cell/point data.\n\nExamples\n\n>>> import ansys.health.heart.models as models\n>>> model = models.HeartModel.load_model(\"heart_model.pickle\")\n>>> model.plot_mesh(show_edges=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.plot_part",
        "title": "HeartModel > Method detail > plot_part",
        "section": "Method detail > plot_part",
        "text": "HeartModel.plot_part(part: ansys.health.heart.parts.Part)\n\nPlot a part in the mesh.\n\nParameters\n\npart\n\nanatomy.Part\n\nPart to highlight in the mesh.\n\nExamples\n\n>>> import ansys.health.heart.models as models\n>>> model = models.HeartModel.load_model(\"my_model.pickle\")\n>>> model.part(model.left_ventricle)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.plot_fibers",
        "title": "HeartModel > Method detail > plot_fibers",
        "section": "Method detail > plot_fibers",
        "text": "HeartModel.plot_fibers(n_seed_points: int = 1000)\n\nPlot the mesh and fibers as streamlines.\n\nParameters\n\nplot_raw_mesh\n\nbool, default: python:False\n\nWhether to plot the streamlines on the raw mesh.\n\nn_seed_points\n\npython:int, default: 1000\n\nNumber of seed points. While the default is 1000, using 5000\nis recommended.\n\nExamples\n\n>>> import ansys.health.heart.models as models\n>>> model = models.HeartModel.load_model(\"my_model.pickle\")\n>>> model.plot_fibers(n_seed_points=5000)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.plot_surfaces",
        "title": "HeartModel > Method detail > plot_surfaces",
        "section": "Method detail > plot_surfaces",
        "text": "HeartModel.plot_surfaces(show_edges: bool = True)\n\nPlot all surfaces in the model.\n\nExamples\n\nImport modules and load model.\n\n>>> import ansys.health.heart.models as models\n>>> model = models.HeartModel.load_model(\"my_model.pickle\")\n\nPlot the model.\n\n>>> model.plot(show_edges=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.plot_purkinje",
        "title": "HeartModel > Method detail > plot_purkinje",
        "section": "Method detail > plot_purkinje",
        "text": "HeartModel.plot_purkinje()\n\nPlot the mesh and Purkinje network.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.save_model",
        "title": "HeartModel > Method detail > save_model",
        "section": "Method detail > save_model",
        "text": "HeartModel.save_model(filename: str)\n\nSave the model and necessary information to reconstruct.\n\nParameters\n\nfilename\n\npython:str\n\nPath to the model.\n\nNotes\n\nThe mesh of the heart model is saved as a VTU file. An\nadditional partinfo.json file is written to reconstruct\nthe heart model from the VTU file.\n\nExamples\n\n>>> model.save_model(\"my-heart-model.vtu\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.load_model_from_mesh",
        "title": "HeartModel > Method detail > load_model_from_mesh",
        "section": "Method detail > load_model_from_mesh",
        "text": "HeartModel.load_model_from_mesh(filename_mesh: str, filename_part_info: str)\n\nLoad a model from an existing VTU file and part information dictionary.\n\nParameters\n\nfilename_mesh\n\npython:str\n\nPath to the VTU file containing the mesh.\n\nfilename_part_info\n\npython:str\n\nPath to the JSON file that contains the part information for reconstructing the model.\n\nExamples\n\n>>> from ansys.health.heart.models import FullHeart\n>>> model: FullHeart = FullHeart()\n>>> model.load_model_from_mesh(\"mesh.vtu\", \"mesh.partinfo.json\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.update",
        "title": "HeartModel > Method detail > update",
        "section": "Method detail > update",
        "text": "HeartModel.update()\n\nUpdate the model and add required features.\n\nNotes\n\nSynchronize input parts to model parts.\n\nExtract septum elements from the left ventricle.\n\nAssign elements to parts.\n\nAssign surfaces to each part.\n\nValidate parts and surfaces.\n\nAssign cavities to parts.\n\nUpdate cap types.\n\nValidate cap names.\n\nExtract apical points.\n\nCompute heart axis.\n\nAdd placeholder data for fiber and sheet directions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.get_apex_node_set",
        "title": "HeartModel > Method detail > get_apex_node_set",
        "section": "Method detail > get_apex_node_set",
        "text": "HeartModel.get_apex_node_set(part: Literal['left', 'right'] = 'left', option: Literal['endocardium', 'epicardium', 'myocardium'] = 'epicardium', radius: float = 3) -> numpy.ndarray\n\nGet a nodeset around the apex point.\n\nParameters\n\npart\n\nLiteral[“left”, “right”], default: “left”\n\nOn which part.\n\noption\n\nLiteral[“endocardium”, “epicardium”, “myocardium”], default: “epicardium”\n\nOn surface or in mesh.\n\nradius\n\npython:float, default: 3\n\nSearch in radius.\n\nReturns\n\nnp.ndarray\n\nApex nodeset\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.create_stiff_ventricle_base",
        "title": "HeartModel > Method detail > create_stiff_ventricle_base",
        "section": "Method detail > create_stiff_ventricle_base",
        "text": "HeartModel.create_stiff_ventricle_base(threshold_left_ventricle: float = 0.9, threshold_right_ventricle: float = 0.95, stiff_material: ansys.health.heart.settings.material.material.MechanicalMaterialModel = Mat295(rho=0.001, iso=ISO(itype=1, beta=2, kappa=10, mu1=0.1, alpha1=2))) -> None | ansys.health.heart.parts.Part\n\nUse universal coordinates to generate a stiff base region.\n\nParameters\n\nthreshold_left_ventricle\n\npython:float, default: 0.9\n\nIf the uvc_l value is larger than this threshold in the left ventricle,\nit is set as stiff material.\n\nthreshold_right_ventricle\n\npython:float, default: 0.95\n\nIf the uvc_l value is larger than this threshold in the right ventricle,\nit is set to a stiff\nmaterial.\n\nstiff_material\n\nMechanicalMaterialModel, default: MAT295(rho=0.001,\n\niso=ISO(itype=1, beta=2, kappa=10, mu1=0.1, alpha1=2)\nMaterial to assign.\n\nReturns\n\nanatomy.Part\n\nPart associated with the stiff base region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/HeartModel",
        "href": "api/ansys/health/heart/models/HeartModel.html#HeartModel.create_atrial_stiff_ring",
        "title": "HeartModel > Method detail > create_atrial_stiff_ring",
        "section": "Method detail > create_atrial_stiff_ring",
        "text": "HeartModel.create_atrial_stiff_ring(radius: float = 2) -> None | ansys.health.heart.parts.Part\n\nCreate a part for solids close to the atrial caps.\n\nParameters\n\nradius\n\nfoat, default: 2\n\nInfluence region.\n\nReturns\n\nUnion[python:None, anatomy.Part]\n\nPart of atrial rings if created.\n\nNotes\n\nPart created is passive and isotropic. The material must be defined.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/index",
        "href": "api/ansys/health/heart/writer/material_keywords/index.html#the-material_keywordspy-module",
        "title": "The material_keywords.py module",
        "section": "The material_keywords.py module",
        "text": "The material_keywords.py module\nmaterial_keywords.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/index",
        "href": "api/ansys/health/heart/writer/material_keywords/index.html#summary",
        "title": "The material_keywords.py module > Summary",
        "section": "Summary",
        "text": "MaterialCap\nMaterial of the closing cap/valves.\nMaterialNeoHook\nMaterial for the atrium.\nMaterialHGOMyocardium\nHGO material model, which is derived from Mat295.\nactive_curve\nCompute various (normalized) curves used for the active module.\nSummary\nMaterialCap\nMaterialNeoHook\nMaterialHGOMyocardium\nactive_curve"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/index",
        "href": "api/ansys/health/heart/writer/material_keywords/index.html#description",
        "title": "The material_keywords.py module > Description",
        "section": "Description",
        "text": "Use PyDYNA keywords module to create commonly used material cards and their default values.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/index",
        "href": "api/ansys/health/heart/writer/material_keywords/index.html#notes",
        "title": "The material_keywords.py module > Notes",
        "section": "Notes",
        "text": "Examples of material cards include Mat295, Mat077, MatNull.\nNotes"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/index",
        "href": "api/ansys/health/heart/writer/material_keywords/index.html#module-detail",
        "title": "The material_keywords.py module > Module detail",
        "section": "Module detail",
        "text": "Compute various (normalized) curves used for the active module.\nType of curve to compute.\nModule detail\npython:str"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/index",
        "href": "api/ansys/health/heart/writer/material_keywords/index.html#material_keywords.active_curve",
        "title": "The material_keywords.py module > Module detail > active_curve",
        "section": "Module detail > active_curve",
        "text": "material_keywords.active_curve(curve_type: str = 'Strocchi2020', endtime: float = 15) -> tuple[numpy.ndarray, numpy.ndarray]\n\nCompute various (normalized) curves used for the active module.\n\nParameters\n\ncurve_name\n\npython:str\n\nType of curve to compute.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/index",
        "href": "api/ansys/health/heart/post/klotz_curve/index.html#the-klotz_curvepy-module",
        "title": "The klotz_curve.py module",
        "section": "The klotz_curve.py module",
        "text": "The klotz_curve.py module\nklotz_curve.py"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/index",
        "href": "api/ansys/health/heart/post/klotz_curve/index.html#summary",
        "title": "The klotz_curve.py module > Summary",
        "section": "Summary",
        "text": "EDPVR\nEnd diastolic pressure-volume relation.\nSummary\nEDPVR"
    },
    {
        "objectID": "api/ansys/health/heart/post/klotz_curve/index",
        "href": "api/ansys/health/heart/post/klotz_curve/index.html#description",
        "title": "The klotz_curve.py module > Description",
        "section": "Description",
        "text": "Klotz curve module.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#iso",
        "title": "ISO",
        "section": "ISO",
        "text": "Isotropic module of MAT_295.\nISO\nISO"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ansys.health.heart.settings.material.material.ISO",
        "title": "ISO > ISO > ISO",
        "section": "ISO > ISO",
        "text": "class ansys.health.heart.settings.material.material.ISO\n\nIsotropic module of MAT_295.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#overview",
        "title": "ISO > Overview",
        "section": "Overview",
        "text": "itype\nIsotropic material type.\nbeta\nVolumetric response coefficient.\nnu\nPossion’s ratio.\nk1\nk1 for HGO model.\nk2\nk2 for HGO model.\nmu1\nmu1 for Ogden model.\nalpha1\nalpha1 for Ogden model.\nkappa\nBulk modulus.\n__post_init__\nTest inputs.\nOverview\nitype\nbeta\nnu\nk1\nk2\nmu1\nalpha1\nkappa\n__post_init__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#import-detail",
        "title": "ISO > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#attribute-detail",
        "title": "ISO > Attribute detail",
        "section": "Attribute detail",
        "text": "Isotropic material type.\nVolumetric response coefficient.\nPossion’s ratio.\nk1 for HGO model.\nk2 for HGO model.\nmu1 for Ogden model.\nalpha1 for Ogden model.\nBulk modulus.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.itype",
        "title": "ISO > Attribute detail > itype",
        "section": "Attribute detail > itype",
        "text": "ISO.itype: int = -3\n\nIsotropic material type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.beta",
        "title": "ISO > Attribute detail > beta",
        "section": "Attribute detail > beta",
        "text": "ISO.beta: float = 0.0\n\nVolumetric response coefficient.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.nu",
        "title": "ISO > Attribute detail > nu",
        "section": "Attribute detail > nu",
        "text": "ISO.nu: float = 0.499\n\nPossion’s ratio.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.k1",
        "title": "ISO > Attribute detail > k1",
        "section": "Attribute detail > k1",
        "text": "ISO.k1: float = None\n\nk1 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.k2",
        "title": "ISO > Attribute detail > k2",
        "section": "Attribute detail > k2",
        "text": "ISO.k2: float = None\n\nk2 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.mu1",
        "title": "ISO > Attribute detail > mu1",
        "section": "Attribute detail > mu1",
        "text": "ISO.mu1: float = None\n\nmu1 for Ogden model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.alpha1",
        "title": "ISO > Attribute detail > alpha1",
        "section": "Attribute detail > alpha1",
        "text": "ISO.alpha1: float = None\n\nalpha1 for Ogden model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.kappa",
        "title": "ISO > Attribute detail > kappa",
        "section": "Attribute detail > kappa",
        "text": "ISO.kappa: float = None\n\nBulk modulus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#method-detail",
        "title": "ISO > Method detail",
        "section": "Method detail",
        "text": "Test inputs.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ISO",
        "href": "api/ansys/health/heart/settings/material/material/ISO.html#ISO.__post_init__",
        "title": "ISO > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "ISO.__post_init__()\n\nTest inputs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/simulator/sg_execution_times",
        "href": "examples/simulator/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "76:22.066 total execution time for 3 files from examplessimulator:\nExample\nTime\nMem (MB)\nsphx_glr_examples_simulator_ep-mechanics-simulator-fullheart.py (ep-mechanics-simulator-fullheart.py)\n60:04.222\n0.0\nsphx_glr_examples_simulator_mechanics-simulator-leftventricle_pr.py (mechanics-simulator-leftventricle_pr.py)\n08:22.170\n0.0\nsphx_glr_examples_simulator_ep-simulator-fullheart_rodero.py (ep-simulator-fullheart_rodero.py)\n07:55.673\n0.0\nComputation times\nep-mechanics-simulator-fullheart.py\nmechanics-simulator-leftventricle_pr.py\nep-simulator-fullheart_rodero.py"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Thank you for your interest in contributing to PyHeart. Contributions for\nmaking the project better can include fixing bugs, adding new features, and\nimproving the documentation.\nThis project adheres to the Contributor Covenant Code of Conduct. By\nparticipating, you agree to uphold this code of conduct.\nOverall guidance on contributing to a PyAnsys repository appears in\nContributing\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyAnsys Heart.\nThe following contribution information is specific to PyAnsys Heart. Start by\nselecting your role in the project:\nReport bugs, suggest features, and ask questions.\nImprove the documentation and write new content.\nFix bugs, add new features, and improve the codebase.\nContribute"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AttrDict",
        "href": "api/ansys/health/heart/settings/settings/AttrDict.html#attrdict",
        "title": "AttrDict",
        "section": "AttrDict",
        "text": "Bases: dict\nDictionary subclass whose entries can be accessed by attributes as well as normally.\nAttrDict\nAttrDict\ndict"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AttrDict",
        "href": "api/ansys/health/heart/settings/settings/AttrDict.html#ansys.health.heart.settings.settings.AttrDict",
        "title": "AttrDict > AttrDict > AttrDict",
        "section": "AttrDict > AttrDict",
        "text": "class ansys.health.heart.settings.settings.AttrDict(*args, **kwargs)\n\nBases: dict\n\nDictionary subclass whose entries can be accessed by attributes as well as normally.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AttrDict",
        "href": "api/ansys/health/heart/settings/settings/AttrDict.html#overview",
        "title": "AttrDict > Overview",
        "section": "Overview",
        "text": "__dict__\nOverview\n__dict__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AttrDict",
        "href": "api/ansys/health/heart/settings/settings/AttrDict.html#import-detail",
        "title": "AttrDict > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AttrDict",
        "href": "api/ansys/health/heart/settings/settings/AttrDict.html#attribute-detail",
        "title": "AttrDict > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AttrDict",
        "href": "api/ansys/health/heart/settings/settings/AttrDict.html#AttrDict.__dict__",
        "title": "AttrDict > Attribute detail > __dict__",
        "section": "Attribute detail > __dict__",
        "text": "AttrDict.__dict__\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/index",
        "href": "api/ansys/health/heart/post/dpf_utils/index.html#the-dpf_utilspy-module",
        "title": "The dpf_utils.py module",
        "section": "The dpf_utils.py module",
        "text": "The dpf_utils.py module\ndpf_utils.py"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/index",
        "href": "api/ansys/health/heart/post/dpf_utils/index.html#summary",
        "title": "The dpf_utils.py module > Summary",
        "section": "Summary",
        "text": "ICVoutReader\nRead control volume data from the binout file.\nD3plotReader\nUse DPF to parse the d3plot.\nEPpostprocessor\nPostprocess EP (plectrophysiology) results.\nD3plotToVTKExporter\nRead d3plot and save the deformed mesh.\nSummary\nICVoutReader\nD3plotReader\nEPpostprocessor\nD3plotToVTKExporter"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/index",
        "href": "api/ansys/health/heart/post/dpf_utils/index.html#description",
        "title": "The dpf_utils.py module > Description",
        "section": "Description",
        "text": "D3plot parser using Ansys DPF.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#part",
        "title": "Part",
        "section": "Part",
        "text": "Base part class.\nPart\nPart"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#ansys.health.heart.parts.Part",
        "title": "Part > Part > Part",
        "section": "Part > Part",
        "text": "class ansys.health.heart.parts.Part(name: str = None, part_type: _PartType = _PartType.UNDEFINED)\n\nBase part class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#overview",
        "title": "Part > Overview",
        "section": "Overview",
        "text": "get_point\nGet a point from the part.\nsurfaces\nList of surfaces belonging to the part.\nsurface_names\nList of surface names belonging to the part.\nname\nPart name.\npid\nPart ID.\nmid\nMaterial ID associated with the part.\nelement_ids\nArray holding element IDs that make up the part.\npoints\nPoints of interest belonging to the part.\nfiber\nFlag indicating if the part has fiber/sheet data.\nactive\nFlag indicating if active stress is established.\nmeca_material\nMaterial model to assign in the simulator.\nep_material\nEP material model to assign in the simulator.\n__str__\nReturn a string representation of the part.\nOverview\nget_point\nsurfaces\nsurface_names\nname\npid\nmid\nelement_ids\npoints\nfiber\nactive\nmeca_material\nep_material\n__str__"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#import-detail",
        "title": "Part > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#property-detail",
        "title": "Part > Property detail",
        "section": "Property detail",
        "text": "List of surfaces belonging to the part.\nList of surface names belonging to the part.\nProperty detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.surfaces",
        "title": "Part > Property detail > surfaces",
        "section": "Property detail > surfaces",
        "text": "property Part.surfaces: List[ansys.health.heart.objects.SurfaceMesh]\n\nList of surfaces belonging to the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.surface_names",
        "title": "Part > Property detail > surface_names",
        "section": "Property detail > surface_names",
        "text": "property Part.surface_names: List[str]\n\nList of surface names belonging to the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#attribute-detail",
        "title": "Part > Attribute detail",
        "section": "Attribute detail",
        "text": "Part name.\nPart ID.\nMaterial ID associated with the part.\nArray holding element IDs that make up the part.\nPoints of interest belonging to the part.\nFlag indicating if the part has fiber/sheet data.\nFlag indicating if active stress is established.\nMaterial model to assign in the simulator.\nEP material model to assign in the simulator.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.name",
        "title": "Part > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "Part.name = None\n\nPart name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.pid",
        "title": "Part > Attribute detail > pid",
        "section": "Attribute detail > pid",
        "text": "Part.pid = None\n\nPart ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.mid",
        "title": "Part > Attribute detail > mid",
        "section": "Attribute detail > mid",
        "text": "Part.mid = None\n\nMaterial ID associated with the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.element_ids",
        "title": "Part > Attribute detail > element_ids",
        "section": "Attribute detail > element_ids",
        "text": "Part.element_ids: numpy.ndarray\n\nArray holding element IDs that make up the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.points",
        "title": "Part > Attribute detail > points",
        "section": "Attribute detail > points",
        "text": "Part.points: List[ansys.health.heart.objects.Point] = []\n\nPoints of interest belonging to the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.fiber",
        "title": "Part > Attribute detail > fiber",
        "section": "Attribute detail > fiber",
        "text": "Part.fiber: bool = False\n\nFlag indicating if the part has fiber/sheet data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.active",
        "title": "Part > Attribute detail > active",
        "section": "Attribute detail > active",
        "text": "Part.active: bool = False\n\nFlag indicating if active stress is established.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.meca_material",
        "title": "Part > Attribute detail > meca_material",
        "section": "Attribute detail > meca_material",
        "text": "Part.meca_material: ansys.health.heart.settings.material.material.MechanicalMaterialModel\n\nMaterial model to assign in the simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.ep_material",
        "title": "Part > Attribute detail > ep_material",
        "section": "Attribute detail > ep_material",
        "text": "Part.ep_material: ansys.health.heart.settings.material.ep_material.EPMaterial\n\nEP material model to assign in the simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#method-detail",
        "title": "Part > Method detail",
        "section": "Method detail",
        "text": "Get a point from the part.\nReturn a string representation of the part.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.get_point",
        "title": "Part > Method detail > get_point",
        "section": "Method detail > get_point",
        "text": "Part.get_point(pointname: str) -> ansys.health.heart.objects.Point\n\nGet a point from the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Part",
        "href": "api/ansys/health/heart/parts/Part.html#Part.__str__",
        "title": "Part > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "Part.__str__() -> str\n\nReturn a string representation of the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#mesh",
        "title": "Mesh",
        "section": "Mesh",
        "text": "Bases: pyvista.UnstructuredGrid\nMesh class, which inherits from the PyVista unstructured grid object.\nThis class inherits from the pyvista.UnstructuredGrid object and adds additional\nattributes and convenience methods for enhanced functionality. The _volume_id,\n_surface_id, and _line_id cell arrays keep track of labeled selections of\ncells. The _volume_id cell array is used to group 3D volume cells together.\nAny non-3D volume cell is labeled as numpy.nan. Similarly 2D and 1D cells are tracked\nthrough the _surface_id and _line_id cell arrays respectively.\nMesh\nMesh\npyvista.UnstructuredGrid\npyvista.UnstructuredGrid\n_volume_id\n_surface_id\n_line_id\n_volume_id\nnumpy.nan\n_surface_id\n_line_id"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#ansys.health.heart.objects.Mesh",
        "title": "Mesh > Mesh > Mesh",
        "section": "Mesh > Mesh",
        "text": "class ansys.health.heart.objects.Mesh(*args)\n\nBases: pyvista.UnstructuredGrid\n\nMesh class, which inherits from the PyVista unstructured grid object.\n\nNotes\n\nThis class inherits from the pyvista.UnstructuredGrid object and adds additional\nattributes and convenience methods for enhanced functionality. The _volume_id,\n_surface_id, and _line_id cell arrays keep track of labeled selections of\ncells. The _volume_id cell array is used to group 3D volume cells together.\nAny non-3D volume cell is labeled as numpy.nan. Similarly 2D and 1D cells are tracked\nthrough the _surface_id and _line_id cell arrays respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#overview",
        "title": "Mesh > Overview",
        "section": "Overview",
        "text": "save\nSave mesh.\nload_mesh\nLoad an existing mesh.\nvalidate_ids_to_name_map\nCheck whether there are any duplicate or unmapped surfaces/volumes.\nclean\nMerge duplicate points and return a cleaned copy.\nadd_volume\nAdd a volume.\nadd_surface\nAdd a surface.\nadd_lines\nAdd lines.\nget_volume\nGet a volume as a PyVista unstructured grid object.\nget_volume_by_name\nGet the surface associated with a given name.\nget_surface\nGet a surface as a PyVista polydata object.\nget_surface_by_name\nGet the surface associated with a given name.\nget_lines\nGet lines as a PyVista polydata object.\nget_lines_by_name\nGet the lines associated with a given name.\nremove_surface\nRemove a surface with a given ID.\nremove_volume\nRemove a volume with a given ID.\nremove_lines\nRemove a set of lines with a given ID.\ntetrahedrons\nTetrahedrons num_tetra x 4.\ntriangles\nAll triangles of the mesh.\nlines\nGet all triangles of the mesh.\nsurface_ids\nUnique surface IDs.\nsurface_names\nList of surface names.\nvolume_ids\nNumPy array with unique volume IDs.\nvolume_names\nList of volume names.\nline_ids\nNumPy array with unique line IDs.\nline_names\nList of volume names.\nOverview\nsave\nload_mesh\nvalidate_ids_to_name_map\nclean\nadd_volume\nadd_surface\nadd_lines\nget_volume\nget_volume_by_name\nget_surface\nget_surface_by_name\nget_lines\nget_lines_by_name\nremove_surface\nremove_volume\nremove_lines\ntetrahedrons\nnum_tetra\ntriangles\nlines\nsurface_ids\nsurface_names\nvolume_ids\nvolume_names\nline_ids\nline_names"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#import-detail",
        "title": "Mesh > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#property-detail",
        "title": "Mesh > Property detail",
        "section": "Property detail",
        "text": "Tetrahedrons num_tetra x 4.\nAll triangles of the mesh.\nGet all triangles of the mesh.\nUnique surface IDs.\nNumPy array with unique surface IDs.\nList of surface names.\nNumPy array with unique volume IDs.\nNumPy array with unique volume IDs.\nList of volume names.\nNumPy array with unique line IDs.\nNumPy array with unique line IDs.\nList of volume names.\nProperty detail\nnum_tetra\nnp.ndarray\nnp.ndarray\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.tetrahedrons",
        "title": "Mesh > Property detail > tetrahedrons",
        "section": "Property detail > tetrahedrons",
        "text": "property Mesh.tetrahedrons\n\nTetrahedrons num_tetra x 4.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.triangles",
        "title": "Mesh > Property detail > triangles",
        "section": "Property detail > triangles",
        "text": "property Mesh.triangles\n\nAll triangles of the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.lines",
        "title": "Mesh > Property detail > lines",
        "section": "Property detail > lines",
        "text": "property Mesh.lines\n\nGet all triangles of the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.surface_ids",
        "title": "Mesh > Property detail > surface_ids",
        "section": "Property detail > surface_ids",
        "text": "property Mesh.surface_ids: numpy.ndarray\n\nUnique surface IDs.\n\nReturns\n\nnp.ndarray\n\nNumPy array with unique surface IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.surface_names",
        "title": "Mesh > Property detail > surface_names",
        "section": "Property detail > surface_names",
        "text": "property Mesh.surface_names: List[str]\n\nList of surface names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.volume_ids",
        "title": "Mesh > Property detail > volume_ids",
        "section": "Property detail > volume_ids",
        "text": "property Mesh.volume_ids: numpy.ndarray\n\nNumPy array with unique volume IDs.\n\nReturns\n\nnp.ndarray\n\nNumPy array with unique volume IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.volume_names",
        "title": "Mesh > Property detail > volume_names",
        "section": "Property detail > volume_names",
        "text": "property Mesh.volume_names: List[str]\n\nList of volume names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.line_ids",
        "title": "Mesh > Property detail > line_ids",
        "section": "Property detail > line_ids",
        "text": "property Mesh.line_ids: numpy.ndarray\n\nNumPy array with unique line IDs.\n\nReturns\n\nnp.ndarray\n\nNumPy array with unique line IDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.line_names",
        "title": "Mesh > Property detail > line_names",
        "section": "Property detail > line_names",
        "text": "property Mesh.line_names: List[str]\n\nList of volume names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#method-detail",
        "title": "Mesh > Method detail",
        "section": "Method detail",
        "text": "Save mesh.\nLoad an existing mesh.\nFull path to the mesh file.\nThis method tries to read a JSON file with the volume/surface ID to a name map\nwith extension .namemap.json in the same directory as the file. Alternatively,\nyou can read the name map manually by calling ._load_id_to_name_map(filename).\nCheck whether there are any duplicate or unmapped surfaces/volumes.\nMerge duplicate points and return a cleaned copy.\nWhether to ignore nan values when averaging point data.\nCleaned copy of self.\nAdd a volume.\nPolyData representation of the volume to add.\nID of the volume to add. This ID is tracked as _volume-id.\nName of the added volume. The added volume is not tracked by default.\nAdd a surface.\nPolyData representation of the surface to add.\nID of the surface to add. This ID is tracked as _surface-id.\nName of the added surface. The added surface is not tracked by default.\nWhether to overwrite a surface with the same ID. If False, the added\nsurface is appended.\nAdd lines.\nPolyData representation of the lines to add.\nID of the surface to add. This ID is tracked as _line-id.\nName of the added lines. The added lines are not tracked by default.\nGet a volume as a PyVista unstructured grid object.\nGet the surface associated with a given name.\nGet a surface as a PyVista polydata object.\nThis method tries to return a SurfaceMesh object that also contains a name, ID,\nand additional convenience properties.\nGet the surface associated with a given name.\nGet lines as a PyVista polydata object.\nGet the lines associated with a given name.\nRemove a surface with a given ID.\nID of the surface to remove.\nRemove a volume with a given ID.\nID of the volume to remove.\nRemove a set of lines with a given ID.\nID of the lines to remove.\nMethod detail\nUnion\npython:str\npathlib.Path\n.namemap.json\n._load_id_to_name_map(filename)\npython:False\nMesh\npv.PolyData\npython:int\n_volume-id\npython:str\npython:None\npv.PolyData\npython:int\n_surface-id\npython:str\npython:None\npython:False\nFalse\npv.PolyData\npython:int\n_line-id\npython:str\noptional\nSurfaceMesh\npython:int\npython:int\npython:int"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.save",
        "title": "Mesh > Method detail > save",
        "section": "Method detail > save",
        "text": "Mesh.save(filename: str | pathlib.Path, **kwargs)\n\nSave mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.load_mesh",
        "title": "Mesh > Method detail > load_mesh",
        "section": "Method detail > load_mesh",
        "text": "Mesh.load_mesh(filename: str | pathlib.Path)\n\nLoad an existing mesh.\n\nParameters\n\nfilename\n\nUnion[python:str, pathlib.Path]\n\nFull path to the mesh file.\n\nNotes\n\nThis method tries to read a JSON file with the volume/surface ID to a name map\nwith extension .namemap.json in the same directory as the file. Alternatively,\nyou can read the name map manually by calling ._load_id_to_name_map(filename).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.validate_ids_to_name_map",
        "title": "Mesh > Method detail > validate_ids_to_name_map",
        "section": "Method detail > validate_ids_to_name_map",
        "text": "Mesh.validate_ids_to_name_map()\n\nCheck whether there are any duplicate or unmapped surfaces/volumes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.clean",
        "title": "Mesh > Method detail > clean",
        "section": "Method detail > clean",
        "text": "Mesh.clean(ignore_nans_in_point_average: bool = False, **kwargs)\n\nMerge duplicate points and return a cleaned copy.\n\nParameters\n\nignore_nans_in_point_average\n\nbool, default: python:False\n\nWhether to ignore nan values when averaging point data.\n\nReturns\n\nMesh\n\nCleaned copy of self.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.add_volume",
        "title": "Mesh > Method detail > add_volume",
        "section": "Method detail > add_volume",
        "text": "Mesh.add_volume(volume: pyvista.UnstructuredGrid, id: int = None, name: str = None)\n\nAdd a volume.\n\nParameters\n\nvolume\n\npv.PolyData\n\nPolyData representation of the volume to add.\n\nid\n\npython:int\n\nID of the volume to add. This ID is tracked as _volume-id.\n\nname\n\npython:str, default: python:None\n\nName of the added volume. The added volume is not tracked by default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.add_surface",
        "title": "Mesh > Method detail > add_surface",
        "section": "Method detail > add_surface",
        "text": "Mesh.add_surface(surface: pyvista.PolyData, id: int = None, name: str = None, overwrite_existing: bool = False)\n\nAdd a surface.\n\nParameters\n\nsurface\n\npv.PolyData\n\nPolyData representation of the surface to add.\n\nsid\n\npython:int\n\nID of the surface to add. This ID is tracked as _surface-id.\n\nname\n\npython:str, default: python:None\n\nName of the added surface. The added surface is not tracked by default.\n\noverwrite_existing\n\nbool, default: python:False\n\nWhether to overwrite a surface with the same ID. If False, the added\nsurface is appended.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.add_lines",
        "title": "Mesh > Method detail > add_lines",
        "section": "Method detail > add_lines",
        "text": "Mesh.add_lines(lines: pyvista.PolyData, id: int = None, name: str = None)\n\nAdd lines.\n\nParameters\n\nlines\n\npv.PolyData\n\nPolyData representation of the lines to add.\n\nid\n\npython:int\n\nID of the surface to add. This ID is tracked as _line-id.\n\nname\n\npython:str, optional\n\nName of the added lines. The added lines are not tracked by default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.get_volume",
        "title": "Mesh > Method detail > get_volume",
        "section": "Method detail > get_volume",
        "text": "Mesh.get_volume(sid: int) -> pyvista.UnstructuredGrid\n\nGet a volume as a PyVista unstructured grid object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.get_volume_by_name",
        "title": "Mesh > Method detail > get_volume_by_name",
        "section": "Method detail > get_volume_by_name",
        "text": "Mesh.get_volume_by_name(name: str) -> pyvista.UnstructuredGrid\n\nGet the surface associated with a given name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.get_surface",
        "title": "Mesh > Method detail > get_surface",
        "section": "Method detail > get_surface",
        "text": "Mesh.get_surface(sid: int) -> pyvista.PolyData | SurfaceMesh\n\nGet a surface as a PyVista polydata object.\n\nNotes\n\nThis method tries to return a SurfaceMesh object that also contains a name, ID,\nand additional convenience properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.get_surface_by_name",
        "title": "Mesh > Method detail > get_surface_by_name",
        "section": "Method detail > get_surface_by_name",
        "text": "Mesh.get_surface_by_name(name: str) -> pyvista.PolyData | SurfaceMesh\n\nGet the surface associated with a given name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.get_lines",
        "title": "Mesh > Method detail > get_lines",
        "section": "Method detail > get_lines",
        "text": "Mesh.get_lines(sid: int) -> pyvista.PolyData\n\nGet lines as a PyVista polydata object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.get_lines_by_name",
        "title": "Mesh > Method detail > get_lines_by_name",
        "section": "Method detail > get_lines_by_name",
        "text": "Mesh.get_lines_by_name(name: str) -> pyvista.PolyData\n\nGet the lines associated with a given name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.remove_surface",
        "title": "Mesh > Method detail > remove_surface",
        "section": "Method detail > remove_surface",
        "text": "Mesh.remove_surface(sid: int)\n\nRemove a surface with a given ID.\n\nParameters\n\nsid\n\npython:int\n\nID of the surface to remove.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.remove_volume",
        "title": "Mesh > Method detail > remove_volume",
        "section": "Method detail > remove_volume",
        "text": "Mesh.remove_volume(vid: int)\n\nRemove a volume with a given ID.\n\nParameters\n\nvid\n\npython:int\n\nID of the volume to remove.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/objects/Mesh",
        "href": "api/ansys/health/heart/objects/Mesh.html#Mesh.remove_lines",
        "title": "Mesh > Method detail > remove_lines",
        "section": "Method detail > remove_lines",
        "text": "Mesh.remove_lines(lid: int)\n\nRemove a set of lines with a given ID.\n\nParameters\n\nlid\n\npython:int\n\nID of the lines to remove.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#epsimulator",
        "title": "EPSimulator",
        "section": "EPSimulator",
        "text": "Bases: BaseSimulator\nEP (electrophysiology) simulator.\nEPSimulator\nEPSimulator\nBaseSimulator"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#ansys.health.heart.simulator.EPSimulator",
        "title": "EPSimulator > EPSimulator > EPSimulator",
        "section": "EPSimulator > EPSimulator",
        "text": "class ansys.health.heart.simulator.EPSimulator(model: ansys.health.heart.models.HeartModel, dyna_settings: ansys.health.heart.settings.settings.DynaSettings, simulation_directory: pathlib = '')\n\nBases: BaseSimulator\n\nEP (electrophysiology) simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#overview",
        "title": "EPSimulator > Overview",
        "section": "Overview",
        "text": "simulate\nLaunch the EP simulation.\ncompute_purkinje\nCompute the Purkinje network.\ncompute_conduction_system\nCompute the conduction system.\nOverview\nsimulate\ncompute_purkinje\ncompute_conduction_system"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#import-detail",
        "title": "EPSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#method-detail",
        "title": "EPSimulator > Method detail",
        "section": "Method detail",
        "text": "Launch the EP simulation.\nSimulation folder name.\nUser-defined k files.\nCompute the Purkinje network.\nCompute the conduction system.\nMethod detail\npython:str\n'main-ep'\npython:list\npython:str\npython:None"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#EPSimulator.simulate",
        "title": "EPSimulator > Method detail > simulate",
        "section": "Method detail > simulate",
        "text": "EPSimulator.simulate(folder_name='main-ep', extra_k_files: list[str] | None = None)\n\nLaunch the EP simulation.\n\nParameters\n\nfolder_name\n\npython:str, default: 'main-ep'\n\nSimulation folder name.\n\nextra_k_files\n\npython:list[python:str], default: python:None\n\nUser-defined k files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#EPSimulator.compute_purkinje",
        "title": "EPSimulator > Method detail > compute_purkinje",
        "section": "Method detail > compute_purkinje",
        "text": "EPSimulator.compute_purkinje()\n\nCompute the Purkinje network.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/EPSimulator",
        "href": "api/ansys/health/heart/simulator/EPSimulator.html#EPSimulator.compute_conduction_system",
        "title": "EPSimulator > Method detail > compute_conduction_system",
        "section": "Method detail > compute_conduction_system",
        "text": "EPSimulator.compute_conduction_system()\n\nCompute the conduction system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/index",
        "href": "api/ansys/health/heart/writer/base_writer/index.html#the-base_writerpy-module",
        "title": "The base_writer.py module",
        "section": "The base_writer.py module",
        "text": "The base_writer.py module\nbase_writer.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/index",
        "href": "api/ansys/health/heart/writer/base_writer/index.html#summary",
        "title": "The base_writer.py module > Summary",
        "section": "Summary",
        "text": "BaseDynaWriter\nBase class that contains essential features for all LS-DYNA heart models.\nFiberGenerationDynaWriter\nClass for preparing the input for a fiber-generation LS-DYNA simulation.\nSummary\nBaseDynaWriter\nFiberGenerationDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/index",
        "href": "api/ansys/health/heart/writer/base_writer/index.html#description",
        "title": "The base_writer.py module > Description",
        "section": "Description",
        "text": "Base module containing classes for writing LS-DYNA keyword files.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/index",
        "href": "api/ansys/health/heart/exceptions/index.html#the-exceptionspy-module",
        "title": "The exceptions.py module",
        "section": "The exceptions.py module",
        "text": "The exceptions.py module\nexceptions.py"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/index",
        "href": "api/ansys/health/heart/exceptions/index.html#summary",
        "title": "The exceptions.py module > Summary",
        "section": "Summary",
        "text": "LSDYNATerminationError\nException raised when Normal Termination is not found in the LS-DYNA logs.\nDatabaseNotSupportedError\nException raised when the database is not supported.\nSupportedDPFServerNotFoundError\nException raised when no supported DPF server is found.\nSupportedFluentVersionNotFoundError\nException raised when no supported Fluent version is found.\nInvalidInputModelTypeError\nException raised when the input heart model type is invalid.\nInvalidHeartModelError\nException raised when the heart model is invalid.\nLSDYNANotFoundError\nException raised when the LS-DYNA executable file is not found.\nMPIProgamNotFoundError\nException raised when MPI program is not found.\nSummary\nLSDYNATerminationError\nNormal Termination\nDatabaseNotSupportedError\nSupportedDPFServerNotFoundError\nSupportedFluentVersionNotFoundError\nInvalidInputModelTypeError\nInvalidHeartModelError\nLSDYNANotFoundError\nMPIProgamNotFoundError"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/index",
        "href": "api/ansys/health/heart/exceptions/index.html#description",
        "title": "The exceptions.py module > Description",
        "section": "Description",
        "text": "Custom exceptions for PyAnsys Heart.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#landmarks",
        "title": "LandMarks",
        "section": "LandMarks",
        "text": "Heart anatomical points.\nLandMarks\nLandMarks"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#ansys.health.heart.models_utils.LandMarks",
        "title": "LandMarks > LandMarks > LandMarks",
        "section": "LandMarks > LandMarks",
        "text": "class ansys.health.heart.models_utils.LandMarks\n\nHeart anatomical points.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#overview",
        "title": "LandMarks > Overview",
        "section": "Overview",
        "text": "SA_NODE\nAV_NODE\nHIS_BIF_NODE\nHIS_LEFT_END_NODE\nHIS_RIGHT_END_NODE\nBACHMAN_END_NODE\nLEFT_FASCILE_END\nLEFT_APEX\nRIGHT_APEX\nOverview\nSA_NODE\nAV_NODE\nHIS_BIF_NODE\nHIS_LEFT_END_NODE\nHIS_RIGHT_END_NODE\nBACHMAN_END_NODE\nLEFT_FASCILE_END\nLEFT_APEX\nRIGHT_APEX"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#import-detail",
        "title": "LandMarks > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#attribute-detail",
        "title": "LandMarks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.SA_NODE",
        "title": "LandMarks > Attribute detail > SA_NODE",
        "section": "Attribute detail > SA_NODE",
        "text": "LandMarks.SA_NODE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.AV_NODE",
        "title": "LandMarks > Attribute detail > AV_NODE",
        "section": "Attribute detail > AV_NODE",
        "text": "LandMarks.AV_NODE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.HIS_BIF_NODE",
        "title": "LandMarks > Attribute detail > HIS_BIF_NODE",
        "section": "Attribute detail > HIS_BIF_NODE",
        "text": "LandMarks.HIS_BIF_NODE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.HIS_LEFT_END_NODE",
        "title": "LandMarks > Attribute detail > HIS_LEFT_END_NODE",
        "section": "Attribute detail > HIS_LEFT_END_NODE",
        "text": "LandMarks.HIS_LEFT_END_NODE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.HIS_RIGHT_END_NODE",
        "title": "LandMarks > Attribute detail > HIS_RIGHT_END_NODE",
        "section": "Attribute detail > HIS_RIGHT_END_NODE",
        "text": "LandMarks.HIS_RIGHT_END_NODE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.BACHMAN_END_NODE",
        "title": "LandMarks > Attribute detail > BACHMAN_END_NODE",
        "section": "Attribute detail > BACHMAN_END_NODE",
        "text": "LandMarks.BACHMAN_END_NODE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.LEFT_FASCILE_END",
        "title": "LandMarks > Attribute detail > LEFT_FASCILE_END",
        "section": "Attribute detail > LEFT_FASCILE_END",
        "text": "LandMarks.LEFT_FASCILE_END\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.LEFT_APEX",
        "title": "LandMarks > Attribute detail > LEFT_APEX",
        "section": "Attribute detail > LEFT_APEX",
        "text": "LandMarks.LEFT_APEX\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/LandMarks",
        "href": "api/ansys/health/heart/models_utils/LandMarks.html#LandMarks.RIGHT_APEX",
        "title": "LandMarks > Attribute detail > RIGHT_APEX",
        "section": "Attribute detail > RIGHT_APEX",
        "text": "LandMarks.RIGHT_APEX\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/purkinje/index",
        "href": "api/ansys/health/heart/settings/defaults/purkinje/index.html#the-purkinjepy-module",
        "title": "The purkinje.py module",
        "section": "The purkinje.py module",
        "text": "The purkinje.py module\npurkinje.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/purkinje/index",
        "href": "api/ansys/health/heart/settings/defaults/purkinje/index.html#summary",
        "title": "The purkinje.py module > Summary",
        "section": "Summary",
        "text": "build\nSummary\nbuild"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/purkinje/index",
        "href": "api/ansys/health/heart/settings/defaults/purkinje/index.html#description",
        "title": "The purkinje.py module > Description",
        "section": "Description",
        "text": "Module contains default values for Purkinje generation.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/purkinje/index",
        "href": "api/ansys/health/heart/settings/defaults/purkinje/index.html#module-detail",
        "title": "The purkinje.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/defaults/purkinje/index",
        "href": "api/ansys/health/heart/settings/defaults/purkinje/index.html#purkinje.build",
        "title": "The purkinje.py module > Module detail > build",
        "section": "Module detail > build",
        "text": "purkinje.build\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#model1",
        "title": "Model1",
        "section": "Model1",
        "text": "Hold data for active model 1, check manual for details.\nModel1\nModel1"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#ansys.health.heart.settings.material.material.ActiveModel.Model1",
        "title": "Model1 > Model1 > Model1",
        "section": "Model1 > Model1",
        "text": "class ansys.health.heart.settings.material.material.ActiveModel.Model1\n\nHold data for active model 1, check manual for details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#overview",
        "title": "Model1 > Overview",
        "section": "Overview",
        "text": "t0\nca2ion\nca2ionm\nn\ntaumax\nstf\nb\nl0\nl\ndtmax\nmr\ntr\nOverview\nt0\nca2ion\nca2ionm\nn\ntaumax\nstf\nb\nl0\nl\ndtmax\nmr\ntr"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#import-detail",
        "title": "Model1 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#attribute-detail",
        "title": "Model1 > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.t0",
        "title": "Model1 > Attribute detail > t0",
        "section": "Attribute detail > t0",
        "text": "Model1.t0: float = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.ca2ion",
        "title": "Model1 > Attribute detail > ca2ion",
        "section": "Attribute detail > ca2ion",
        "text": "Model1.ca2ion: float = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.ca2ionm",
        "title": "Model1 > Attribute detail > ca2ionm",
        "section": "Attribute detail > ca2ionm",
        "text": "Model1.ca2ionm: float = 4.35\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.n",
        "title": "Model1 > Attribute detail > n",
        "section": "Attribute detail > n",
        "text": "Model1.n: int = 2\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.taumax",
        "title": "Model1 > Attribute detail > taumax",
        "section": "Attribute detail > taumax",
        "text": "Model1.taumax: float = 0.125\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.stf",
        "title": "Model1 > Attribute detail > stf",
        "section": "Attribute detail > stf",
        "text": "Model1.stf: float = 0.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.b",
        "title": "Model1 > Attribute detail > b",
        "section": "Attribute detail > b",
        "text": "Model1.b: float = 4.75\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.l0",
        "title": "Model1 > Attribute detail > l0",
        "section": "Attribute detail > l0",
        "text": "Model1.l0: float = 1.58\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.l",
        "title": "Model1 > Attribute detail > l",
        "section": "Attribute detail > l",
        "text": "Model1.l: float = 1.85\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.dtmax",
        "title": "Model1 > Attribute detail > dtmax",
        "section": "Attribute detail > dtmax",
        "text": "Model1.dtmax: float = 150\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.mr",
        "title": "Model1 > Attribute detail > mr",
        "section": "Attribute detail > mr",
        "text": "Model1.mr: float = 1048.9\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model1.html#Model1.tr",
        "title": "Model1 > Attribute detail > tr",
        "section": "Attribute detail > tr",
        "text": "Model1.tr: float = -1629.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#electrophysiologydynawriter",
        "title": "ElectrophysiologyDynaWriter",
        "section": "ElectrophysiologyDynaWriter",
        "text": "Bases: ansys.health.heart.writer.base_writer.BaseDynaWriter\nClass for preparing the input for an electrophysiology LS-DYNA simulation.\nElectrophysiologyDynaWriter\nElectrophysiologyDynaWriter\nansys.health.heart.writer.base_writer.BaseDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#ansys.health.heart.writer.ep_writer.ElectrophysiologyDynaWriter",
        "title": "ElectrophysiologyDynaWriter > ElectrophysiologyDynaWriter > ElectrophysiologyDynaWriter",
        "section": "ElectrophysiologyDynaWriter > ElectrophysiologyDynaWriter",
        "text": "class ansys.health.heart.writer.ep_writer.ElectrophysiologyDynaWriter(model: ansys.health.heart.models.HeartModel | ansys.health.heart.models.FullHeart | ansys.health.heart.models.FourChamber | ansys.health.heart.models.BiVentricle | ansys.health.heart.models.LeftVentricle, settings: ansys.health.heart.settings.settings.SimulationSettings = None)\n\nBases: ansys.health.heart.writer.base_writer.BaseDynaWriter\n\nClass for preparing the input for an electrophysiology LS-DYNA simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#overview",
        "title": "ElectrophysiologyDynaWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate keyword database for electrophysiology.\nget_default_stimulus_nodes\nGet default stiumulus nodes.\nkw_database\nCollection of keywords relevant for electrophysiology.\nOverview\nupdate\nget_default_stimulus_nodes\nkw_database"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#import-detail",
        "title": "ElectrophysiologyDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#attribute-detail",
        "title": "ElectrophysiologyDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Collection of keywords relevant for electrophysiology.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#ElectrophysiologyDynaWriter.kw_database",
        "title": "ElectrophysiologyDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "ElectrophysiologyDynaWriter.kw_database\n\nCollection of keywords relevant for electrophysiology.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#method-detail",
        "title": "ElectrophysiologyDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Update keyword database for electrophysiology.\nGet default stiumulus nodes.\n1/2 apex points for the left/bi-ventricle model.\nSinoatrial node for four-chamber or full-heart model.\nList of 0-based node IDs to stimulate.\nMethod detail\npython:list\npython:int"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#ElectrophysiologyDynaWriter.update",
        "title": "ElectrophysiologyDynaWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "ElectrophysiologyDynaWriter.update() -> None\n\nUpdate keyword database for electrophysiology.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyDynaWriter.html#ElectrophysiologyDynaWriter.get_default_stimulus_nodes",
        "title": "ElectrophysiologyDynaWriter > Method detail > get_default_stimulus_nodes",
        "section": "Method detail > get_default_stimulus_nodes",
        "text": "ElectrophysiologyDynaWriter.get_default_stimulus_nodes() -> list[int]\n\nGet default stiumulus nodes.\n\n1/2 apex points for the left/bi-ventricle model.\n\nSinoatrial node for four-chamber or full-heart model.\n\nReturns\n\npython:list[python:int]\n\nList of 0-based node IDs to stimulate.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#laplacewriter",
        "title": "LaplaceWriter",
        "section": "LaplaceWriter",
        "text": "Bases: ansys.health.heart.writer.base_writer.BaseDynaWriter\nClass for preparing the input for a Laplace LS-DYNA simulation.\nLaplaceWriter\nLaplaceWriter\nansys.health.heart.writer.base_writer.BaseDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#ansys.health.heart.writer.laplace_writer.LaplaceWriter",
        "title": "LaplaceWriter > LaplaceWriter > LaplaceWriter",
        "section": "LaplaceWriter > LaplaceWriter",
        "text": "class ansys.health.heart.writer.laplace_writer.LaplaceWriter(model: ansys.health.heart.models.HeartModel, type: Literal['uvc', 'la_fiber', 'ra_fiber', 'D-RBM'], **kwargs)\n\nBases: ansys.health.heart.writer.base_writer.BaseDynaWriter\n\nClass for preparing the input for a Laplace LS-DYNA simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#overview",
        "title": "LaplaceWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate the keyword database.\nadd_case\nAdd a case to the keyword database.\ntype\nProblem type.\nlandmarks\nLandmarks are laa, raa,  and top.\ntarget\nTarget mesh related to the problem.\nOverview\nupdate\nadd_case\ntype\nlandmarks\nlaa\nraa\ntop\ntarget"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#import-detail",
        "title": "LaplaceWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#attribute-detail",
        "title": "LaplaceWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Problem type.\nLandmarks are laa, raa,  and top.\nTarget mesh related to the problem.\nAttribute detail\nlaa\nraa\ntop"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#LaplaceWriter.type",
        "title": "LaplaceWriter > Attribute detail > type",
        "section": "Attribute detail > type",
        "text": "LaplaceWriter.type\n\nProblem type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#LaplaceWriter.landmarks",
        "title": "LaplaceWriter > Attribute detail > landmarks",
        "section": "Attribute detail > landmarks",
        "text": "LaplaceWriter.landmarks\n\nLandmarks are laa, raa,  and top.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#LaplaceWriter.target",
        "title": "LaplaceWriter > Attribute detail > target",
        "section": "Attribute detail > target",
        "text": "LaplaceWriter.target: pyvista.UnstructuredGrid = None\n\nTarget mesh related to the problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#method-detail",
        "title": "LaplaceWriter > Method detail",
        "section": "Method detail",
        "text": "Update the keyword database.\nAdd a case to the keyword database.\nCase ID.\nCase name, which is the d3plot filename.\nList of nodeset IDs for boundary conditions.\nList of boundary condition values.\nMethod detail\npython:int\npython:str\npython:list\npython:int\npython:list\npython:float"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#LaplaceWriter.update",
        "title": "LaplaceWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "LaplaceWriter.update() -> None\n\nUpdate the keyword database.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter",
        "href": "api/ansys/health/heart/writer/laplace_writer/LaplaceWriter.html#LaplaceWriter.add_case",
        "title": "LaplaceWriter > Method detail > add_case",
        "section": "Method detail > add_case",
        "text": "LaplaceWriter.add_case(case_id: int, case_name: str, set_ids: list[int], bc_values: list[float]) -> None\n\nAdd a case to the keyword database.\n\nParameters\n\ncase_id\n\npython:int\n\nCase ID.\n\ncase_name\n\npython:str\n\nCase name, which is the d3plot filename.\n\nset_ids\n\npython:list[python:int]\n\nList of nodeset IDs for boundary conditions.\n\nbc_values\n\npython:list[python:float]\n\nList of boundary condition values.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#heartmodelutils",
        "title": "HeartModelUtils",
        "section": "HeartModelUtils",
        "text": "Stateless methods for the heart model.\nHeartModelUtils\nHeartModelUtils"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#ansys.health.heart.models_utils.HeartModelUtils",
        "title": "HeartModelUtils > HeartModelUtils > HeartModelUtils",
        "section": "HeartModelUtils > HeartModelUtils",
        "text": "class ansys.health.heart.models_utils.HeartModelUtils\n\nStateless methods for the heart model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#overview",
        "title": "HeartModelUtils > Overview",
        "section": "Overview",
        "text": "define_sino_atrial_node\nDefine Sino-atrial node.\ndefine_atrio_ventricular_node\nDefine Atrio-ventricular node.\ndefine_his_bundle_bifurcation_node\nDefine His bundle bifurcation node.\ndefine_his_bundle_end_node\nDefine His bundle end node.\ndefine_bachman_bundle_end_node\nDefine Bachmann bundle end node.\ndefine_fascile_bundle_end_node\nDefine fascile bundle end node.\ndefine_full_conduction_system\nDefine the full conduction system.\nOverview\ndefine_sino_atrial_node\ndefine_atrio_ventricular_node\ndefine_his_bundle_bifurcation_node\ndefine_his_bundle_end_node\ndefine_bachman_bundle_end_node\ndefine_fascile_bundle_end_node\ndefine_full_conduction_system"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#import-detail",
        "title": "HeartModelUtils > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#method-detail",
        "title": "HeartModelUtils > Method detail",
        "section": "Method detail",
        "text": "Define Sino-atrial node.\nHeart model.\nIf None, the target coordinate is computed as the midpoint between\nthe centroids of the superior and inferior vena cavae. If a coordinate is provided,\nthe closest point on the right atrium endocardium surface to that coordinate is used.\nSA node.\nDefine Atrio-ventricular node.\nHeart model.\nIf None, the target coordinate is computed as the closest point on the right atrium\nendocardium surface to the right ventricle septum. If a coordinate is provided, the\nclosest point on the right atrium endocardium surface to that coordinate is used.\nAV node.\nDefine His bundle bifurcation node.\nHeart model.\nIf None, the target coordinate is computed as the closest point in the septum to\nthe AV node. If a coordinate is provided, the closest point in the septum to that\ncoordinate is used.\nHIS bifurcation node.\nDefine His bundle end node.\nHeart model.\nIf None, the target coordinate is computed as the n-th closest point\non the endocardium to the His bundle bifurcation node.\nNot implemented yet if a coordinate is provided.\nSide of the heart to define the end node for.\nn-th closest point to the bifurcation node, to avoid too close to the bifurcation node.\nEnd node of His left or right bundle.\nDefine Bachmann bundle end node.\nDefine fascile bundle end node.\nDefine the full conduction system.\nHeart model.\nFolder with LS-DYNA’s Purkinje generation.\nList of conduction paths.\nMethod detail\nmodels.FullHeart\nmodels.FourChamber\nnp.ndarray\npython:list\npython:None\nNone\nLandMarks\npython:None\nmodels.FullHeart\nmodels.FourChamber\nnp.ndarray\npython:list\npython:None\nNone\nLandMarks\npython:None\nmodels.FourChamber\nmodels.FullHeart\nnp.ndarray\npython:list\npython:None\nNone\nLandMarks\npython:None\nmodels.FullHeart\nmodels.FourChamber\nnp.ndarray\npython:list\npython:None\nNone\nLiteral\npython:int\nLandMarks\npython:None\nmodels.FullHeart\nmodels.FourChamber\npython:str\npython:list\nConductionPath"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#HeartModelUtils.define_sino_atrial_node",
        "title": "HeartModelUtils > Method detail > define_sino_atrial_node",
        "section": "Method detail > define_sino_atrial_node",
        "text": "static HeartModelUtils.define_sino_atrial_node(model: ansys.health.heart.models.FullHeart | ansys.health.heart.models.FourChamber, target_coord: numpy.ndarray | list = None) -> LandMarks | None\n\nDefine Sino-atrial node.\n\nParameters\n\nmodel\n\nmodels.FullHeart | models.FourChamber\n\nHeart model.\n\ntarget_coord\n\nnp.ndarray | python:list, default: python:None\n\nIf None, the target coordinate is computed as the midpoint between\nthe centroids of the superior and inferior vena cavae. If a coordinate is provided,\nthe closest point on the right atrium endocardium surface to that coordinate is used.\n\nReturns\n\nLandMarks | python:None\n\nSA node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#HeartModelUtils.define_atrio_ventricular_node",
        "title": "HeartModelUtils > Method detail > define_atrio_ventricular_node",
        "section": "Method detail > define_atrio_ventricular_node",
        "text": "static HeartModelUtils.define_atrio_ventricular_node(model: ansys.health.heart.models.FullHeart | ansys.health.heart.models.FourChamber, target_coord: numpy.ndarray | list = None) -> LandMarks | None\n\nDefine Atrio-ventricular node.\n\nParameters\n\nmodel\n\nmodels.FullHeart | models.FourChamber\n\nHeart model.\n\ntarget_coord\n\nnp.ndarray | python:list, default: python:None\n\nIf None, the target coordinate is computed as the closest point on the right atrium\nendocardium surface to the right ventricle septum. If a coordinate is provided, the\nclosest point on the right atrium endocardium surface to that coordinate is used.\n\nReturns\n\nLandMarks | python:None\n\nAV node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#HeartModelUtils.define_his_bundle_bifurcation_node",
        "title": "HeartModelUtils > Method detail > define_his_bundle_bifurcation_node",
        "section": "Method detail > define_his_bundle_bifurcation_node",
        "text": "static HeartModelUtils.define_his_bundle_bifurcation_node(model: ansys.health.heart.models.FourChamber | ansys.health.heart.models.FullHeart, target_coord: numpy.ndarray | list = None) -> LandMarks | None\n\nDefine His bundle bifurcation node.\n\nParameters\n\nmodel\n\nmodels.FourChamber | models.FullHeart\n\nHeart model.\n\ntarget_coord\n\nnp.ndarray | python:list, default: python:None\n\nIf None, the target coordinate is computed as the closest point in the septum to\nthe AV node. If a coordinate is provided, the closest point in the septum to that\ncoordinate is used.\n\nReturns\n\nLandMarks | python:None\n\nHIS bifurcation node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#HeartModelUtils.define_his_bundle_end_node",
        "title": "HeartModelUtils > Method detail > define_his_bundle_end_node",
        "section": "Method detail > define_his_bundle_end_node",
        "text": "static HeartModelUtils.define_his_bundle_end_node(model: ansys.health.heart.models.FullHeart | ansys.health.heart.models.FourChamber, target_coord: numpy.ndarray | list = None, side: Literal['left', 'right'] = 'left', n_close: int = 20) -> LandMarks | None\n\nDefine His bundle end node.\n\nParameters\n\nmodel\n\nmodels.FullHeart | models.FourChamber\n\nHeart model.\n\ntarget_coord\n\nnp.ndarray | python:list, default: python:None\n\nIf None, the target coordinate is computed as the n-th closest point\non the endocardium to the His bundle bifurcation node.\nNot implemented yet if a coordinate is provided.\n\nside\n\nLiteral[&quot;left&quot;, &quot;right&quot;], default: “left”\n\nSide of the heart to define the end node for.\n\nn_close\n\npython:int, default: 20\n\nn-th closest point to the bifurcation node, to avoid too close to the bifurcation node.\n\nReturns\n\nLandMarks | python:None\n\nEnd node of His left or right bundle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#HeartModelUtils.define_bachman_bundle_end_node",
        "title": "HeartModelUtils > Method detail > define_bachman_bundle_end_node",
        "section": "Method detail > define_bachman_bundle_end_node",
        "text": "static HeartModelUtils.define_bachman_bundle_end_node(model: ansys.health.heart.models.FullHeart | ansys.health.heart.models.FourChamber, target_coord=None) -> LandMarks | None\n\nDefine Bachmann bundle end node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#HeartModelUtils.define_fascile_bundle_end_node",
        "title": "HeartModelUtils > Method detail > define_fascile_bundle_end_node",
        "section": "Method detail > define_fascile_bundle_end_node",
        "text": "static HeartModelUtils.define_fascile_bundle_end_node(model: ansys.health.heart.models.FullHeart | ansys.health.heart.models.FourChamber, target_coord=None) -> LandMarks | None\n\nDefine fascile bundle end node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models_utils/HeartModelUtils",
        "href": "api/ansys/health/heart/models_utils/HeartModelUtils.html#HeartModelUtils.define_full_conduction_system",
        "title": "HeartModelUtils > Method detail > define_full_conduction_system",
        "section": "Method detail > define_full_conduction_system",
        "text": "static HeartModelUtils.define_full_conduction_system(model: ansys.health.heart.models.FullHeart | ansys.health.heart.models.FourChamber, purkinje_folder: str) -> list[ansys.health.heart.pre.conduction_path.ConductionPath]\n\nDefine the full conduction system.\n\nParameters\n\nmodel\n\nmodels.FullHeart | models.FourChamber\n\nHeart model.\n\npurkinje_folder\n\npython:str\n\nFolder with LS-DYNA’s Purkinje generation.\n\nReturns\n\npython:list[ConductionPath]\n\nList of conduction paths.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#fibergenerationdynawriter",
        "title": "FiberGenerationDynaWriter",
        "section": "FiberGenerationDynaWriter",
        "text": "Bases: BaseDynaWriter\nClass for preparing the input for a fiber-generation LS-DYNA simulation.\nFiberGenerationDynaWriter\nFiberGenerationDynaWriter\nBaseDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#ansys.health.heart.writer.base_writer.FiberGenerationDynaWriter",
        "title": "FiberGenerationDynaWriter > FiberGenerationDynaWriter > FiberGenerationDynaWriter",
        "section": "FiberGenerationDynaWriter > FiberGenerationDynaWriter",
        "text": "class ansys.health.heart.writer.base_writer.FiberGenerationDynaWriter(model: ansys.health.heart.models.HeartModel, settings: ansys.health.heart.settings.settings.SimulationSettings = None)\n\nBases: BaseDynaWriter\n\nClass for preparing the input for a fiber-generation LS-DYNA simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#overview",
        "title": "FiberGenerationDynaWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate keyword database for fiber generation.\nkw_database\nCollection of keywords relevant for fiber generation.\nOverview\nupdate\nkw_database"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#import-detail",
        "title": "FiberGenerationDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#attribute-detail",
        "title": "FiberGenerationDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Collection of keywords relevant for fiber generation.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#FiberGenerationDynaWriter.kw_database",
        "title": "FiberGenerationDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "FiberGenerationDynaWriter.kw_database\n\nCollection of keywords relevant for fiber generation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#method-detail",
        "title": "FiberGenerationDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Update keyword database for fiber generation.\nThis method overwrites the inherited function.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/FiberGenerationDynaWriter.html#FiberGenerationDynaWriter.update",
        "title": "FiberGenerationDynaWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "FiberGenerationDynaWriter.update(rotation_angles: dict[str, list[float]] | None = None) -> None\n\nUpdate keyword database for fiber generation.\n\nThis method overwrites the inherited function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Artery",
        "href": "api/ansys/health/heart/parts/Artery.html#artery",
        "title": "Artery",
        "section": "Artery",
        "text": "Bases: Part\nArtery part.\nArtery\nArtery\nPart"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Artery",
        "href": "api/ansys/health/heart/parts/Artery.html#ansys.health.heart.parts.Artery",
        "title": "Artery > Artery > Artery",
        "section": "Artery > Artery",
        "text": "class ansys.health.heart.parts.Artery(name: str = None)\n\nBases: Part\n\nArtery part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Artery",
        "href": "api/ansys/health/heart/parts/Artery.html#overview",
        "title": "Artery > Overview",
        "section": "Overview",
        "text": "wall\nOverview\nwall"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Artery",
        "href": "api/ansys/health/heart/parts/Artery.html#import-detail",
        "title": "Artery > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Artery",
        "href": "api/ansys/health/heart/parts/Artery.html#attribute-detail",
        "title": "Artery > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Artery",
        "href": "api/ansys/health/heart/parts/Artery.html#Artery.wall",
        "title": "Artery > Attribute detail > wall",
        "section": "Attribute detail > wall",
        "text": "Artery.wall\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#tentusscherepi",
        "title": "TentusscherEpi",
        "section": "TentusscherEpi",
        "text": "Bases: Tentusscher\nHold data for Tentusscher cell model in its epicardium version.\nTentusscherEpi\nTentusscherEpi\nTentusscher"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#ansys.health.heart.settings.material.ep_material.CellModel.TentusscherEpi",
        "title": "TentusscherEpi > TentusscherEpi > TentusscherEpi",
        "section": "TentusscherEpi > TentusscherEpi",
        "text": "class ansys.health.heart.settings.material.ep_material.CellModel.TentusscherEpi\n\nBases: Tentusscher\n\nHold data for Tentusscher cell model in its epicardium version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#overview",
        "title": "TentusscherEpi > Overview",
        "section": "Overview",
        "text": "gks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#import-detail",
        "title": "TentusscherEpi > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#attribute-detail",
        "title": "TentusscherEpi > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.gks",
        "title": "TentusscherEpi > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "TentusscherEpi.gks: float = 0.392\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.gto",
        "title": "TentusscherEpi > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "TentusscherEpi.gto: float = 0.294\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.v",
        "title": "TentusscherEpi > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "TentusscherEpi.v: float = -85.23\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.ki",
        "title": "TentusscherEpi > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "TentusscherEpi.ki: float = 136.89\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.nai",
        "title": "TentusscherEpi > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "TentusscherEpi.nai: float = 8.604\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.cai",
        "title": "TentusscherEpi > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "TentusscherEpi.cai: float = 0.000126\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.cass",
        "title": "TentusscherEpi > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "TentusscherEpi.cass: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.casr",
        "title": "TentusscherEpi > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "TentusscherEpi.casr: float = 3.64\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.rpri",
        "title": "TentusscherEpi > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "TentusscherEpi.rpri: float = 0.9073\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.xr1",
        "title": "TentusscherEpi > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "TentusscherEpi.xr1: float = 0.00621\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.xr2",
        "title": "TentusscherEpi > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "TentusscherEpi.xr2: float = 0.4712\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.xs",
        "title": "TentusscherEpi > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "TentusscherEpi.xs: float = 0.0095\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.m",
        "title": "TentusscherEpi > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "TentusscherEpi.m: float = 0.00172\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.h",
        "title": "TentusscherEpi > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "TentusscherEpi.h: float = 0.7444\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.j",
        "title": "TentusscherEpi > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "TentusscherEpi.j: float = 0.7045\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.d",
        "title": "TentusscherEpi > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "TentusscherEpi.d: float = 3.373e-05\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.f",
        "title": "TentusscherEpi > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "TentusscherEpi.f: float = 0.7888\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.f2",
        "title": "TentusscherEpi > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "TentusscherEpi.f2: float = 0.9755\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.fcass",
        "title": "TentusscherEpi > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "TentusscherEpi.fcass: float = 0.9953\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.s",
        "title": "TentusscherEpi > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "TentusscherEpi.s: float = 0.999998\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.r",
        "title": "TentusscherEpi > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "TentusscherEpi.r: float = 2.42e-08\n\n"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#pyansys-heart-overview",
        "title": "Getting started > PyAnsys Heart overview",
        "section": "PyAnsys Heart overview",
        "text": "This overview describes key techniques in cardiac modeling and provides a list of references.\nIt assumes that you have a basic knowledge of LS-DYNA usage. For a comprehensive understanding\nof the modeling process, see the LS-DYNA manuals.\nPyAnsys Heart overview"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#anatomy-generation",
        "title": "Getting started > PyAnsys Heart overview > Anatomy generation",
        "section": "Anatomy generation",
        "text": "PyAnsys Heart supports generating electrophysiology, electro-mechanical, and mechanical models from 24 pathological (Strocchi et al.) and 20 healthy (Rodero et al.) hearts.\nInput CASE and VTK files for both repositories are available in these publications on the Zenodo website:\nA Publicly Available Virtual Cohort of Four-chamber Heart Meshes for Cardiac Electro-mechanics Simulations\nVirtual cohort of adult healthy four-chamber heart meshes from CT images\nThese VTK and CASE files are processed into a compatible input format where the naming and IDs of the surfaces are inferred from the part IDs and consequently written to an input VTP file and JSON file. These input files are then further processed into a HeartModel that contains the various relevant anatomical features (left ventricle, right ventricle, endo- and epicardium, and cavities). This HeartModel is a Python object that then has physics added processed before being exported as an LS-DYNA model.\nSome anatomical details are difficult to capture with medical imaging techniques but are crucial for physical simulations. Fortunately, some rule-based methods proposed in the literature are included in PyAnsys Heart.\nAtrial fibers can be generated by a rule-based method published in Piersanti et al.. Unlike ventricular fibers, which rely on the keyword *EM_EP_CREATEFIBERORIENTATION in LS-DYNA, this algorithm is implemented in PyAnsys Heart by solving multiple (thermal) Laplace’s equations in LS-DYNA.\nA consistent UHC (Universal Heart Coordinates) system can be convenient for landmark determination, data transferring, and more. A universal ventricular coordinate system presented in Bayer et al.2 is implemented. A universal coordinate system for atria, as presented in Roney et al., is to be implemented.\nAnatomy generation\n*EM_EP_CREATEFIBERORIENTATION"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#electrophysiology",
        "title": "Getting started > PyAnsys Heart overview > Electrophysiology",
        "section": "Electrophysiology",
        "text": "PyAnsys Heart provides three options for cardiac electrophysiology modeling (electrical propagation) in the\nsimulator.settings.settings.epanalysis.solvertype API:\nMonodomain (*EM_CONTROL with EMSOL=11 in LS-DYNA)\nEikonal` (``*EM_CONTROL with EMSOL=14 in LS-DYNA)\nReactionEikonal model (*EM_CONTROL with EMSOL=15 in LS-DYNA)\nGeneral descriptions follow for these and other models:\nThe Monodomain model, a reaction-diffusion model, is a simplification of the Bidomain model Potse et al.. In LS-DYNA, the passive electrical material properties (electrical conductivity, membrane capacitance, and surface/volume ratio) corresponding to the Monodomain model are set in *EM_MAT_003 for the myocardium and *EM_MAT_001 for the beams of the conduction system. These are to be completed with active properties using a cell model. For more information, see the “cell model” entry.\nLS-DYNA offers the possibility of using the Bidomain model, Monodomain model, or a mix of\nboth of these models. However, PyAnsys Heart exposes only the Monodomain model currently.\nThe Eikonal model does not use a cell model but only computes the activation time.\nThe passive electrical material properties are set with *EM_MAT_003 for 3D tissue and *EM_MAT_001 for the beams of the conduction system.\nThe Reaction Eikonal model first computes the activation time on each node, and then it assigns action potential curves to each node with a time delay that corresponds to the activation time. Passive properties are the same as those for the pure Eikonal model.\nThe cell model used in PyAnsys Heart is the TenTusscher et al. model. Other models to be added in the future.\nWhen UHCs are computed, the transmural coordinate is used to distinguish between endo-, epi-, and mid- myocardium layers using the corresponding version of the TenTusscher model.\nLS-DYNA supports other cell models and user-defined models. For more information, see the *EM_EP collection of keywords in the LS-DYNA manuals.\nTissue stimulation is set by default on the SA node in a four-chamber model and in the left and right apex in case of a left ventricle or biventricular model. However, you can define your own stimulation origin and profile.\nElectrophysiology\nsimulator.settings.settings.epanalysis.solvertype\nMonodomain\n*EM_CONTROL\nEikonal` (``*EM_CONTROL\nReactionEikonal\n*EM_CONTROL\n*EM_MAT_003\n*EM_MAT_001\n*EM_MAT_003\n*EM_MAT_001\n*EM_EP"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#mechanics",
        "title": "Getting started > PyAnsys Heart overview > Mechanics",
        "section": "Mechanics",
        "text": "Descriptions follow for key elements in cardiac mechanical models, along with their default options in PyAnsys Heart.\nCardiac tissue mechanics is modeled using MAT_295, which consists of two components: passive and active. By default, the passive component is represented by the Holzapfel-type model for both isotropic and anisotropic properties. For the active component, the Guccione model (ACTYPE=1) is used for mechanical models, while the Hunter model (ACTYPE=3) is employed for electromechanical models.\nBoundary conditions are considered following the approach presented in Strocchi et al.. Robin-type conditions are applied at the heart’s valve regions, depending on the specific model constructed. Additionally, the pericardium’s effect is accounted for by adding springs and dampers at the epicardium. For the ventricles, the stiffness of springs is scaled from different locations to constrain the motion primarily at the apex region.\nMany papers have described the coupling between 3D heart models and 0D circulation models, such as those by Agustin et al.. LS-DYNA uses CONTROL_VOLUME related keywords to achieve this coupling. By default, PyAnsys Heart provides a simple open-loop model. Specifically, a two-element Windkessel model is applied to the left and right ventricle. If atria are present, atrioventricular valves are represented by a diode model, and a constant venous inflow is set for both atria. If no atrium is present, a constant venous pressure (preload) is set.\nIt is assumed that the input geometry is in the state of end-diastole. To account for the initial stress from the end-diastolic pressure, the stress-free configuration is computed using the keyword *CONTROL_REFERENCE_CONFIGURATION. Then, the pressure is reapplied to the stress-free geometry, and a virtual end-diastolic mesh with the initial stress is exported. This mesh and initial stress is subsequently used in the final simulation.\nMechanics\nCONTROL_VOLUME\n*CONTROL_REFERENCE_CONFIGURATION"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#references",
        "title": "Getting started > PyAnsys Heart overview > References",
        "section": "References",
        "text": "Agustin et al.: Augustin, Christoph M., et al. “A computationally efficient physiologically comprehensive 3D-0D closed-loop model of the heart and circulation.” Computer methods in applied mechanics and engineering 386 (2021): 114092.\nBayer et al.: Bayer, J.D., Blake, R. C., Plank, G., and Trayanova, N. A., “A novel rule-based algorithm for assigning myocardial fiber orientation to computational heart models,” Annals of biomedical engineering, 40(10), 2243-2254 (2012)\nBayer et al.2: Bayer, Jason, et al. “Universal ventricular coordinates: A generic framework for describing position within the heart and transferring data.” Medical image analysis 45 (2018): 83-93.\nCostabal et al.: Costabal, Francisco Sahli, Daniel E. Hurtado, and Ellen Kuhl. “Generating Purkinje networks in the human heart.” Journal of biomechanics 49.12 (2016): 2455-2465.\nPiersanti et al.: Piersanti, Roberto, et al. “Modeling cardiac muscle fibers in ventricular and atrial electrophysiology simulations.” Computer Methods in Applied Mechanics and Engineering 373 (2021): 113468.\nPotse et al.: Potse, M., Dube, B., Richer, J., Vinet, A., Gulrajani, R.: A comparison of monodomain and bidomain reaction-diffusion models for action potential propagation in the human heart. IEEE Transactions on Biomedical Engineering 53(12), 2425- 2435 (dec 2006).\nRodero et al.: Rodero, C., et al. (2021). Virtual cohort of adult healthy four-chamber heart meshes from CT images. In PLOS Computational Biology (1.0.0).\nRoney et al.: Roney, Caroline H., et al., “Universal atrial coordinates applied to visualisation, registration and construction of patient specific meshes.” Medical image analysis 55 (2019): 65-75.\nStrocchi et al.: Strocchi, Marina, et al. “Simulating ventricular systolic motion in a four-chamber heart model with spatially varying robin boundary conditions to model the effect of the pericardium.” Journal of Biomechanics 101 (2020): 109645.\nTenTusscher et al.: Ten Tusscher, K. H., & Panfilov, A. V. (2006). Alternans and spiral breakup in a human ventricular tissue model. American Journal of Physiology-Heart and Circulatory Physiology, 291(3), H1088-H1100.\nReferences"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/MPIProgamNotFoundError",
        "href": "api/ansys/health/heart/exceptions/MPIProgamNotFoundError.html#mpiprogamnotfounderror",
        "title": "MPIProgamNotFoundError",
        "section": "MPIProgamNotFoundError",
        "text": "Bases: FileNotFoundError\nException raised when MPI program is not found.\nMPIProgamNotFoundError\nMPIProgamNotFoundError\nFileNotFoundError"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/MPIProgamNotFoundError",
        "href": "api/ansys/health/heart/exceptions/MPIProgamNotFoundError.html#ansys.health.heart.exceptions.MPIProgamNotFoundError",
        "title": "MPIProgamNotFoundError > MPIProgamNotFoundError > MPIProgamNotFoundError",
        "section": "MPIProgamNotFoundError > MPIProgamNotFoundError",
        "text": "exception ansys.health.heart.exceptions.MPIProgamNotFoundError\n\nBases: FileNotFoundError\n\nException raised when MPI program is not found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/MPIProgamNotFoundError",
        "href": "api/ansys/health/heart/exceptions/MPIProgamNotFoundError.html#import-detail",
        "title": "MPIProgamNotFoundError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#mechanicsdecks",
        "title": "MechanicsDecks",
        "section": "MechanicsDecks",
        "text": "Bases: BaseDecks\nUseful decks for a mechanics simulation.\nMechanicsDecks\nMechanicsDecks\nBaseDecks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#ansys.health.heart.writer.heart_decks.MechanicsDecks",
        "title": "MechanicsDecks > MechanicsDecks > MechanicsDecks",
        "section": "MechanicsDecks > MechanicsDecks",
        "text": "class ansys.health.heart.writer.heart_decks.MechanicsDecks\n\nBases: BaseDecks\n\nUseful decks for a mechanics simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#overview",
        "title": "MechanicsDecks > Overview",
        "section": "Overview",
        "text": "cap_elements\ncontrol_volume\npericardium\nOverview\ncap_elements\ncontrol_volume\npericardium"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#import-detail",
        "title": "MechanicsDecks > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#attribute-detail",
        "title": "MechanicsDecks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#MechanicsDecks.cap_elements",
        "title": "MechanicsDecks > Attribute detail > cap_elements",
        "section": "Attribute detail > cap_elements",
        "text": "MechanicsDecks.cap_elements: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#MechanicsDecks.control_volume",
        "title": "MechanicsDecks > Attribute detail > control_volume",
        "section": "Attribute detail > control_volume",
        "text": "MechanicsDecks.control_volume: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/MechanicsDecks.html#MechanicsDecks.pericardium",
        "title": "MechanicsDecks > Attribute detail > pericardium",
        "section": "Attribute detail > pericardium",
        "text": "MechanicsDecks.pericardium: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/index",
        "href": "api/ansys/health/heart/settings/material/ep_material/index.html#the-ep_materialpy-module",
        "title": "The ep_material.py module",
        "section": "The ep_material.py module",
        "text": "The ep_material.py module\nep_material.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/index",
        "href": "api/ansys/health/heart/settings/material/ep_material/index.html#summary",
        "title": "The ep_material.py module > Summary",
        "section": "Summary",
        "text": "CellModel\nAbstract class for different cell models.\nEPMaterialModel\nBase class for all EP material models.\nEPMaterial\nEP material module.\nm1\nSummary\nCellModel\nEPMaterialModel\nEPMaterial\nm1"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/index",
        "href": "api/ansys/health/heart/settings/material/ep_material/index.html#description",
        "title": "The ep_material.py module > Description",
        "section": "Description",
        "text": "Material module.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/index",
        "href": "api/ansys/health/heart/settings/material/ep_material/index.html#module-detail",
        "title": "The ep_material.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/index",
        "href": "api/ansys/health/heart/settings/material/ep_material/index.html#ep_material.m1",
        "title": "The ep_material.py module > Module detail > m1",
        "section": "Module detail > m1",
        "text": "ep_material.m1\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/objects/index",
        "href": "api/ansys/health/heart/objects/index.html#the-objectspy-module",
        "title": "The objects.py module",
        "section": "The objects.py module",
        "text": "The objects.py module\nobjects.py"
    },
    {
        "objectID": "api/ansys/health/heart/objects/index",
        "href": "api/ansys/health/heart/objects/index.html#summary",
        "title": "The objects.py module > Summary",
        "section": "Summary",
        "text": "Feature\nFeature class.\nSurfaceMesh\nSurface class.\nCavity\nCavity class.\nCap\nCap class.\nPoint\nPoint class, which can be used to collect relevant points in the mesh.\nMesh\nMesh class, which inherits from the PyVista unstructured grid object.\nPart\nPart class for backward compatibility.\nCapType\nEnumeration tracking cap names.\nSummary\nFeature\nSurfaceMesh\nCavity\nCap\nPoint\nMesh\nPart\nCapType"
    },
    {
        "objectID": "api/ansys/health/heart/objects/index",
        "href": "api/ansys/health/heart/objects/index.html#description",
        "title": "The objects.py module > Description",
        "section": "Description",
        "text": "Module that defines classes used in the heart model.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model4",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model4.html#model4",
        "title": "Model4",
        "section": "Model4",
        "text": "Hold data for active model 4.\nModel4\nModel4"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model4",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model4.html#ansys.health.heart.settings.material.material.ActiveModel.Model4",
        "title": "Model4 > Model4 > Model4",
        "section": "Model4 > Model4",
        "text": "class ansys.health.heart.settings.material.material.ActiveModel.Model4\n\nHold data for active model 4.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model4",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model4.html#import-detail",
        "title": "Model4 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/logger/InstanceFilter",
        "href": "api/ansys/health/heart/logger/InstanceFilter.html#instancefilter",
        "title": "InstanceFilter",
        "section": "InstanceFilter",
        "text": "Bases: logging.Filter\nEnsures that the instance_name record always exists.\nInstanceFilter\nInstanceFilter\nlogging.Filter\ninstance_name"
    },
    {
        "objectID": "api/ansys/health/heart/logger/InstanceFilter",
        "href": "api/ansys/health/heart/logger/InstanceFilter.html#ansys.health.heart.logger.InstanceFilter",
        "title": "InstanceFilter > InstanceFilter > InstanceFilter",
        "section": "InstanceFilter > InstanceFilter",
        "text": "class ansys.health.heart.logger.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsures that the instance_name record always exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/InstanceFilter",
        "href": "api/ansys/health/heart/logger/InstanceFilter.html#overview",
        "title": "InstanceFilter > Overview",
        "section": "Overview",
        "text": "filter\nFilter record.\nOverview\nfilter"
    },
    {
        "objectID": "api/ansys/health/heart/logger/InstanceFilter",
        "href": "api/ansys/health/heart/logger/InstanceFilter.html#import-detail",
        "title": "InstanceFilter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/logger/InstanceFilter",
        "href": "api/ansys/health/heart/logger/InstanceFilter.html#method-detail",
        "title": "InstanceFilter > Method detail",
        "section": "Method detail",
        "text": "Filter record.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/logger/InstanceFilter",
        "href": "api/ansys/health/heart/logger/InstanceFilter.html#InstanceFilter.filter",
        "title": "InstanceFilter > Method detail > filter",
        "section": "Method detail > filter",
        "text": "InstanceFilter.filter(record: logging.LogRecord)\n\nFilter record.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.html#cellmodel",
        "title": "CellModel",
        "section": "CellModel",
        "text": "Abstract class for different cell models.\nCellModel\nCellModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.html#ansys.health.heart.settings.material.ep_material.CellModel",
        "title": "CellModel > CellModel > CellModel",
        "section": "CellModel > CellModel",
        "text": "class ansys.health.heart.settings.material.ep_material.CellModel\n\nAbstract class for different cell models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.html#import-detail",
        "title": "CellModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.html#classes",
        "title": "CellModel > Classes",
        "section": "Classes",
        "text": "Tentusscher\nHold data for Tentusscher cell model.\nTentusscherEndo\nHold data for Tentusscher cell model in its endocardium version.\nTentusscherEpi\nHold data for Tentusscher cell model in its epicardium version.\nTentusscherMid\nHold data for Tentusscher cell model in its mid-myocardium version.\nClasses\nTentusscher\nTentusscherEndo\nTentusscherEpi\nTentusscherMid"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#settings",
        "title": "Settings",
        "section": "Settings",
        "text": "Generic settings class.\nSettings\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#ansys.health.heart.settings.settings.Settings",
        "title": "Settings > Settings > Settings",
        "section": "Settings > Settings",
        "text": "class ansys.health.heart.settings.settings.Settings\n\nGeneric settings class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#overview",
        "title": "Settings > Overview",
        "section": "Overview",
        "text": "set_values\nRead default settings from dictionary.\nserialize\nSerialize the settings, that is formats the Quantity as str(<value> <unit>).\nto_consistent_unit_system\nConvert units to a consistent unit system.\n__repr__\nRepresent object in dictionary in YAML style.\nOverview\nset_values\nserialize\nto_consistent_unit_system\n__repr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#import-detail",
        "title": "Settings > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#method-detail",
        "title": "Settings > Method detail",
        "section": "Method detail",
        "text": "Represent object in dictionary in YAML style.\nRead default settings from dictionary.\nSerialize the settings, that is formats the Quantity as str(<value> <unit>).\nConvert units to a consistent unit system.\nCurrently the only supported unit system is [“MPa”, “mm”, “N”, “ms”, “g”]\nFor instance:\nQuantity(10, “mm/s”) –> Quantity(0.01, “mm/ms”)\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#Settings.__repr__",
        "title": "Settings > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Settings.__repr__()\n\nRepresent object in dictionary in YAML style.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#Settings.set_values",
        "title": "Settings > Method detail > set_values",
        "section": "Method detail > set_values",
        "text": "Settings.set_values(defaults: dict)\n\nRead default settings from dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#Settings.serialize",
        "title": "Settings > Method detail > serialize",
        "section": "Method detail > serialize",
        "text": "Settings.serialize(remove_units: bool = False) -> dict\n\nSerialize the settings, that is formats the Quantity as str(<value> <unit>).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Settings",
        "href": "api/ansys/health/heart/settings/settings/Settings.html#Settings.to_consistent_unit_system",
        "title": "Settings > Method detail > to_consistent_unit_system",
        "section": "Method detail > to_consistent_unit_system",
        "text": "Settings.to_consistent_unit_system()\n\nConvert units to a consistent unit system.\n\nNotes\n\nCurrently the only supported unit system is [“MPa”, “mm”, “N”, “ms”, “g”]\nFor instance:\nQuantity(10, “mm/s”) –> Quantity(0.01, “mm/ms”)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#the-downloadpy-module",
        "title": "The download.py module",
        "section": "The download.py module",
        "text": "The download.py module\ndownload.py"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#summary",
        "title": "The download.py module > Summary",
        "section": "Summary",
        "text": "download_case_from_zenodo\nDownload a case from the remote repository.\nunpack_case\nUnpack the downloaded tarball file.\ndownload_all_cases\nDownload all supported cases.\nunpack_cases\nUnpack a list of TAR files.\nSummary\ndownload_case_from_zenodo\nunpack_case\ndownload_all_cases\nunpack_cases"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#description",
        "title": "The download.py module > Description",
        "section": "Description",
        "text": "Module containing methods to download cases from public databases.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#module-detail",
        "title": "The download.py module > Module detail",
        "section": "Module detail",
        "text": "Download a case from the remote repository.\nname of the database. Options are 'Strocchi2020' or 'Rodero2021'.\nCase number to download.\nPath to the folder to download the case to.\nPath to the tarball that contains the VTK/CASE files.\nDownload case 1 from the public repository ('Strocchi2020') of pathological hearts.\nDownload case 1 from the public repository ('Rodero2021') of healthy hearts.\nUnpack the downloaded tarball file.\nPath to TAR.GZ file.\nWhether to reduce the size of the unpacked files by removing the VTK file for the\nStrocchi database.\nPath to the CASE or VTK file.\nDownload all supported cases.\nBase directory to download cases to.\nNote that depending on bandwidth, downloading all cases might take a lot of\ntime.\nTo unpack all cases, you can use the unpack_cases() method:\nUnpack a list of TAR files.\nList of TAR files to unpack.\nModule detail\npython:str\n'Strocchi2020'\n'Rodero2021'\npython:int\nPath\nPath\n'Strocchi2020'\n'Rodero2021'\nPath\npython:True\npython:str\npython:str\nunpack_cases()\ntyping.List"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#download.download_case_from_zenodo",
        "title": "The download.py module > Module detail > download_case_from_zenodo",
        "section": "Module detail > download_case_from_zenodo",
        "text": "download.download_case_from_zenodo(database: str, case_number: int, download_folder: pathlib.Path, overwrite: bool = True, validate_hash: bool = True) -> pathlib.Path | None\n\nDownload a case from the remote repository.\n\nParameters\n\ndatabase\n\npython:str\n\nname of the database. Options are 'Strocchi2020' or 'Rodero2021'.\n\ncase_number\n\npython:int\n\nCase number to download.\n\ndownload_folder\n\nPath\n\nPath to the folder to download the case to.\n\nReturns\n\nPath\n\nPath to the tarball that contains the VTK/CASE files.\n\nExamples\n\nDownload case 1 from the public repository ('Strocchi2020') of pathological hearts.\n\n>>> path_to_tar_file = download_case_from_zenodo(\n    database=\"Strocchi2020\", case_number=1, download_folder=\"my/download/folder\"\n    )\n\nDownload case 1 from the public repository ('Rodero2021') of healthy hearts.\n\n>>> path_to_tar_file = download_case_from_zenodo(\n    database=\"Rodero2021\", case_number=1, download_folder=\"my/download/folder\"\n    )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#download.unpack_case",
        "title": "The download.py module > Module detail > unpack_case",
        "section": "Module detail > unpack_case",
        "text": "download.unpack_case(tar_path: pathlib.Path, reduce_size: bool = True) -> str | bool\n\nUnpack the downloaded tarball file.\n\nParameters\n\ntar_path\n\nPath\n\nPath to TAR.GZ file.\n\nreduce_size\n\nbool, default: python:True\n\nWhether to reduce the size of the unpacked files by removing the VTK file for the\nStrocchi database.\n\nReturns\n\npython:str\n\nPath to the CASE or VTK file.\n\nExamples\n\n>>> from ansys.health.heart.utils.download import unpack_case\n>>> path = unpack_case(\"Rodero2021\\\\01.tar.gz\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#download.download_all_cases",
        "title": "The download.py module > Module detail > download_all_cases",
        "section": "Module detail > download_all_cases",
        "text": "download.download_all_cases(download_dir: str = None) -> list[str]\n\nDownload all supported cases.\n\nParameters\n\ndownload_dir\n\npython:str\n\nBase directory to download cases to.\n\nNotes\n\nNote that depending on bandwidth, downloading all cases might take a lot of\ntime.\n\nExamples\n\n>>> from ansys.health.heart.utils.download import download_all_cases\n>>> tar_files = download_all_cases(\"my-downloads\")\n\nTo unpack all cases, you can use the unpack_cases() method:\n\n>>> from ansys.health.heart.utils.download import unpack_cases\n>>> unpack_cases(tar_files)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/download/index",
        "href": "api/ansys/health/heart/utils/download/index.html#download.unpack_cases",
        "title": "The download.py module > Module detail > unpack_cases",
        "section": "Module detail > unpack_cases",
        "text": "download.unpack_cases(list_of_tar_files: List) -> None\n\nUnpack a list of TAR files.\n\nParameters\n\nlist_of_tar_files\n\ntyping.List\n\nList of TAR files to unpack.\n\nExamples\n\n>>> from ansys.health.heart.utils.download import unpack_cases\n>>> unpack_cases([\"01.tar.gz\", \"02.tar.gz\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#flow",
        "title": "Flow",
        "section": "Flow",
        "text": "System state for flow.\nFlow\nFlow"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#ansys.health.heart.post.system_model_post.Flow",
        "title": "Flow > Flow > Flow",
        "section": "Flow > Flow",
        "text": "class ansys.health.heart.post.system_model_post.Flow\n\nSystem state for flow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#overview",
        "title": "Flow > Overview",
        "section": "Overview",
        "text": "cavity\nartery\nvenous\nperipheral\nOverview\ncavity\nartery\nvenous\nperipheral"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#import-detail",
        "title": "Flow > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#attribute-detail",
        "title": "Flow > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#Flow.cavity",
        "title": "Flow > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Flow.cavity: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#Flow.artery",
        "title": "Flow > Attribute detail > artery",
        "section": "Attribute detail > artery",
        "text": "Flow.artery: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#Flow.venous",
        "title": "Flow > Attribute detail > venous",
        "section": "Attribute detail > venous",
        "text": "Flow.venous: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Flow",
        "href": "api/ansys/health/heart/post/system_model_post/Flow.html#Flow.peripheral",
        "title": "Flow > Attribute detail > peripheral",
        "section": "Attribute detail > peripheral",
        "text": "Flow.peripheral: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EPAnalysis",
        "href": "api/ansys/health/heart/settings/settings/EPAnalysis.html#epanalysis",
        "title": "EPAnalysis",
        "section": "EPAnalysis",
        "text": "Bases: Analysis\nClass for EP analysis settings.\nEPAnalysis\nEPAnalysis\nAnalysis"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EPAnalysis",
        "href": "api/ansys/health/heart/settings/settings/EPAnalysis.html#ansys.health.heart.settings.settings.EPAnalysis",
        "title": "EPAnalysis > EPAnalysis > EPAnalysis",
        "section": "EPAnalysis > EPAnalysis",
        "text": "class ansys.health.heart.settings.settings.EPAnalysis\n\nBases: Analysis\n\nClass for EP analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EPAnalysis",
        "href": "api/ansys/health/heart/settings/settings/EPAnalysis.html#overview",
        "title": "EPAnalysis > Overview",
        "section": "Overview",
        "text": "solvertype\nOverview\nsolvertype"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EPAnalysis",
        "href": "api/ansys/health/heart/settings/settings/EPAnalysis.html#import-detail",
        "title": "EPAnalysis > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EPAnalysis",
        "href": "api/ansys/health/heart/settings/settings/EPAnalysis.html#attribute-detail",
        "title": "EPAnalysis > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/EPAnalysis",
        "href": "api/ansys/health/heart/settings/settings/EPAnalysis.html#EPAnalysis.solvertype",
        "title": "EPAnalysis > Attribute detail > solvertype",
        "section": "Attribute detail > solvertype",
        "text": "EPAnalysis.solvertype: Literal['Monodomain', 'Eikonal', 'ReactionEikonal'] = 'Monodomain'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/InvalidHeartModelError",
        "href": "api/ansys/health/heart/exceptions/InvalidHeartModelError.html#invalidheartmodelerror",
        "title": "InvalidHeartModelError",
        "section": "InvalidHeartModelError",
        "text": "Bases: Exception\nException raised when the heart model is invalid.\nInvalidHeartModelError\nInvalidHeartModelError\nException"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/InvalidHeartModelError",
        "href": "api/ansys/health/heart/exceptions/InvalidHeartModelError.html#ansys.health.heart.exceptions.InvalidHeartModelError",
        "title": "InvalidHeartModelError > InvalidHeartModelError > InvalidHeartModelError",
        "section": "InvalidHeartModelError > InvalidHeartModelError",
        "text": "exception ansys.health.heart.exceptions.InvalidHeartModelError\n\nBases: Exception\n\nException raised when the heart model is invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/InvalidHeartModelError",
        "href": "api/ansys/health/heart/exceptions/InvalidHeartModelError.html#import-detail",
        "title": "InvalidHeartModelError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/index",
        "href": "api/ansys/health/heart/simulator/index.html#the-simulatorpy-module",
        "title": "The simulator.py module",
        "section": "The simulator.py module",
        "text": "The simulator.py module\nsimulator.py"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/index",
        "href": "api/ansys/health/heart/simulator/index.html#summary",
        "title": "The simulator.py module > Summary",
        "section": "Summary",
        "text": "BaseSimulator\nBase class for the simulator.\nEPSimulator\nEP (electrophysiology) simulator.\nMechanicsSimulator\nMechanics simulator with imposed active stress.\nEPMechanicsSimulator\nCoupled EP-mechanics simulator with computed electrophysiology.\nrun_lsdyna\nStandalone function for running LS-DYNA.\nSummary\nBaseSimulator\nEPSimulator\nMechanicsSimulator\nEPMechanicsSimulator\nrun_lsdyna"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/index",
        "href": "api/ansys/health/heart/simulator/index.html#description",
        "title": "The simulator.py module > Description",
        "section": "Description",
        "text": "Simulator module.\nOptions for simulation:\nEP-only\nWith/without fibers\nWith/without Purkinje\nElectro-mechanics\nSimplified EP (imposed activation)\nCoupled electro-mechanics\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/index",
        "href": "api/ansys/health/heart/simulator/index.html#module-detail",
        "title": "The simulator.py module > Module detail",
        "section": "Module detail",
        "text": "Standalone function for running LS-DYNA.\nInput file for LS-DYNA.\nLS-DYNA settings, such as path to the executable file, executable type,\nand platform.\nDirectory for the simulation.\nModule detail\nPath\nDynaSettings\npython:None\nPath\npython:None"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/index",
        "href": "api/ansys/health/heart/simulator/index.html#simulator.run_lsdyna",
        "title": "The simulator.py module > Module detail > run_lsdyna",
        "section": "Module detail > run_lsdyna",
        "text": "simulator.run_lsdyna(path_to_input: pathlib, settings: ansys.health.heart.settings.settings.DynaSettings = None, simulation_directory: pathlib = None)\n\nStandalone function for running LS-DYNA.\n\nParameters\n\npath_to_input\n\nPath\n\nInput file for LS-DYNA.\n\nsettings\n\nDynaSettings, default: python:None\n\nLS-DYNA settings, such as path to the executable file, executable type,\nand platform.\n\nsimulation_directory\n\nPath, default: python:None\n\nDirectory for the simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/utils/fluent_reader/index",
        "href": "api/ansys/health/heart/utils/fluent_reader/index.html#the-fluent_readerpy-module",
        "title": "The fluent_reader.py module",
        "section": "The fluent_reader.py module",
        "text": "The fluent_reader.py module\nfluent_reader.py"
    },
    {
        "objectID": "api/ansys/health/heart/utils/fluent_reader/index",
        "href": "api/ansys/health/heart/utils/fluent_reader/index.html#summary",
        "title": "The fluent_reader.py module > Summary",
        "section": "Summary",
        "text": "Summary"
    },
    {
        "objectID": "api/ansys/health/heart/utils/fluent_reader/index",
        "href": "api/ansys/health/heart/utils/fluent_reader/index.html#description",
        "title": "The fluent_reader.py module > Description",
        "section": "Description",
        "text": "Module containing functions to read and write Fluent meshes in HDF5 format.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#analysis",
        "title": "Analysis",
        "section": "Analysis",
        "text": "Bases: Settings\nClass for analysis settings.\nAnalysis\nAnalysis\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#ansys.health.heart.settings.settings.Analysis",
        "title": "Analysis > Analysis > Analysis",
        "section": "Analysis > Analysis",
        "text": "class ansys.health.heart.settings.settings.Analysis\n\nBases: Settings\n\nClass for analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#overview",
        "title": "Analysis > Overview",
        "section": "Overview",
        "text": "end_time\nEnd time of simulation.\ndtmin\nMinimum time-step of simulation.\ndtmax\nMaximum time-step of simulation.\ndt_d3plot\nTime-step of d3plot export.\ndt_icvout\nTime-step of icvout export.\nglobal_damping\nGlobal damping constant.\nstiffness_damping\nStiffness damping constant.\nOverview\nend_time\ndtmin\ndtmax\ndt_d3plot\ndt_icvout\nglobal_damping\nstiffness_damping"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#import-detail",
        "title": "Analysis > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#attribute-detail",
        "title": "Analysis > Attribute detail",
        "section": "Attribute detail",
        "text": "End time of simulation.\nMinimum time-step of simulation.\nMaximum time-step of simulation.\nTime-step of d3plot export.\nTime-step of icvout export.\nGlobal damping constant.\nStiffness damping constant.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#Analysis.end_time",
        "title": "Analysis > Attribute detail > end_time",
        "section": "Attribute detail > end_time",
        "text": "Analysis.end_time: pint.Quantity\n\nEnd time of simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#Analysis.dtmin",
        "title": "Analysis > Attribute detail > dtmin",
        "section": "Attribute detail > dtmin",
        "text": "Analysis.dtmin: pint.Quantity\n\nMinimum time-step of simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#Analysis.dtmax",
        "title": "Analysis > Attribute detail > dtmax",
        "section": "Attribute detail > dtmax",
        "text": "Analysis.dtmax: pint.Quantity\n\nMaximum time-step of simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#Analysis.dt_d3plot",
        "title": "Analysis > Attribute detail > dt_d3plot",
        "section": "Attribute detail > dt_d3plot",
        "text": "Analysis.dt_d3plot: pint.Quantity\n\nTime-step of d3plot export.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#Analysis.dt_icvout",
        "title": "Analysis > Attribute detail > dt_icvout",
        "section": "Attribute detail > dt_icvout",
        "text": "Analysis.dt_icvout: pint.Quantity\n\nTime-step of icvout export.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#Analysis.global_damping",
        "title": "Analysis > Attribute detail > global_damping",
        "section": "Attribute detail > global_damping",
        "text": "Analysis.global_damping: pint.Quantity\n\nGlobal damping constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Analysis",
        "href": "api/ansys/health/heart/settings/settings/Analysis.html#Analysis.stiffness_damping",
        "title": "Analysis > Attribute detail > stiffness_damping",
        "section": "Attribute detail > stiffness_damping",
        "text": "Analysis.stiffness_damping: pint.Quantity\n\nStiffness damping constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks.html#purkinjegenerationdecks",
        "title": "PurkinjeGenerationDecks",
        "section": "PurkinjeGenerationDecks",
        "text": "Bases: BaseDecks\nUseful decks for Purkinje generation.\nPurkinjeGenerationDecks\nPurkinjeGenerationDecks\nBaseDecks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks.html#ansys.health.heart.writer.heart_decks.PurkinjeGenerationDecks",
        "title": "PurkinjeGenerationDecks > PurkinjeGenerationDecks > PurkinjeGenerationDecks",
        "section": "PurkinjeGenerationDecks > PurkinjeGenerationDecks",
        "text": "class ansys.health.heart.writer.heart_decks.PurkinjeGenerationDecks\n\nBases: BaseDecks\n\nUseful decks for Purkinje generation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks.html#overview",
        "title": "PurkinjeGenerationDecks > Overview",
        "section": "Overview",
        "text": "main\nep_settings\nOverview\nmain\nep_settings"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks.html#import-detail",
        "title": "PurkinjeGenerationDecks > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks.html#attribute-detail",
        "title": "PurkinjeGenerationDecks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks.html#PurkinjeGenerationDecks.main",
        "title": "PurkinjeGenerationDecks > Attribute detail > main",
        "section": "Attribute detail > main",
        "text": "PurkinjeGenerationDecks.main: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/PurkinjeGenerationDecks.html#PurkinjeGenerationDecks.ep_settings",
        "title": "PurkinjeGenerationDecks > Attribute detail > ep_settings",
        "section": "Attribute detail > ep_settings",
        "text": "PurkinjeGenerationDecks.ep_settings: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/index",
        "href": "api/ansys/health/heart/post/system_model_post/index.html#the-system_model_postpy-module",
        "title": "The system_model_post.py module",
        "section": "The system_model_post.py module",
        "text": "The system_model_post.py module\nsystem_model_post.py"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/index",
        "href": "api/ansys/health/heart/post/system_model_post/index.html#summary",
        "title": "The system_model_post.py module > Summary",
        "section": "Summary",
        "text": "Pressure\nSystem state for pressure.\nFlow\nSystem state for flow.\nVolume\nSystem state for volume.\nSystemState\nSystem state including pressure, flow, and volume.\nZeroDSystem\n0D circulation system model (for one cavity).\nSystemModelPost\nPostprocessing system model.\nSummary\nPressure\nFlow\nVolume\nSystemState\nZeroDSystem\nSystemModelPost"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/index",
        "href": "api/ansys/health/heart/post/system_model_post/index.html#description",
        "title": "The system_model_post.py module > Description",
        "section": "Description",
        "text": "Module for postprocessing system model data.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/index",
        "href": "api/ansys/health/heart/pre/conduction_path/index.html#the-conduction_pathpy-module",
        "title": "The conduction_path.py module",
        "section": "The conduction_path.py module",
        "text": "The conduction_path.py module\nconduction_path.py"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/index",
        "href": "api/ansys/health/heart/pre/conduction_path/index.html#summary",
        "title": "The conduction_path.py module > Summary",
        "section": "Summary",
        "text": "ConductionPath\nConduction path class.\nConductionPathType\nConduction Path types.\nSummary\nConductionPath\nConductionPathType"
    },
    {
        "objectID": "api/ansys/health/heart/pre/conduction_path/index",
        "href": "api/ansys/health/heart/pre/conduction_path/index.html#description",
        "title": "The conduction_path.py module > Description",
        "section": "Description",
        "text": "Conduction system class.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/LSDYNANotFoundError",
        "href": "api/ansys/health/heart/exceptions/LSDYNANotFoundError.html#lsdynanotfounderror",
        "title": "LSDYNANotFoundError",
        "section": "LSDYNANotFoundError",
        "text": "Bases: FileNotFoundError\nException raised when the LS-DYNA executable file is not found.\nLSDYNANotFoundError\nLSDYNANotFoundError\nFileNotFoundError"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/LSDYNANotFoundError",
        "href": "api/ansys/health/heart/exceptions/LSDYNANotFoundError.html#ansys.health.heart.exceptions.LSDYNANotFoundError",
        "title": "LSDYNANotFoundError > LSDYNANotFoundError > LSDYNANotFoundError",
        "section": "LSDYNANotFoundError > LSDYNANotFoundError",
        "text": "exception ansys.health.heart.exceptions.LSDYNANotFoundError\n\nBases: FileNotFoundError\n\nException raised when the LS-DYNA executable file is not found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/exceptions/LSDYNANotFoundError",
        "href": "api/ansys/health/heart/exceptions/LSDYNANotFoundError.html#import-detail",
        "title": "LSDYNANotFoundError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#simulationsettings",
        "title": "SimulationSettings",
        "section": "SimulationSettings",
        "text": "Class for keeping track of settings.\nSimulationSettings\nSimulationSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#ansys.health.heart.settings.settings.SimulationSettings",
        "title": "SimulationSettings > SimulationSettings > SimulationSettings",
        "section": "SimulationSettings > SimulationSettings",
        "text": "class ansys.health.heart.settings.settings.SimulationSettings(mechanics: bool = True, electrophysiology: bool = True, fiber: bool = True, purkinje: bool = True, stress_free: bool = True)\n\nClass for keeping track of settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#overview",
        "title": "SimulationSettings > Overview",
        "section": "Overview",
        "text": "save\nSave simulation settings to disk.\nload\nLoad simulation settings.\nload_defaults\nLoad default simulation settings.\nto_consistent_unit_system\nConvert all settings to consistent unit-system [“MPa”, “mm”, “N”, “ms”, “g”].\nget_mechanical_material\nLoad mechanical materials from settings.\nget_ventricle_fiber_rotation\nGet rotation angles from settings.\n__repr__\nRepresent object as list of relevant attribute names.\nOverview\nsave\nload\nload_defaults\nto_consistent_unit_system\nget_mechanical_material\nget_ventricle_fiber_rotation\n__repr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#import-detail",
        "title": "SimulationSettings > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#method-detail",
        "title": "SimulationSettings > Method detail",
        "section": "Method detail",
        "text": "Represent object as list of relevant attribute names.\nSave simulation settings to disk.\nPath to target .json or .yml file\nFlag indicating whether to remove units before writing, by default False\nCreate examples settings with default values.\nLoad simulation settings.\nPath to yaml or json file.\nCreate examples settings with default values.\nLoad settings in second SimulationSettings object.\nLoad default simulation settings.\nCreate examples settings with default values.\nLoad module\n>>> from ansys.health.heart.settings.settings import SimulationSettings\nInstantiate settings object.\nConvert all settings to consistent unit-system [“MPa”, “mm”, “N”, “ms”, “g”].\nConvert to the consistent unit system [“MPa”, “mm”, “N”, “ms”, “g”].\nImport necessary modules\n>>> from ansys.health.heart.settings.settings import SimulationSettings\n>>> from pint import Quantity\nInstantiate settings\n>>> settings = SimulationSettings()\n>>> settings.mechanics.analysis.end_time = Quantity(1, “s”)\n>>> settings.to_consistent_unit_system()\n>>> settings.mechanics.analysis.end_time\n<Quantity(1000.0, ‘millisecond’)>\nLoad mechanical materials from settings.\nType of required maerial\nIf MAT295 is coupled with EP simulation, by default False\nmaterial with parameters in settings\nGet rotation angles from settings.\nFiber rule based methods\nrotation angles alpha and beta\nMethod detail\npathlib.Path\noptional\npathlib.Path\nLiteral\noptional\nMAT295\nLiteral\npython:dict"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#SimulationSettings.__repr__",
        "title": "SimulationSettings > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "SimulationSettings.__repr__()\n\nRepresent object as list of relevant attribute names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#SimulationSettings.save",
        "title": "SimulationSettings > Method detail > save",
        "section": "Method detail > save",
        "text": "SimulationSettings.save(filename: pathlib.Path, remove_units: bool = False)\n\nSave simulation settings to disk.\n\nParameters\n\nfilename\n\npathlib.Path\n\nPath to target .json or .yml file\n\nremove_units\n\nbool, optional\n\nFlag indicating whether to remove units before writing, by default False\n\nExamples\n\nCreate examples settings with default values.\n\n>>> from ansys.health.heart.settings.settings import SimulationSettings\n>>> settings = SimulationSettings()\n>>> settings.load_defaults()\n>>> settings.save(\"my_settings.yml\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#SimulationSettings.load",
        "title": "SimulationSettings > Method detail > load",
        "section": "Method detail > load",
        "text": "SimulationSettings.load(filename: pathlib.Path)\n\nLoad simulation settings.\n\nParameters\n\nfilename\n\npathlib.Path\n\nPath to yaml or json file.\n\nExamples\n\nCreate examples settings with default values.\n\n>>> from ansys.health.heart.settings.settings import SimulationSettings\n>>> settings = SimulationSettings()\n>>> settings.load_defaults()\n>>> settings.save(\"my_settings.yml\")\n\nLoad settings in second SimulationSettings object.\n\n>>> settings1 = SimulationSettings()\n>>> settings1.load(\"my_settings.yml\")\n>>> assert settings.mechanics.analysis == settings1.mechanics.analysis\nTrue\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#SimulationSettings.load_defaults",
        "title": "SimulationSettings > Method detail > load_defaults",
        "section": "Method detail > load_defaults",
        "text": "SimulationSettings.load_defaults()\n\nLoad default simulation settings.\n\nExamples\n\nCreate examples settings with default values.\n\nLoad module\n>>> from ansys.health.heart.settings.settings import SimulationSettings\n\nInstantiate settings object.\n\n>>> settings = SimulationSettings()\n>>> settings.load_defaults()\n>>> settings.mechanics.analysis\nAnalysis:\n  end_time: 3000.0 millisecond\n  dtmin: 10.0 millisecond\n  dtmax: 10.0 millisecond\n  dt_d3plot: 50.0 millisecond\n  dt_icvout: 1.0 millisecond\n  global_damping: 0.5 / millisecond\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#SimulationSettings.to_consistent_unit_system",
        "title": "SimulationSettings > Method detail > to_consistent_unit_system",
        "section": "Method detail > to_consistent_unit_system",
        "text": "SimulationSettings.to_consistent_unit_system()\n\nConvert all settings to consistent unit-system [“MPa”, “mm”, “N”, “ms”, “g”].\n\nExamples\n\nConvert to the consistent unit system [“MPa”, “mm”, “N”, “ms”, “g”].\n\nImport necessary modules\n>>> from ansys.health.heart.settings.settings import SimulationSettings\n>>> from pint import Quantity\n\nInstantiate settings\n>>> settings = SimulationSettings()\n>>> settings.mechanics.analysis.end_time = Quantity(1, “s”)\n>>> settings.to_consistent_unit_system()\n>>> settings.mechanics.analysis.end_time\n<Quantity(1000.0, ‘millisecond’)>\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#SimulationSettings.get_mechanical_material",
        "title": "SimulationSettings > Method detail > get_mechanical_material",
        "section": "Method detail > get_mechanical_material",
        "text": "SimulationSettings.get_mechanical_material(required_type: Literal['isotropic', 'anisotropic'], ep_coupled=False) -> ansys.health.heart.settings.material.material.Mat295\n\nLoad mechanical materials from settings.\n\nParameters\n\nrequired_type\n\nLiteral['isotropic','anisotropic']\n\nType of required maerial\n\nep_coupled\n\nbool, optional\n\nIf MAT295 is coupled with EP simulation, by default False\n\nReturns\n\nMAT295\n\nmaterial with parameters in settings\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/SimulationSettings",
        "href": "api/ansys/health/heart/settings/settings/SimulationSettings.html#SimulationSettings.get_ventricle_fiber_rotation",
        "title": "SimulationSettings > Method detail > get_ventricle_fiber_rotation",
        "section": "Method detail > get_ventricle_fiber_rotation",
        "text": "SimulationSettings.get_ventricle_fiber_rotation(method: Literal['LSDYNA', 'D-RBM']) -> dict\n\nGet rotation angles from settings.\n\nParameters\n\nmethod\n\nLiteral[&quot;LSDYNA&quot;, &quot;D\n\nFiber rule based methods\n\nReturns\n\npython:dict\n\nrotation angles alpha and beta\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "Release notes"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0132-may-20-2025",
        "title": "Release notes > 0.13.2 (May 20, 2025)",
        "section": "0.13.2 (May 20, 2025)",
        "text": "bump ansys-sphinx-theme\n#1102\nsupport python 3.10\n#1120\nupdate contributing.rst\n#1105\nadd acknowledgments\n#1110\nfix links in README\n#1116\nupdate install instructions\n#1117\nupdate the badges in readme\n#1119\nupdate scipy requirement from <=1.15.2 to <=1.15.3\n#1108\nbump the actions group across 1 directory with 3 updates\n#1088\nbump version to 0.13.dev0\n#1096\nupdate CHANGELOG for v0.12.1\n#1100\nupdate CHANGELOG for v0.12.2\n#1104\nrelease to public pypi\n#1112\nrefactor dyna writer to improve maintainability\n#1101\nrefactor and further cleanup for release\n#1109\n0.13.2 (May 20, 2025)"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0122-may-08-2025",
        "title": "Release notes > 0.12.2 (May 08, 2025)",
        "section": "0.12.2 (May 08, 2025)",
        "text": "closed system\n#1021\ntechnical review\n#1037\nimprove-EP-default-conduction\n#1069\nallow passing additional keyword arguments to launch_fluent\n#1095\nmodify beam mesh doc strings\n#1030\nremove wheelhouse from doc/source/_static dir\n#1032\nfollow ansys.health namespace\n#1036\ndocumentation build\n#1039\nrun examples in pipelines\n#1040\nfall back to mpiexec when mpirun is not found\n#1050\navoid pyvista 0.45\n#1060\nadding EM_CONTROL_TIMESTEP to fiber generation decks\n#1071\nmutable default\n#1072\nforce update node mesh ID in laplacewriter\n#1079\nconvert int64 data to int32 for visualization\n#1097\nchangelog actions version in release ci\n#1099\noverall review\n#1043\nlink to documentation is broken\n#1046\nexecute all examples nightly doc build\n#1054\nupdate atrial fiber example\n#1064\nupdate user guide and expose pre, post and simulator api docs\n#1065\ninteractive plots in examples\n#1073\nedits based on skimming rendered doc\n#1075\nadd left ventricle mechanical example\n#1076\nadd basic ep postprocessor example\n#1080\nfix interactive plots in doc build\n#1086\ncleanup and fixes for examples\n#1087\nswitch to ReactionEikonal for ep-mechanics example\n#1090\nreduce size of vtksz for doc build\n#1091\nupdate flit-core requirement from <3.11,>=3.2 to >=3.2,<4\n#1025\nbump pytest-cov from 6.0.0 to 6.1.1\n#1026\nupdate numpy requirement from <=2.2.4 to <=2.2.5\n#1059\nupdate CHANGELOG for v0.11.0\n#1023\nbump version to 0.12.dev0\n#1033\nbump the actions group across 1 directory with 4 updates\n#1034\nbump ansys/actions from 9.0.0 to 9.0.2 in the actions group\n#1048\nuse intelmpi on runner for doc build\n#1061\nupdate nightly and release doc builds\n#1070\nonly run release workflow on tag push\n#1098\nstandardize type hints for pre, post, and utils subpackages\n#1018\nremove unused and outdated method\n#1035\nimprove how conduction paths and their data are managed\n#1041\nconsolidate _BeamsMesh functionality into Mesh\n#1042\nonly print LS-DYNA stdout to debug level\n#1081\ndeprecate update parts\n#1089\n0.12.2 (May 08, 2025)\npre\npost\nutils"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0110-april-07-2025",
        "title": "Release notes > 0.11.0 (April 07, 2025)",
        "section": "0.11.0 (April 07, 2025)",
        "text": "add changelog actions and changelog documentation\n#908\nhandle incompressibility consistently\n#909\nrefactor-beam-networks\n#932\nadd D-RBM method for left ventricle model\n#933\ncompute ventricle thickening\n#945\nset stiffness damping\n#980\nadd module for custom exceptions\n#990\nAppend user k files\n#992\nadd-EMCONTROLTIMESTEP-in-ep\n#922\nfix cap types and cap type check\n#935\nrefactor part id assignment post wrap\n#946\nsyntax error\n#950\ntox file correction and improvement\n#956\ntest_ep_postprocessor tests on Github runner\n#971\nreassign part ids when no orphan cells are found\n#983\nshutil.which for wsl\n#995\npinned versions for direct dependencies\n#996\nCleanup\n#923\nadd the landing page\n#949\nrefactor user guide and getting started\n#955\ncontributing guide improvement\n#961\nupdate docstrings and standardize periods\n#991\nbump tox from 4.24.1 to 4.24.2\n#910\nbump ansys-dpf-core from 0.13.4 to 0.13.6\n#912\ncleanup dependencies list\n#913\nbump ansys-fluent-core from 0.29.0 to 0.30.0\n#940\nupdate numpy requirement from <=2.2.3 to <=2.2.4\n#941\nbump the docs-deps group across 1 directory with 2 updates\n#954\nself hosted runner\n#904\nworkflow improvements\n#951\nmark and cleanup tests that require dpf\n#981\nrelease to private pypi\n#1019\nclean up deprecated dump model\n#914\nvolume meshing and mesher module\n#915\nname of Material 295\n#918\ncleanup and introduce new environment variables to manage automation\n#919\nvolume meshing and mesher module (#915)\n#921\ncreate misc module\n#924\nrename landmarks module to landmark_utils\n#927\nmove slerp methods to misc\n#930\ndownload module\n#934\nrename custom keywords and keywords_module\n#936\nuhcwriter\n#937\nrename vtkmethods to vtk_utils\n#938\ncleanup paths in examples\n#943\nmecha writer clean up\n#944\nadd method to get fluent ui-mode\n#957\nmove symbols to dpf utils and cleanup\n#960\nreplace wget by httpx\n#962\ncleanup and refactor preprocessor module\n#969\nrename helpers subpackage and downloader module\n#970\ndynain file in mechanical simulator\n#977\nboundary type and anatomy axis exception\n#988\nremove deprecated arguments and methods\n#998\nmove packages to core\n#1014\nchange structure of tests\n#1017\n0.11.0 (April 07, 2025)"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model2",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model2.html#model2",
        "title": "Model2",
        "section": "Model2",
        "text": "Hold data for active model 2.\nModel2\nModel2"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model2",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model2.html#ansys.health.heart.settings.material.material.ActiveModel.Model2",
        "title": "Model2 > Model2 > Model2",
        "section": "Model2 > Model2",
        "text": "class ansys.health.heart.settings.material.material.ActiveModel.Model2\n\nHold data for active model 2.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model2",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model2.html#import-detail",
        "title": "Model2 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#mechanicsdynawriter",
        "title": "MechanicsDynaWriter",
        "section": "MechanicsDynaWriter",
        "text": "Bases: ansys.health.heart.writer.base_writer.BaseDynaWriter\nClass for preparing the input for a mechanics LS-DYNA simulation.\nMechanicsDynaWriter\nMechanicsDynaWriter\nansys.health.heart.writer.base_writer.BaseDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#ansys.health.heart.writer.mechanics_writer.MechanicsDynaWriter",
        "title": "MechanicsDynaWriter > MechanicsDynaWriter > MechanicsDynaWriter",
        "section": "MechanicsDynaWriter > MechanicsDynaWriter",
        "text": "class ansys.health.heart.writer.mechanics_writer.MechanicsDynaWriter(model: ansys.health.heart.models.HeartModel, settings: ansys.health.heart.settings.settings.SimulationSettings | None = None)\n\nBases: ansys.health.heart.writer.base_writer.BaseDynaWriter\n\nClass for preparing the input for a mechanics LS-DYNA simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#overview",
        "title": "MechanicsDynaWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate the keyword database.\nwrite_robin_bc\nCreate Robin boundary condition on a given surface.\nkw_database\nCollection of keyword decks relevant for mechanics.\nset_flow_area\nFlag indicating if the flow area is set for control volume.\nOverview\nupdate\nwrite_robin_bc\nkw_database\nset_flow_area"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#import-detail",
        "title": "MechanicsDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#attribute-detail",
        "title": "MechanicsDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Collection of keyword decks relevant for mechanics.\nFlag indicating if the flow area is set for control volume.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#MechanicsDynaWriter.kw_database",
        "title": "MechanicsDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "MechanicsDynaWriter.kw_database\n\nCollection of keyword decks relevant for mechanics.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#MechanicsDynaWriter.set_flow_area",
        "title": "MechanicsDynaWriter > Attribute detail > set_flow_area",
        "section": "Attribute detail > set_flow_area",
        "text": "MechanicsDynaWriter.set_flow_area: bool = True\n\nFlag indicating if the flow area is set for control volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#method-detail",
        "title": "MechanicsDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Update the keyword database.\nDynain file from stress-free configuration computation.\nList of lambda functions to apply Robin-type coundary conditions.\nYou do not need to write mesh files if a Dynain file is given.\nCreate Robin boundary condition on a given surface.\nCreate spring or damper.\nStiffness (MPa/mm) or viscosity (MPa/mm*ms).\nSurface to apply boundary condition to. It must contain point data\n_global-point-ids. It is scaled by the nodal area and point data\nscale factor if it exists.\nNormal values. If no normal values are given, nodal normals are used.\nList of the DYNA input deck.\nMethod detail\npython:str\npython:None\npython:list\nCallable\npython:None\nLiteral\npython:float\npv.PolyData\n_global-point-ids\nnp.ndarray\npython:None\npython:list"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#MechanicsDynaWriter.update",
        "title": "MechanicsDynaWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "MechanicsDynaWriter.update(dynain_name: str | None = None, robin_bcs: list[Callable] = None) -> None\n\nUpdate the keyword database.\n\nParameters\n\ndynain_name\n\npython:str, default: python:None\n\nDynain file from stress-free configuration computation.\n\nrobin_bcs\n\npython:list[Callable], default: python:None\n\nList of lambda functions to apply Robin-type coundary conditions.\n\nNotes\n\nYou do not need to write mesh files if a Dynain file is given.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/MechanicsDynaWriter.html#MechanicsDynaWriter.write_robin_bc",
        "title": "MechanicsDynaWriter > Method detail > write_robin_bc",
        "section": "Method detail > write_robin_bc",
        "text": "MechanicsDynaWriter.write_robin_bc(robin_type: Literal['spring', 'damper'], constant: float, surface: pyvista.PolyData, normal: numpy.ndarray | None = None) -> list\n\nCreate Robin boundary condition on a given surface.\n\nParameters\n\nrobin_type\n\nLiteral[“spring”, “damper”]\n\nCreate spring or damper.\n\nconstant\n\npython:float\n\nStiffness (MPa/mm) or viscosity (MPa/mm*ms).\n\nsurface\n\npv.PolyData\n\nSurface to apply boundary condition to. It must contain point data\n_global-point-ids. It is scaled by the nodal area and point data\nscale factor if it exists.\n\nnormal\n\nnp.ndarray, default: python:None\n\nNormal values. If no normal values are given, nodal normals are used.\n\nReturns\n\npython:list\n\nList of the DYNA input deck.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/define_function_templates/index",
        "href": "api/ansys/health/heart/writer/define_function_templates/index.html#the-define_function_templatespy-module",
        "title": "The define_function_templates.py module",
        "section": "The define_function_templates.py module",
        "text": "The define_function_templates.py module\ndefine_function_templates.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/define_function_templates/index",
        "href": "api/ansys/health/heart/writer/define_function_templates/index.html#summary",
        "title": "The define_function_templates.py module > Summary",
        "section": "Summary",
        "text": "Summary"
    },
    {
        "objectID": "api/ansys/health/heart/writer/define_function_templates/index",
        "href": "api/ansys/health/heart/writer/define_function_templates/index.html#description",
        "title": "The define_function_templates.py module > Description",
        "section": "Description",
        "text": "Collection of define function templates.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#purkinjegenerationdynawriter",
        "title": "PurkinjeGenerationDynaWriter",
        "section": "PurkinjeGenerationDynaWriter",
        "text": "Bases: ansys.health.heart.writer.base_writer.BaseDynaWriter\nClass for preparing the input for a Purkinje LS-DYNA simulation.\nPurkinjeGenerationDynaWriter\nPurkinjeGenerationDynaWriter\nansys.health.heart.writer.base_writer.BaseDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#ansys.health.heart.writer.ep_writer.PurkinjeGenerationDynaWriter",
        "title": "PurkinjeGenerationDynaWriter > PurkinjeGenerationDynaWriter > PurkinjeGenerationDynaWriter",
        "section": "PurkinjeGenerationDynaWriter > PurkinjeGenerationDynaWriter",
        "text": "class ansys.health.heart.writer.ep_writer.PurkinjeGenerationDynaWriter(model: ansys.health.heart.models.HeartModel, settings: ansys.health.heart.settings.settings.SimulationSettings = None)\n\nBases: ansys.health.heart.writer.base_writer.BaseDynaWriter\n\nClass for preparing the input for a Purkinje LS-DYNA simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#overview",
        "title": "PurkinjeGenerationDynaWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate keyword database.\nkw_database\nCollection of keywords relevant for Purkinje generation.\nOverview\nupdate\nkw_database"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#import-detail",
        "title": "PurkinjeGenerationDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#attribute-detail",
        "title": "PurkinjeGenerationDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Collection of keywords relevant for Purkinje generation.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#PurkinjeGenerationDynaWriter.kw_database",
        "title": "PurkinjeGenerationDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "PurkinjeGenerationDynaWriter.kw_database\n\nCollection of keywords relevant for Purkinje generation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#method-detail",
        "title": "PurkinjeGenerationDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Update keyword database.\nThis method overwrites the inherited function.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/PurkinjeGenerationDynaWriter.html#PurkinjeGenerationDynaWriter.update",
        "title": "PurkinjeGenerationDynaWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "PurkinjeGenerationDynaWriter.update() -> None\n\nUpdate keyword database.\n\nThis method overwrites the inherited function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/mesher/index",
        "href": "api/ansys/health/heart/pre/mesher/index.html#the-mesherpy-module",
        "title": "The mesher.py module",
        "section": "The mesher.py module",
        "text": "The mesher.py module\nmesher.py"
    },
    {
        "objectID": "api/ansys/health/heart/pre/mesher/index",
        "href": "api/ansys/health/heart/pre/mesher/index.html#summary",
        "title": "The mesher.py module > Summary",
        "section": "Summary",
        "text": "mesh_from_manifold_input_model\nCreate mesh from a good-quality manifold input model.\nmesh_from_non_manifold_input_model\nGenerate mesh from a non-manifold poor quality input model.\nSummary\nmesh_from_manifold_input_model\nmesh_from_non_manifold_input_model"
    },
    {
        "objectID": "api/ansys/health/heart/pre/mesher/index",
        "href": "api/ansys/health/heart/pre/mesher/index.html#description",
        "title": "The mesher.py module > Description",
        "section": "Description",
        "text": "Module containing methods for interaction with Fluent meshing.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/pre/mesher/index",
        "href": "api/ansys/health/heart/pre/mesher/index.html#module-detail",
        "title": "The mesher.py module > Module detail",
        "section": "Module detail",
        "text": "Create mesh from a good-quality manifold input model.\nInput model.\nWorking directory.\nPath to the resulting Fluent mesh file.\nUniform mesh size to use for both wrapping and filling the volume.\nVTK mesh with both cell and face zones.\nGenerate mesh from a non-manifold poor quality input model.\nInput model.\nWorking directory.\nPath to the resulting Fluent mesh file.\nUniform mesh size to use for all volumes and surfaces.\nGlobal size used by the wrapper to reconstruct the geometry.\nWhether to overwrite an existing mesh.\nDictionary specifying the mesh size that should be used for each part.\nDictionary specifying the wrap size that should be used to wrap each part.\nVTK mesh with both cell and face zones.\nThis method uses Fluent wrapping technology to wrap the individual parts. First it\ncreates manifold parts. Then, it consequently wraps the entire model and uses the manifold\nparts to split the wrapped model into the different cell zones.\nWhen specifying a mesh size per part, you can do that by either specifying the size for all\nparts or for specific parts. The default mesh size is used for any part not listed\nin the dictionary. This also applies to the wrapping step. You can control the wrap size\nper part or on a global level. By default, a size of 1.5 mm is used, but this value is not\nguaranteed to give good results.\nNote that a post-wrap remesh is triggered if the wrap size is not equal to the target mesh size.\nRemeshing might fail if the target mesh size deviates too much from the wrap size.\nModule detail\n_InputModel\nUnion\npython:str\nPath\nUnion\npython:str\nPath\npython:float\nMesh\n_InputModel\nUnion\npython:str\nPath\nUnion\npython:str\nPath\npython:float\npython:float\npython:True\npython:dict\npython:None\npython:dict\npython:None\nMesh"
    },
    {
        "objectID": "api/ansys/health/heart/pre/mesher/index",
        "href": "api/ansys/health/heart/pre/mesher/index.html#mesher.mesh_from_manifold_input_model",
        "title": "The mesher.py module > Module detail > mesh_from_manifold_input_model",
        "section": "Module detail > mesh_from_manifold_input_model",
        "text": "mesher.mesh_from_manifold_input_model(model: ansys.health.heart.pre.input._InputModel, workdir: str | pathlib.Path, path_to_output: str | pathlib.Path, mesh_size: float = 2.0, overwrite_existing_mesh: bool = True) -> ansys.health.heart.objects.Mesh\n\nCreate mesh from a good-quality manifold input model.\n\nParameters\n\nmodel\n\n_InputModel\n\nInput model.\n\nworkdir\n\nUnion[python:str, Path]\n\nWorking directory.\n\npath_to_output\n\nUnion[python:str, Path]\n\nPath to the resulting Fluent mesh file.\n\nmesh_size\n\npython:float, default: 2.0\n\nUniform mesh size to use for both wrapping and filling the volume.\n\nReturns\n\nMesh\n\nVTK mesh with both cell and face zones.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/pre/mesher/index",
        "href": "api/ansys/health/heart/pre/mesher/index.html#mesher.mesh_from_non_manifold_input_model",
        "title": "The mesher.py module > Module detail > mesh_from_non_manifold_input_model",
        "section": "Module detail > mesh_from_non_manifold_input_model",
        "text": "mesher.mesh_from_non_manifold_input_model(model: ansys.health.heart.pre.input._InputModel, workdir: str | pathlib.Path, path_to_output: str | pathlib.Path, global_mesh_size: float = 2.0, _global_wrap_size: float = 1.5, overwrite_existing_mesh: bool = True, mesh_size_per_part: dict = None, _wrap_size_per_part: dict = None) -> ansys.health.heart.objects.Mesh\n\nGenerate mesh from a non-manifold poor quality input model.\n\nParameters\n\nmodel\n\n_InputModel\n\nInput model.\n\nworkdir\n\nUnion[python:str, Path]\n\nWorking directory.\n\npath_to_output\n\nUnion[python:str, Path]\n\nPath to the resulting Fluent mesh file.\n\nglobal_mesh_size\n\npython:float, default: 2.0\n\nUniform mesh size to use for all volumes and surfaces.\n\n_global_wrap_size\n\npython:float, default: 1.5\n\nGlobal size used by the wrapper to reconstruct the geometry.\n\noverwrite_existing_mesh\n\nbool, default: python:True\n\nWhether to overwrite an existing mesh.\n\nmesh_size_per_part\n\npython:dict, default: python:None\n\nDictionary specifying the mesh size that should be used for each part.\n\n_wrap_size_per_part\n\npython:dict, default: python:None\n\nDictionary specifying the wrap size that should be used to wrap each part.\n\nReturns\n\nMesh\n\nVTK mesh with both cell and face zones.\n\nNotes\n\nThis method uses Fluent wrapping technology to wrap the individual parts. First it\ncreates manifold parts. Then, it consequently wraps the entire model and uses the manifold\nparts to split the wrapped model into the different cell zones.\n\nWhen specifying a mesh size per part, you can do that by either specifying the size for all\nparts or for specific parts. The default mesh size is used for any part not listed\nin the dictionary. This also applies to the wrapping step. You can control the wrap size\nper part or on a global level. By default, a size of 1.5 mm is used, but this value is not\nguaranteed to give good results.\n\nNote that a post-wrap remesh is triggered if the wrap size is not equal to the target mesh size.\nRemeshing might fail if the target mesh size deviates too much from the wrap size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial.html#dummymaterial",
        "title": "DummyMaterial",
        "section": "DummyMaterial",
        "text": "Just for initialization.\nDummyMaterial\nDummyMaterial"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial.html#ansys.health.heart.settings.material.ep_material.EPMaterial.DummyMaterial",
        "title": "DummyMaterial > DummyMaterial > DummyMaterial",
        "section": "DummyMaterial > DummyMaterial",
        "text": "class ansys.health.heart.settings.material.ep_material.EPMaterial.DummyMaterial\n\nJust for initialization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial.html#overview",
        "title": "DummyMaterial > Overview",
        "section": "Overview",
        "text": "__repr__\nPrint a message.\nOverview\n__repr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial.html#import-detail",
        "title": "DummyMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial.html#method-detail",
        "title": "DummyMaterial > Method detail",
        "section": "Method detail",
        "text": "Print a message.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.DummyMaterial.html#DummyMaterial.__repr__",
        "title": "DummyMaterial > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DummyMaterial.__repr__()\n\nPrint a message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#zeropressuremechanicsdynawriter",
        "title": "ZeroPressureMechanicsDynaWriter",
        "section": "ZeroPressureMechanicsDynaWriter",
        "text": "Bases: MechanicsDynaWriter\nClass for preparing the input for a stress-free LS-DYNA simulation.\nThis class is derived from the MechanicsDynaWriter class and consequently\nderives all keywords relevant for simulations involving mechanics. This class\ndoes not write the control volume keywords but rather adds the keyword for computing\nthe stress-free configuration based on left/right cavity pressures instead.\nZeroPressureMechanicsDynaWriter\nZeroPressureMechanicsDynaWriter\nMechanicsDynaWriter\nMechanicsDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#ansys.health.heart.writer.mechanics_writer.ZeroPressureMechanicsDynaWriter",
        "title": "ZeroPressureMechanicsDynaWriter > ZeroPressureMechanicsDynaWriter > ZeroPressureMechanicsDynaWriter",
        "section": "ZeroPressureMechanicsDynaWriter > ZeroPressureMechanicsDynaWriter",
        "text": "class ansys.health.heart.writer.mechanics_writer.ZeroPressureMechanicsDynaWriter(model: ansys.health.heart.models.HeartModel, settings: ansys.health.heart.settings.settings.SimulationSettings | None = None)\n\nBases: MechanicsDynaWriter\n\nClass for preparing the input for a stress-free LS-DYNA simulation.\n\nNotes\n\nThis class is derived from the MechanicsDynaWriter class and consequently\nderives all keywords relevant for simulations involving mechanics. This class\ndoes not write the control volume keywords but rather adds the keyword for computing\nthe stress-free configuration based on left/right cavity pressures instead.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#overview",
        "title": "ZeroPressureMechanicsDynaWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate the keyword database.\nkw_database\nCollection of keyword decks relevant for mechanics.\nOverview\nupdate\nkw_database"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#import-detail",
        "title": "ZeroPressureMechanicsDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#attribute-detail",
        "title": "ZeroPressureMechanicsDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Collection of keyword decks relevant for mechanics.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#ZeroPressureMechanicsDynaWriter.kw_database",
        "title": "ZeroPressureMechanicsDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "ZeroPressureMechanicsDynaWriter.kw_database\n\nCollection of keyword decks relevant for mechanics.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#method-detail",
        "title": "ZeroPressureMechanicsDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Update the keyword database.\nList of lambda functions to apply Robin-type boundary conditions.\nMethod detail\npython:list\nCallable\npython:None"
    },
    {
        "objectID": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter",
        "href": "api/ansys/health/heart/writer/mechanics_writer/ZeroPressureMechanicsDynaWriter.html#ZeroPressureMechanicsDynaWriter.update",
        "title": "ZeroPressureMechanicsDynaWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "ZeroPressureMechanicsDynaWriter.update(robin_bcs: list[Callable] = None) -> None\n\nUpdate the keyword database.\n\nParameters\n\nrobin_bcs\n\npython:list[Callable], default: python:None\n\nList of lambda functions to apply Robin-type boundary conditions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user-guide/simulator",
        "href": "user-guide/simulator.html#simulator",
        "title": "User guide > Simulator",
        "section": "Simulator",
        "text": "The simulator module links different simulation steps for cardiac modeling.\nFor example, in electrophysiology simulations, you compute fiber orientation and the Purkinje network using the BaseSimulator.compute_fibers and EPSimulator.compute_purkinje methods before running the physical simulation.\nIn mechanical simulations, you compute the stress-free configuration using the MechanicsSimulator.compute_stress_free_configuration method before running the simulation.\nYou create different simulators based on the application and physics of interest:\nBaseSimulator: This parent class provides general methods, such as fiber generation.\nEPSimulator: This class derives from BaseSimulator and includes specific methods for cardiac electrophysiology simulations.\nMechanicsSimulator: This class derives from BaseSimulator and includes specific methods for mechanical cardiac simulations.\nEPMechanicsSimulator: This class derives from BaseSimulator and includes specific methods for electrical-mechanical coupled cardiac simulations.\nHere is a simple code example:\nLoad a heart model.\nSet up the LS-DYNA settings.\nInstantiate the simulator.\nThe settings module saves default modeling parameters. You can load these parameters into the simulator:\nAlternatively, you can load settings from a YAML file:\nFinally, run the relevant steps before running the final simulation of the physics of interest:\nFor comprehensive examples, see examples_simulator.\nSimulator\nsimulator\nBaseSimulator.compute_fibers\nEPSimulator.compute_purkinje\nMechanicsSimulator.compute_stress_free_configuration\nBaseSimulator\nEPSimulator\nBaseSimulator\nMechanicsSimulator\nBaseSimulator\nEPMechanicsSimulator\nBaseSimulator\nsettings"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Atrium",
        "href": "api/ansys/health/heart/parts/Atrium.html#atrium",
        "title": "Atrium",
        "section": "Atrium",
        "text": "Bases: Chamber\nAtrium part.\nAtrium\nAtrium\nChamber"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Atrium",
        "href": "api/ansys/health/heart/parts/Atrium.html#ansys.health.heart.parts.Atrium",
        "title": "Atrium > Atrium > Atrium",
        "section": "Atrium > Atrium",
        "text": "class ansys.health.heart.parts.Atrium(name: str = None)\n\nBases: Chamber\n\nAtrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Atrium",
        "href": "api/ansys/health/heart/parts/Atrium.html#import-detail",
        "title": "Atrium > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#pressure",
        "title": "Pressure",
        "section": "Pressure",
        "text": "System state for pressure.\nPressure\nPressure"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#ansys.health.heart.post.system_model_post.Pressure",
        "title": "Pressure > Pressure > Pressure",
        "section": "Pressure > Pressure",
        "text": "class ansys.health.heart.post.system_model_post.Pressure\n\nSystem state for pressure.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#overview",
        "title": "Pressure > Overview",
        "section": "Overview",
        "text": "cavity\nartery\nvenous\nOverview\ncavity\nartery\nvenous"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#import-detail",
        "title": "Pressure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#attribute-detail",
        "title": "Pressure > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#Pressure.cavity",
        "title": "Pressure > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Pressure.cavity: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#Pressure.artery",
        "title": "Pressure > Attribute detail > artery",
        "section": "Attribute detail > artery",
        "text": "Pressure.artery: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/post/system_model_post/Pressure",
        "href": "api/ansys/health/heart/post/system_model_post/Pressure.html#Pressure.venous",
        "title": "Pressure > Attribute detail > venous",
        "section": "Attribute detail > venous",
        "text": "Pressure.venous: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#the-examplespy-module",
        "title": "The examples.py module",
        "section": "The examples.py module",
        "text": "The examples.py module\nexamples.py"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#summary",
        "title": "The examples.py module > Summary",
        "section": "Summary",
        "text": "get_preprocessed_fullheart\nGet a preprocessed full heart model.\nget_input_leftventricle\nGet the input of a left ventricle based on Rodero et al 01.\ndir_path\ndata_path\nSummary\nget_preprocessed_fullheart\nget_input_leftventricle\ndir_path\ndata_path"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#description",
        "title": "The examples.py module > Description",
        "section": "Description",
        "text": "Utility functions to get various examples.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#module-detail",
        "title": "The examples.py module > Module detail",
        "section": "Module detail",
        "text": "Get a preprocessed full heart model.\nThe resolution of the preprocessed full heart.\nPaths to the .vtu, .partinfo.json, and .namemap.json files.\nGet the input of a left ventricle based on Rodero et al 01.\nModule detail\nLiteral\npython:tuple\nPath\nPath\nPath\n.vtu\n.partinfo.json\n.namemap.json"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#examples.get_preprocessed_fullheart",
        "title": "The examples.py module > Module detail > get_preprocessed_fullheart",
        "section": "Module detail > get_preprocessed_fullheart",
        "text": "examples.get_preprocessed_fullheart(resolution: Literal['1.5mm', '2.0mm'] = '2.0mm') -> tuple[pathlib.Path, pathlib.Path, pathlib.Path]\n\nGet a preprocessed full heart model.\n\nParameters\n\nresolution\n\nLiteral[&quot;1.5mm&quot;, &quot;2.0mm&quot;], default: “2.0mm”\n\nThe resolution of the preprocessed full heart.\n\nReturns\n\npython:tuple[Path, Path, Path]\n\nPaths to the .vtu, .partinfo.json, and .namemap.json files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#examples.get_input_leftventricle",
        "title": "The examples.py module > Module detail > get_input_leftventricle",
        "section": "Module detail > get_input_leftventricle",
        "text": "examples.get_input_leftventricle() -> tuple[pathlib.Path, pathlib.Path]\n\nGet the input of a left ventricle based on Rodero et al 01.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#examples.dir_path",
        "title": "The examples.py module > Module detail > dir_path",
        "section": "Module detail > dir_path",
        "text": "examples.dir_path\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/examples/index",
        "href": "api/ansys/health/heart/examples/index.html#examples.data_path",
        "title": "The examples.py module > Module detail > data_path",
        "section": "Module detail > data_path",
        "text": "examples.data_path\n\n"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#run-a-left-ventricle-mechanical-simulation",
        "title": "Run a left ventricle mechanical simulation",
        "section": "Run a left ventricle mechanical simulation",
        "text": "This example shows you how to perform the following actions:\nGenerate a left-ventricle model from a labeled surface.\nSet up the model for mechanical simulation:\nGenerate fibers.\nAssign material.\nTune boundary conditions.\nCompute stress-free configuration.\nRun the simulation for one heartbeat.\nPostprocess the results:\nPlot the stress-free configuration versus the end-diastole configuration.\nPlot the Klotz curve.\nAnimate the simulation results.\nPlot the PV loop.\nWhen using a standalone version of the DPF Server, you must accept the license terms. To\naccept these terms, you can set this environment variable:\nRun a left ventricle mechanical simulation"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#perform-the-required-imports",
        "title": "Run a left ventricle mechanical simulation > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, heart model, and LS-DYNA executable file.\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#get-the-model-input-surface-and-part-definitions",
        "title": "Run a left ventricle mechanical simulation > Get the model input surface and part definitions",
        "section": "Get the model input surface and part definitions",
        "text": "Get the model input surface and part definitions"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#load-the-input-surface-and-mesh-the-model",
        "title": "Run a left ventricle mechanical simulation > Load the input surface and mesh the model.",
        "section": "Load the input surface and mesh the model.",
        "text": "Set the working directory.\nThis mesh is very coarse for and for demonstration purposes. In practice, the mesh size should\nbe smaller.\nLoad the input surface and mesh the model."
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#instantiate-the-simulator",
        "title": "Run a left ventricle mechanical simulation > Instantiate the simulator",
        "section": "Instantiate the simulator",
        "text": "Instantiate the simulator and define settings.\nInstantiate the simulator"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#load-simulation-settings",
        "title": "Run a left ventricle mechanical simulation > Load simulation settings",
        "section": "Load simulation settings",
        "text": "Load the default settings.\nLoad simulation settings"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#compute-fiber-orientation",
        "title": "Run a left ventricle mechanical simulation > Compute fiber orientation",
        "section": "Compute fiber orientation",
        "text": "Compute fiber orientation and plot the fibers.\nCompute fiber orientation"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#assign-a-material-to-the-left-ventricle",
        "title": "Run a left ventricle mechanical simulation > Assign a material to the left ventricle.",
        "section": "Assign a material to the left ventricle.",
        "text": "Assign a material to the left ventricle."
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#compute-the-stress-free-configuration",
        "title": "Run a left ventricle mechanical simulation > Compute the stress-free configuration",
        "section": "Compute the stress-free configuration",
        "text": "The input geometry is assumed to be at the end-of-diastole with a\nventricular pressure of 15 mmHg. You can modify this pressure in the settings.\nCompute the stress-free configuration"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#run-the-main-simulation",
        "title": "Run a left ventricle mechanical simulation > Run the main simulation",
        "section": "Run the main simulation",
        "text": "By default, the simulation is coupled to an open-loop circulation model with\na constant preload and a Windkessel-type afterload. Moreover, the simulation\nis set to run for a single heartbeat.\nRun the main simulation"
    },
    {
        "objectID": "examples/simulator/mechanics-simulator-leftventricle_pr",
        "href": "examples/simulator/mechanics-simulator-leftventricle_pr.html#postprocessing",
        "title": "Run a left ventricle mechanical simulation > Postprocessing",
        "section": "Postprocessing",
        "text": "Total running time of the script: (8 minutes 22.170 seconds)\nDownload Jupyter notebook: mechanics-simulator-leftventricle_pr.ipynb\nDownload Python source code: mechanics-simulator-leftventricle_pr.py\nDownload zipped: mechanics-simulator-leftventricle_pr.zip\nGallery generated by Sphinx-Gallery\nPostprocessing\nDownload Jupyter notebook: mechanics-simulator-leftventricle_pr.ipynb\nDownload Python source code: mechanics-simulator-leftventricle_pr.py\nDownload zipped: mechanics-simulator-leftventricle_pr.zip"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes ansys-health-heart endpoints, their capabilities, and how\nto interact with them programmatically.\nAPI reference"
    },
    {
        "objectID": "acknowledgements",
        "href": "acknowledgements.html#acknowledgements",
        "title": "Acknowledgements",
        "section": "Acknowledgements",
        "text": "This project uses and modifies data from the following sources:\nCreator: Copyright© CC BY 4.0 2020 by M. Strocchi\nLicense: Creative Commons Attribution 4.0 International License (CC BY 4.0)\nModifications: The data has been modified and is used as an asset in this project. This project provides methods to download the data from the original source.\nCreator: Copyright© CC BY 4.0 2021 by C. Rodero\nLicense: Creative Commons Attribution 4.0 International License (CC BY 4.0)\nModifications: The data has been modified and is used as an asset in this project. This project provides methods to download the data from the original source.\nAcknowledgements"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#basesimulator",
        "title": "BaseSimulator",
        "section": "BaseSimulator",
        "text": "Base class for the simulator.\nBaseSimulator\nBaseSimulator"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#ansys.health.heart.simulator.BaseSimulator",
        "title": "BaseSimulator > BaseSimulator > BaseSimulator",
        "section": "BaseSimulator > BaseSimulator",
        "text": "class ansys.health.heart.simulator.BaseSimulator(model: ansys.health.heart.models.HeartModel, dyna_settings: ansys.health.heart.settings.settings.DynaSettings = None, simulation_directory: pathlib = '')\n\nBase class for the simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#overview",
        "title": "BaseSimulator > Overview",
        "section": "Overview",
        "text": "load_default_settings\nLoad default simulation settings.\ncompute_fibers\nCompute the fiber sheet directions on the ventricles.\ncompute_uhc\nCompute universal heart coordinates system.\ncompute_right_atrial_fiber\nCompute right atrium fiber with the LDRBD method.\ncompute_left_atrial_fiber\nCompute left atrium fiber with the LDRBD method.\nrun_laplace_problem\nRun the Laplace-Dirichlet (thermal) problem in LS-DYNA.\nmodel\nHeart model to simulate.\nroot_directory\nRoot simulation directory.\nsettings\nSimulation settings.\nOverview\nload_default_settings\ncompute_fibers\ncompute_uhc\ncompute_right_atrial_fiber\ncompute_left_atrial_fiber\nrun_laplace_problem\nmodel\nroot_directory\nsettings"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#import-detail",
        "title": "BaseSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#attribute-detail",
        "title": "BaseSimulator > Attribute detail",
        "section": "Attribute detail",
        "text": "Heart model to simulate.\nRoot simulation directory.\nSimulation settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.model",
        "title": "BaseSimulator > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "BaseSimulator.model: ansys.health.heart.models.HeartModel\n\nHeart model to simulate.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.root_directory",
        "title": "BaseSimulator > Attribute detail > root_directory",
        "section": "Attribute detail > root_directory",
        "text": "BaseSimulator.root_directory = ''\n\nRoot simulation directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.settings",
        "title": "BaseSimulator > Attribute detail > settings",
        "section": "Attribute detail > settings",
        "text": "BaseSimulator.settings: ansys.health.heart.settings.settings.SimulationSettings\n\nSimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#method-detail",
        "title": "BaseSimulator > Method detail",
        "section": "Method detail",
        "text": "Load default simulation settings.\nCompute the fiber sheet directions on the ventricles.\nMethod for computing the fiber orientation.\nRotation angle alpha and beta.\nCompute universal heart coordinates system.\nCompute right atrium fiber with the LDRBD method.\nCoordinates of appendage.\nList of nodal coordinates to define the top path.\nThe top path is a set of nodes connecting the superior (SVC) and inferior (IVC)\nvena cava. For more information, see the “Notes” section.\nThe default method (top=None) might not work for some anatomical structures.\nIn such cases, you can define the start and end points by providing a list of\ncoordinates like this: [[x1, y1, z1], [x2, y2, z2]]. These two nodes should\nbe located on the SVC and IVC rings, approximately at the 12 o’clock position.\nYou can also add an intermediate point to enforce the geodesic path, like this:\n[[x1, y1, z1], [x3, y3, z3], [x2, y2, z2]].\nRight atrium with fiber coordinates system in this format: e_l, e_t and e_n.\nThe method is described in Modeling cardiac muscle fibers in ventricular and atrial\nelectrophysiology simulations\nCompute left atrium fiber with the LDRBD method.\nCoordinates of the appendage. If no value is specified,\nthe cap named appendage is used.\nLeft atrium with fiber coordinates system in this format: e_l, e_t and e_n.\nThe method is described in Modeling cardiac muscle fibers in ventricular and atrial\nelectrophysiology simulations <https://doi.org/10.1016/j.cma.2020.113468>.\nRun the Laplace-Dirichlet (thermal) problem in LS-DYNA.\nLS-DYNA directory\nSimulation type.\nLandmarks to create the nodeset. Keys can be laa, raa, and top’.\nUnstructuredGrid with array to map data back to the full mesh.\nMethod detail\nLiteral\npython:dict\npython:None\npython:list\npython:list\npython:float\npython:None\ntop=None\n[[x1, y1, z1], [x2, y2, z2]]\n[[x1, y1, z1], [x3, y3, z3], [x2, y2, z2]]\npv.UnstructuredGrid\ne_l\ne_t\ne_n\npython:list\npython:float\npython:None\nappendage\npv.UnstructuredGrid\ne_l\ne_t\ne_n\npython:dict\nlaa\nraa\ntop\nUnstructuredGrid"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.load_default_settings",
        "title": "BaseSimulator > Method detail > load_default_settings",
        "section": "Method detail > load_default_settings",
        "text": "BaseSimulator.load_default_settings() -> ansys.health.heart.settings.settings.SimulationSettings\n\nLoad default simulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.compute_fibers",
        "title": "BaseSimulator > Method detail > compute_fibers",
        "section": "Method detail > compute_fibers",
        "text": "BaseSimulator.compute_fibers(method: Literal['LSDYNA', 'D-RBM'] = 'LSDYNA', rotation_angles: dict = None)\n\nCompute the fiber sheet directions on the ventricles.\n\nParameters\n\nmethod\n\nLiteral[“LSDYNA”, “D-RBM”], default: “LSDYNA”\n\nMethod for computing the fiber orientation.\n\nrotation_angles\n\npython:dict, default: python:None\n\nRotation angle alpha and beta.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.compute_uhc",
        "title": "BaseSimulator > Method detail > compute_uhc",
        "section": "Method detail > compute_uhc",
        "text": "BaseSimulator.compute_uhc() -> pyvista.UnstructuredGrid\n\nCompute universal heart coordinates system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.compute_right_atrial_fiber",
        "title": "BaseSimulator > Method detail > compute_right_atrial_fiber",
        "section": "Method detail > compute_right_atrial_fiber",
        "text": "BaseSimulator.compute_right_atrial_fiber(appendage: list[float], top: list[list[float]] = None) -> pyvista.UnstructuredGrid\n\nCompute right atrium fiber with the LDRBD method.\n\nParameters\n\nappendage: list[float]\n\nCoordinates of appendage.\n\ntop\n\npython:list[python:list[python:float]], default: python:None\n\nList of nodal coordinates to define the top path.\n\nThe top path is a set of nodes connecting the superior (SVC) and inferior (IVC)\nvena cava. For more information, see the “Notes” section.\n\nThe default method (top=None) might not work for some anatomical structures.\nIn such cases, you can define the start and end points by providing a list of\ncoordinates like this: [[x1, y1, z1], [x2, y2, z2]]. These two nodes should\nbe located on the SVC and IVC rings, approximately at the 12 o’clock position.\n\nYou can also add an intermediate point to enforce the geodesic path, like this:\n[[x1, y1, z1], [x3, y3, z3], [x2, y2, z2]].\n\nReturns\n\npv.UnstructuredGrid\n\nRight atrium with fiber coordinates system in this format: e_l, e_t and e_n.\n\nNotes\n\nThe method is described in Modeling cardiac muscle fibers in ventricular and atrial\nelectrophysiology simulations\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.compute_left_atrial_fiber",
        "title": "BaseSimulator > Method detail > compute_left_atrial_fiber",
        "section": "Method detail > compute_left_atrial_fiber",
        "text": "BaseSimulator.compute_left_atrial_fiber(appendage: list[float] = None) -> pyvista.UnstructuredGrid\n\nCompute left atrium fiber with the LDRBD method.\n\nParameters\n\nappendage\n\npython:list[python:float], default: python:None\n\nCoordinates of the appendage. If no value is specified,\nthe cap named appendage is used.\n\nReturns\n\npv.UnstructuredGrid\n\nLeft atrium with fiber coordinates system in this format: e_l, e_t and e_n.\n\nNotes\n\nThe method is described in Modeling cardiac muscle fibers in ventricular and atrial\nelectrophysiology simulations <https://doi.org/10.1016/j.cma.2020.113468>.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/simulator/BaseSimulator",
        "href": "api/ansys/health/heart/simulator/BaseSimulator.html#BaseSimulator.run_laplace_problem",
        "title": "BaseSimulator > Method detail > run_laplace_problem",
        "section": "Method detail > run_laplace_problem",
        "text": "BaseSimulator.run_laplace_problem(export_directory, type: Literal['uvc', 'la_fiber', 'ra_fiber'], **kwargs)\n\nRun the Laplace-Dirichlet (thermal) problem in LS-DYNA.\n\nParameters\n\nexport_directory: str\n\nLS-DYNA directory\n\ntype: str\n\nSimulation type.\n\nkwargs\n\npython:dict\n\nLandmarks to create the nodeset. Keys can be laa, raa, and top’.\n\nReturns\n\nUnstructuredGrid\n\nUnstructuredGrid with array to map data back to the full mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialNeoHook",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialNeoHook.html#materialneohook",
        "title": "MaterialNeoHook",
        "section": "MaterialNeoHook",
        "text": "Bases: ansys.health.heart.writer.custom_keywords.Mat077H\nMaterial for the atrium.\nMaterial ID.\nDensity of the material.\nFirst coefficient of the material.\nPoisson’s ratio.\nBulk modulus.\nMaterialNeoHook\nMaterialNeoHook\nansys.health.heart.writer.custom_keywords.Mat077H\npython:int\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialNeoHook",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialNeoHook.html#ansys.health.heart.writer.material_keywords.MaterialNeoHook",
        "title": "MaterialNeoHook > MaterialNeoHook > MaterialNeoHook",
        "section": "MaterialNeoHook > MaterialNeoHook",
        "text": "class ansys.health.heart.writer.material_keywords.MaterialNeoHook(mid: int, rho: float, c10: float, nu: float, kappa: float)\n\nBases: ansys.health.heart.writer.custom_keywords.Mat077H\n\nMaterial for the atrium.\n\nParameters\n\nmid\n\npython:int\n\nMaterial ID.\n\nrho\n\npython:float\n\nDensity of the material.\n\nc10\n\npython:float\n\nFirst coefficient of the material.\n\nnu\n\npython:float\n\nPoisson’s ratio.\n\nkappa\n\npython:float\n\nBulk modulus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/material_keywords/MaterialNeoHook",
        "href": "api/ansys/health/heart/writer/material_keywords/MaterialNeoHook.html#import-detail",
        "title": "MaterialNeoHook > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "These examples show how to use the preprocessor and simulator modules\nto preprocess and consume heart models. Examples include electrophysiology and mechanics.\nExamples\npreprocessor\nsimulator"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#preprocessor-examples",
        "title": "Examples > Preprocessor examples",
        "section": "Preprocessor examples",
        "text": "These examples show how to use the preprocessor module\nto generate different kinds of heart models, including a\nbiventricular, four-chamber heart model and a full-heart model.\nsphx_glr_examples_preprocessor_compute-atrial-fibers_pr.py\nsphx_glr_examples_preprocessor_demo-material_pr.py\nsphx_glr_examples_preprocessor_download-case_pr.py\nsphx_glr_examples_preprocessor_preprocess-fullheart.py\nPreprocessor examples\npreprocessor"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#simulator-examples",
        "title": "Examples > Simulator examples",
        "section": "Simulator examples",
        "text": "These examples show how to use the simulator module\nto consume preprocessed models, consequently using them to run various simulations.\nsphx_glr_examples_simulator_ep-mechanics-simulator-fullheart.py\nsphx_glr_examples_simulator_ep-simulator-fullheart_rodero.py\nsphx_glr_examples_simulator_mechanics-simulator-leftventricle_pr.py\nSimulator examples\nsimulator"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#postprocessor-examples",
        "title": "Examples > Postprocessor examples",
        "section": "Postprocessor examples",
        "text": "These examples show how to use the postprocessor module\nto postprocess cardiac simulations.\nsphx_glr_examples_postprocessor_ep-postprocess-reaction-eikonal.py\nGallery generated by Sphinx-Gallery\nPostprocessor examples\npostprocessor"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/index",
        "href": "api/ansys/health/heart/writer/laplace_writer/index.html#the-laplace_writerpy-module",
        "title": "The laplace_writer.py module",
        "section": "The laplace_writer.py module",
        "text": "The laplace_writer.py module\nlaplace_writer.py"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/index",
        "href": "api/ansys/health/heart/writer/laplace_writer/index.html#summary",
        "title": "The laplace_writer.py module > Summary",
        "section": "Summary",
        "text": "LaplaceWriter\nClass for preparing the input for a Laplace LS-DYNA simulation.\nSummary\nLaplaceWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/laplace_writer/index",
        "href": "api/ansys/health/heart/writer/laplace_writer/index.html#description",
        "title": "The laplace_writer.py module > Description",
        "section": "Description",
        "text": "Module containing classes for writing LS-DYNA keyword files for laplace simulations.\nDescription"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#generate-atrial-fibers",
        "title": "Generate atrial fibers",
        "section": "Generate atrial fibers",
        "text": "This example shows how to generate atrial fibers using the Laplace-Dirichlet Rule-Based\n(LDRB) method.\nWhen using a standalone version of the DPF Server, you must accept the license terms. To\naccept these terms, you can set this environment variable:\nGenerate atrial fibers"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#perform-the-required-imports",
        "title": "Generate atrial fibers > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, model, and LS-DYNA executable file. This example uses DEV-104373-g6d20c20aee.\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#instantiate-the-simulator",
        "title": "Generate atrial fibers > Instantiate the simulator",
        "section": "Instantiate the simulator",
        "text": "Instantiate the simulator and modify options as needed.\nThe DynaSettings object supports several LS-DYNA versions and platforms,\nincluding smp, intempi, msmpi, windows, linux, and wsl.\nChoose the one that works for your setup.\nInstantiate the simulator\nDynaSettings\nsmp\nintempi\nmsmpi\nwindows\nlinux\nwsl"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#compute-atrial-fibers",
        "title": "Generate atrial fibers > Compute atrial fibers",
        "section": "Compute atrial fibers",
        "text": "You might need to define an appropriate point for the right atrial appendage.\nThe list specifies the x, y, and z coordinates close to the appendage.\nCompute atrial fibers"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#plot-left-atrial-bundles",
        "title": "Generate atrial fibers > Plot left atrial bundles",
        "section": "Plot left atrial bundles",
        "text": "Plot left atrial bundles"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#plot-right-atrial-bundles",
        "title": "Generate atrial fibers > Plot right atrial bundles",
        "section": "Plot right atrial bundles",
        "text": "Plot right atrial bundles"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#plot-left-atrial-fibers",
        "title": "Generate atrial fibers > Plot left atrial fibers",
        "section": "Plot left atrial fibers",
        "text": "Plot left atrial fibers"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#plot-right-atrial-fibers",
        "title": "Generate atrial fibers > Plot right atrial fibers",
        "section": "Plot right atrial fibers",
        "text": "Plot right atrial fibers"
    },
    {
        "objectID": "examples/preprocessor/compute-atrial-fibers_pr",
        "href": "examples/preprocessor/compute-atrial-fibers_pr.html#plot-full-fibers-on-full-heart-model",
        "title": "Generate atrial fibers > Plot full fibers on full heart model",
        "section": "Plot full fibers on full heart model",
        "text": "Total running time of the script: (3 minutes 59.172 seconds)\nDownload Jupyter notebook: compute-atrial-fibers_pr.ipynb\nDownload Python source code: compute-atrial-fibers_pr.py\nDownload zipped: compute-atrial-fibers_pr.zip\nGallery generated by Sphinx-Gallery\nPlot full fibers on full heart model\nDownload Jupyter notebook: compute-atrial-fibers_pr.ipynb\nDownload Python source code: compute-atrial-fibers_pr.py\nDownload zipped: compute-atrial-fibers_pr.zip"
    },
    {
        "objectID": "user-guide/preprocessor",
        "href": "user-guide/preprocessor.html#preprocessor",
        "title": "User guide > Preprocessor",
        "section": "Preprocessor",
        "text": "This topic provides an overview of the preprocessor module. Use this module to preprocess a case from the following two public datasets:\nA Publicly Available Virtual Cohort of Four-chamber Heart Meshes for Cardiac Electro-mechanics Simulations\nVirtual cohort of adult healthy four-chamber heart meshes from CT images\nThe preprocessor module provides methods to extract the necessary information and VTP object from these two databases. You can then process this data further and use it with the HeartModel.load_input method.\nThe module also includes methods to conveniently download data from these two public sources.\nThe file_path variable contains the path to the downloaded and unpacked CASE or VTK file.\nAlternatively, you can provide your own set of input files. Specify a path to the VTP/VTK file that describes the input geometry and a JSON file that describes the parts.\nThe part definitions JSON file has the following format:\nThe id represents the volumetric part ID, and enclosed_by_boundaries contains the IDs of the boundaries that enclose the volumetric part. Add a cell data array called surface-id so that the preprocessor can identify the IDs of the enclosing boundaries. The HeartModel reads the input model and part definitions JSON file.\nUse the HeartModel.mesh_volume method to generate the volumetric meshes from the input model.\nFor comprehensive examples, see examples_preprocessor.\nPreprocessor\npreprocessor\npreprocessor\nHeartModel.load_input\nfile_path\nid\nenclosed_by_boundaries\nsurface-id\nHeartModel\nHeartModel.mesh_volume"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#model3",
        "title": "Model3",
        "section": "Model3",
        "text": "Hold data for active model 3, check manual for details.\nModel3\nModel3"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#ansys.health.heart.settings.material.material.ActiveModel.Model3",
        "title": "Model3 > Model3 > Model3",
        "section": "Model3 > Model3",
        "text": "class ansys.health.heart.settings.material.material.ActiveModel.Model3\n\nHold data for active model 3, check manual for details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#overview",
        "title": "Model3 > Overview",
        "section": "Overview",
        "text": "t0\nca2ion50\nn\nf\nl\neta\nsigmax\nOverview\nt0\nca2ion50\nn\nf\nl\neta\nsigmax"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#import-detail",
        "title": "Model3 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#attribute-detail",
        "title": "Model3 > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#Model3.t0",
        "title": "Model3 > Attribute detail > t0",
        "section": "Attribute detail > t0",
        "text": "Model3.t0: float = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#Model3.ca2ion50",
        "title": "Model3 > Attribute detail > ca2ion50",
        "section": "Attribute detail > ca2ion50",
        "text": "Model3.ca2ion50: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#Model3.n",
        "title": "Model3 > Attribute detail > n",
        "section": "Attribute detail > n",
        "text": "Model3.n: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#Model3.f",
        "title": "Model3 > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "Model3.f: float = 0.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#Model3.l",
        "title": "Model3 > Attribute detail > l",
        "section": "Attribute detail > l",
        "text": "Model3.l: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#Model3.eta",
        "title": "Model3 > Attribute detail > eta",
        "section": "Attribute detail > eta",
        "text": "Model3.eta: float = 0.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/health/heart/settings/material/material/ActiveModel.Model3.html#Model3.sigmax",
        "title": "Model3 > Attribute detail > sigmax",
        "section": "Attribute detail > sigmax",
        "text": "Model3.sigmax: float = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/index",
        "href": "api/ansys/health/heart/index.html#the-ansyshealthheart-library",
        "title": "The ansys.health.heart library",
        "section": "The ansys.health.heart library",
        "text": "The ansys.health.heart library\nansys.health.heart"
    },
    {
        "objectID": "api/ansys/health/heart/index",
        "href": "api/ansys/health/heart/index.html#summary",
        "title": "The ansys.health.heart library > Summary",
        "section": "Summary",
        "text": "post\nPostprocessing subpackage.\npre\nPreprocessing subpackage.\nsettings\nSettings subpackage.\nutils\nSubpackage containing various utilities.\nwriter\nWriter subpackage.\nexamples\nUtility functions to get various examples.\nexceptions\nCustom exceptions for PyAnsys Heart.\nlogger\nLogging module.\nmodels\nModule containing classes for the various heart models.\nmodels_utils\nStateless methods for the heart model.\nobjects\nModule that defines classes used in the heart model.\nparts\nDefine classes for anatomical parts.\nsimulator\nSimulator module.\n__version__\nVersion of PyAnsys Heart.\nLOG\nSummary\npost\npre\nsettings\nutils\nwriter\nexamples\nexceptions\nlogger\nmodels\nmodels_utils\nobjects\nparts\nsimulator\n__version__\nLOG"
    },
    {
        "objectID": "api/ansys/health/heart/index",
        "href": "api/ansys/health/heart/index.html#description",
        "title": "The ansys.health.heart library > Description",
        "section": "Description",
        "text": "PyAnsys Heart is a Python framework for heart modeling using Ansys tools.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/index",
        "href": "api/ansys/health/heart/index.html#module-detail",
        "title": "The ansys.health.heart library > Module detail",
        "section": "Module detail",
        "text": "Version of PyAnsys Heart.\nModule detail"
    },
    {
        "objectID": "api/ansys/health/heart/index",
        "href": "api/ansys/health/heart/index.html#heart.LOG",
        "title": "The ansys.health.heart library > Module detail > LOG",
        "section": "Module detail > LOG",
        "text": "heart.LOG\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/index",
        "href": "api/ansys/health/heart/index.html#heart.__version__",
        "title": "The ansys.health.heart library > Module detail > __version__",
        "section": "Module detail > __version__",
        "text": "heart.__version__\n\nVersion of PyAnsys Heart.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#the-loggerpy-module",
        "title": "The logger.py module",
        "section": "The logger.py module",
        "text": "The logger.py module\nlogger.py"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#summary",
        "title": "The logger.py module > Summary",
        "section": "Summary",
        "text": "PyAnsysHeartCustomAdapter\nKeeps the reference to the PyAnsys Heart service instance dynamic.\nInstanceFilter\nEnsures that the instance_name record always exists.\nLogger\nProvides the logger used for each PyAnsys Heart session.\naddfile_handler\nAdd a file handler to the input.\nadd_stdout_handler\nAdd a stdout handler to the logger.\nstring_to_loglevel\nLOG_LEVEL_STDOUT\nLOG_LEVEL_FILE\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nDATEFORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG_LEVEL_STRING_TYPE\nLOG_LEVEL_TYPE\nSummary\nPyAnsysHeartCustomAdapter\nInstanceFilter\ninstance_name\nLogger\naddfile_handler\nadd_stdout_handler\nstring_to_loglevel\nLOG_LEVEL_STDOUT\nLOG_LEVEL_FILE\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nDATEFORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG_LEVEL_STRING_TYPE\nLOG_LEVEL_TYPE"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#description",
        "title": "The logger.py module > Description",
        "section": "Description",
        "text": "Logging module.\nThe logging module supplies a general framework for logging in PyAnsys Heart.\nThis module is built on the Python logging\nlibrary. It does not intend to replace it but rather provide a way to interact between\nthe Python logging library and PyAnsys Heart.\nThe loggers used in the module include the name of the instance, which\nis intended to be unique. This name is printed in all the active\noutputs and is used to track the different PyAnsys Heart modules.\nDescription\nlogging"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#usage",
        "title": "The logger.py module > Usage",
        "section": "Usage",
        "text": "Usage"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#global-logger",
        "title": "The logger.py module > Global logger",
        "section": "Global logger",
        "text": "There is a global logger named PyAnsys Heart_global that is created when\nansys.health.heart.__init__ is called.  If you want to use this global logger,\nyou must call it at the top of your module:\nYou can rename this logger to avoid conflicts with other loggers (if any):\nThe default logging level of LOG is ERROR.\nYou can change this level and output lower-level messages:\nAlternatively, you can ensure all the handlers are set to the input log level\nwith this code:\nThis logger does not log to a file by default. If you want, you can\nadd a file handler with this code:\nThis also sets the logger to be redirected to this file. If you want\nto change the characteristics of this global logger from the beginning\nof the execution, you must edit the file __init__ file in the\nansys.health.heart directory.\nTo log using this logger, call the desired method as a normal logger:\nGlobal logger\nPyAnsys Heart_global\nansys.health.heart.__init__\nLOG\nERROR\n__init__\nansys.health.heart"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#other-loggers",
        "title": "The logger.py module > Other loggers",
        "section": "Other loggers",
        "text": "You can create your own loggers using the Python logging library as\nyou would do in any other script.  There would be no conflicts between\nthese loggers.\nOther loggers\nlogging"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#module-detail",
        "title": "The logger.py module > Module detail",
        "section": "Module detail",
        "text": "Add a file handler to the input.\nLogger to add the file handler to.\nName of the output file, which is 'pyconv-de.log' by default.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWhether to write headers to the file.\nLogger or logging.Logger object.\nAdd a stdout handler to the logger.\nLogger to add the stdout handler to.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWhether to write headers to the file.\nLogger or logging.Logger object.\nModule detail\nlogging.Logger\npython:str\nFILE_NAME\n'pyconv-de.log'\npython:int\n10\nlogging.DEBUG\npython:False\nLogger\nLogger\nlogging.Logger\nlogging.Logger\npython:int\n10\n10\nlogging.DEBUG\npython:False\nLogger\nLogger\nlogging.Logger"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.addfile_handler",
        "title": "The logger.py module > Module detail > addfile_handler",
        "section": "Module detail > addfile_handler",
        "text": "logger.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL_STDOUT, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, default: FILE_NAME\n\nName of the output file, which is 'pyconv-de.log' by default.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, default: python:False\n\nWhether to write headers to the file.\n\nReturns\n\nLogger\n\nLogger or logging.Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.add_stdout_handler",
        "title": "The logger.py module > Module detail > add_stdout_handler",
        "section": "Module detail > add_stdout_handler",
        "text": "logger.add_stdout_handler(logger, level=LOG_LEVEL_STDOUT, write_headers=False)\n\nAdd a stdout handler to the logger.\n\nParameters\n\nlogger\n\nlogging.Logger\n\nLogger to add the stdout handler to.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, default: python:False\n\nWhether to write headers to the file.\n\nReturns\n\nLogger\n\nLogger or logging.Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.LOG_LEVEL_STDOUT",
        "title": "The logger.py module > Module detail > LOG_LEVEL_STDOUT",
        "section": "Module detail > LOG_LEVEL_STDOUT",
        "text": "logger.LOG_LEVEL_STDOUT = 20\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.LOG_LEVEL_FILE",
        "title": "The logger.py module > Module detail > LOG_LEVEL_FILE",
        "section": "Module detail > LOG_LEVEL_FILE",
        "text": "logger.LOG_LEVEL_FILE = 10\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.FILE_NAME",
        "title": "The logger.py module > Module detail > FILE_NAME",
        "section": "Module detail > FILE_NAME",
        "text": "logger.FILE_NAME = 'PyAnsys Heart.log'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.DEBUG",
        "title": "The logger.py module > Module detail > DEBUG",
        "section": "Module detail > DEBUG",
        "text": "logger.DEBUG = 10\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.INFO",
        "title": "The logger.py module > Module detail > INFO",
        "section": "Module detail > INFO",
        "text": "logger.INFO = 20\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.WARN",
        "title": "The logger.py module > Module detail > WARN",
        "section": "Module detail > WARN",
        "text": "logger.WARN = 30\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.ERROR",
        "title": "The logger.py module > Module detail > ERROR",
        "section": "Module detail > ERROR",
        "text": "logger.ERROR = 40\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.CRITICAL",
        "title": "The logger.py module > Module detail > CRITICAL",
        "section": "Module detail > CRITICAL",
        "text": "logger.CRITICAL = 50\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.STDOUT_MSG_FORMAT",
        "title": "The logger.py module > Module detail > STDOUT_MSG_FORMAT",
        "section": "Module detail > STDOUT_MSG_FORMAT",
        "text": "logger.STDOUT_MSG_FORMAT = '%(asctime)s - %(levelname)s - %(instance_name)s - %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.DATEFORMAT",
        "title": "The logger.py module > Module detail > DATEFORMAT",
        "section": "Module detail > DATEFORMAT",
        "text": "logger.DATEFORMAT = '%Y/%m/%d %H:%M:%S'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.FILE_MSG_FORMAT",
        "title": "The logger.py module > Module detail > FILE_MSG_FORMAT",
        "section": "Module detail > FILE_MSG_FORMAT",
        "text": "logger.FILE_MSG_FORMAT = '%(asctime)s - %(levelname)s - %(instance_name)s - %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.DEFAULT_STDOUT_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_STDOUT_HEADER",
        "section": "Module detail > DEFAULT_STDOUT_HEADER",
        "text": "logger.DEFAULT_STDOUT_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.DEFAULT_FILE_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_FILE_HEADER",
        "section": "Module detail > DEFAULT_FILE_HEADER",
        "text": "logger.DEFAULT_FILE_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.NEW_SESSION_HEADER",
        "title": "The logger.py module > Module detail > NEW_SESSION_HEADER",
        "section": "Module detail > NEW_SESSION_HEADER",
        "text": "logger.NEW_SESSION_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\n===============================================================================\n       NEW SESSION - Uninferable\n===============================================================================\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.LOG_LEVEL_STRING_TYPE",
        "title": "The logger.py module > Module detail > LOG_LEVEL_STRING_TYPE",
        "section": "Module detail > LOG_LEVEL_STRING_TYPE",
        "text": "logger.LOG_LEVEL_STRING_TYPE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.LOG_LEVEL_TYPE",
        "title": "The logger.py module > Module detail > LOG_LEVEL_TYPE",
        "section": "Module detail > LOG_LEVEL_TYPE",
        "text": "logger.LOG_LEVEL_TYPE\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/logger/index",
        "href": "api/ansys/health/heart/logger/index.html#logger.string_to_loglevel",
        "title": "The logger.py module > Module detail > string_to_loglevel",
        "section": "Module detail > string_to_loglevel",
        "text": "logger.string_to_loglevel: Dict[LOG_LEVEL_STRING_TYPE, int]\n\n"
    },
    {
        "objectID": "examples/postprocessor/index",
        "href": "examples/postprocessor/index.html#postprocessor-examples",
        "title": "Postprocessor examples",
        "section": "Postprocessor examples",
        "text": "These examples show how to use the postprocessor module\nto postprocess cardiac simulations.\nsphx_glr_examples_postprocessor_ep-postprocess-reaction-eikonal.py\nPostprocessor examples\npostprocessor"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#dynasettings",
        "title": "DynaSettings",
        "section": "DynaSettings",
        "text": "Class for collecting, managing, and validating LS-DYNA settings.\nDynaSettings\nDynaSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#ansys.health.heart.settings.settings.DynaSettings",
        "title": "DynaSettings > DynaSettings > DynaSettings",
        "section": "DynaSettings > DynaSettings",
        "text": "class ansys.health.heart.settings.settings.DynaSettings(lsdyna_path: pathlib.Path = 'lsdyna.exe', dynatype: Literal['smp', 'intelmpi', 'platformmpi', 'msmpi'] = 'intelmpi', num_cpus: int = 1, platform: Literal['windows', 'wsl', 'linux'] = 'windows', dyna_options: str = '', mpi_options: str = '')\n\nClass for collecting, managing, and validating LS-DYNA settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#overview",
        "title": "DynaSettings > Overview",
        "section": "Overview",
        "text": "get_commands\nGet command line arguments from the defined settings.\nlsdyna_path\nPath to LS-DYNA executable.\ndynatype\nType of DYNA executable.\nnum_cpus\nNumber of CPU’s requested.\nplatform\nPlatform DYNA is executed on.\ndyna_options\nAdditional command line options for dyna.\n__repr__\nRepresent self as string.\nOverview\nget_commands\nlsdyna_path\ndynatype\nnum_cpus\nplatform\ndyna_options\n__repr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#import-detail",
        "title": "DynaSettings > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#attribute-detail",
        "title": "DynaSettings > Attribute detail",
        "section": "Attribute detail",
        "text": "Path to LS-DYNA executable.\nType of DYNA executable.\nNumber of CPU’s requested.\nPlatform DYNA is executed on.\nAdditional command line options for dyna.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#DynaSettings.lsdyna_path",
        "title": "DynaSettings > Attribute detail > lsdyna_path",
        "section": "Attribute detail > lsdyna_path",
        "text": "DynaSettings.lsdyna_path: pathlib.Path = 'lsdyna.exe'\n\nPath to LS-DYNA executable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#DynaSettings.dynatype",
        "title": "DynaSettings > Attribute detail > dynatype",
        "section": "Attribute detail > dynatype",
        "text": "DynaSettings.dynatype: str = 'intelmpi'\n\nType of DYNA executable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#DynaSettings.num_cpus",
        "title": "DynaSettings > Attribute detail > num_cpus",
        "section": "Attribute detail > num_cpus",
        "text": "DynaSettings.num_cpus: int = 1\n\nNumber of CPU’s requested.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#DynaSettings.platform",
        "title": "DynaSettings > Attribute detail > platform",
        "section": "Attribute detail > platform",
        "text": "DynaSettings.platform: str = 'windows'\n\nPlatform DYNA is executed on.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#DynaSettings.dyna_options",
        "title": "DynaSettings > Attribute detail > dyna_options",
        "section": "Attribute detail > dyna_options",
        "text": "DynaSettings.dyna_options = ''\n\nAdditional command line options for dyna.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#method-detail",
        "title": "DynaSettings > Method detail",
        "section": "Method detail",
        "text": "Get command line arguments from the defined settings.\nPath to the LS-DYNA input file.\nList of strings of each of the commands.\nRepresent self as string.\nMethod detail\npathlib.Path\nList\npython:str"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#DynaSettings.get_commands",
        "title": "DynaSettings > Method detail > get_commands",
        "section": "Method detail > get_commands",
        "text": "DynaSettings.get_commands(path_to_input: pathlib.Path) -> List[str]\n\nGet command line arguments from the defined settings.\n\nParameters\n\npath_to_input\n\npathlib.Path\n\nPath to the LS-DYNA input file.\n\nReturns\n\nList[python:str]\n\nList of strings of each of the commands.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/DynaSettings",
        "href": "api/ansys/health/heart/settings/settings/DynaSettings.html#DynaSettings.__repr__",
        "title": "DynaSettings > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DynaSettings.__repr__()\n\nRepresent self as string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#icvoutreader",
        "title": "ICVoutReader",
        "section": "ICVoutReader",
        "text": "Read control volume data from the binout file.\nICVoutReader\nICVoutReader"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#ansys.health.heart.post.dpf_utils.ICVoutReader",
        "title": "ICVoutReader > ICVoutReader > ICVoutReader",
        "section": "ICVoutReader > ICVoutReader",
        "text": "class ansys.health.heart.post.dpf_utils.ICVoutReader(fn: str)\n\nRead control volume data from the binout file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#overview",
        "title": "ICVoutReader > Overview",
        "section": "Overview",
        "text": "get_time\nGet time array.\nget_pressure\nGet pressure array.\nget_volume\nGet volume array.\nget_flowrate\nGet flow rate array.\nOverview\nget_time\nget_pressure\nget_volume\nget_flowrate"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#import-detail",
        "title": "ICVoutReader > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#method-detail",
        "title": "ICVoutReader > Method detail",
        "section": "Method detail",
        "text": "Get time array.\ntime array\nGet pressure array.\nControl volume ID.\nPressure array.\nGet volume array.\nControl volume ID.\nVolume array.\nGet flow rate array.\nControl volume interaction ID.\nFlow rate array.\nMethod detail\nnp.ndarray\npython:int\nnp.ndarray\npython:int\nnp.ndarray\npython:int\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_time",
        "title": "ICVoutReader > Method detail > get_time",
        "section": "Method detail > get_time",
        "text": "ICVoutReader.get_time() -> numpy.ndarray\n\nGet time array.\n\nReturns\n\nnp.ndarray\n\ntime array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_pressure",
        "title": "ICVoutReader > Method detail > get_pressure",
        "section": "Method detail > get_pressure",
        "text": "ICVoutReader.get_pressure(icv_id: int) -> numpy.ndarray\n\nGet pressure array.\n\nParameters\n\nicv_id\n\npython:int\n\nControl volume ID.\n\nReturns\n\nnp.ndarray\n\nPressure array.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_volume",
        "title": "ICVoutReader > Method detail > get_volume",
        "section": "Method detail > get_volume",
        "text": "ICVoutReader.get_volume(icv_id: int) -> numpy.ndarray\n\nGet volume array.\n\nParameters\n\nicv_id\n\npython:int\n\nControl volume ID.\n\nReturns\n\nnp.ndarray\n\nVolume array.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/health/heart/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_flowrate",
        "title": "ICVoutReader > Method detail > get_flowrate",
        "section": "Method detail > get_flowrate",
        "text": "ICVoutReader.get_flowrate(icvi_id: int) -> numpy.ndarray\n\nGet flow rate array.\n\nParameters\n\nicvi_id\n\npython:int\n\nControl volume interaction ID.\n\nReturns\n\nnp.ndarray\n\nFlow rate array.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#electrophysiologybeamsdynawriter",
        "title": "ElectrophysiologyBeamsDynaWriter",
        "section": "ElectrophysiologyBeamsDynaWriter",
        "text": "Bases: ElectrophysiologyDynaWriter\nClass for preparing the input for an electrophysiology LS-DYNA simulation with beams only.\nElectrophysiologyBeamsDynaWriter\nElectrophysiologyBeamsDynaWriter\nElectrophysiologyDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#ansys.health.heart.writer.ep_writer.ElectrophysiologyBeamsDynaWriter",
        "title": "ElectrophysiologyBeamsDynaWriter > ElectrophysiologyBeamsDynaWriter > ElectrophysiologyBeamsDynaWriter",
        "section": "ElectrophysiologyBeamsDynaWriter > ElectrophysiologyBeamsDynaWriter",
        "text": "class ansys.health.heart.writer.ep_writer.ElectrophysiologyBeamsDynaWriter(model: ansys.health.heart.models.HeartModel, settings: ansys.health.heart.settings.settings.SimulationSettings = None)\n\nBases: ElectrophysiologyDynaWriter\n\nClass for preparing the input for an electrophysiology LS-DYNA simulation with beams only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#overview",
        "title": "ElectrophysiologyBeamsDynaWriter > Overview",
        "section": "Overview",
        "text": "update\nUpdate keyword database for electrophysiology.\nkw_database\nCollection of keywords relevant for electrophysiology.\nOverview\nupdate\nkw_database"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#import-detail",
        "title": "ElectrophysiologyBeamsDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#attribute-detail",
        "title": "ElectrophysiologyBeamsDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Collection of keywords relevant for electrophysiology.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#ElectrophysiologyBeamsDynaWriter.kw_database",
        "title": "ElectrophysiologyBeamsDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "ElectrophysiologyBeamsDynaWriter.kw_database\n\nCollection of keywords relevant for electrophysiology.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#method-detail",
        "title": "ElectrophysiologyBeamsDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Update keyword database for electrophysiology.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter",
        "href": "api/ansys/health/heart/writer/ep_writer/ElectrophysiologyBeamsDynaWriter.html#ElectrophysiologyBeamsDynaWriter.update",
        "title": "ElectrophysiologyBeamsDynaWriter > Method detail > update",
        "section": "Method detail > update",
        "text": "ElectrophysiologyBeamsDynaWriter.update() -> None\n\nUpdate keyword database for electrophysiology.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "This page explains how to install PyAnsys Heart from PyPI, the GitHub source code, or a wheel file.\nIf you do not have access to PyAnsys Heart, follow the instructions in install_from_wheel.\nYou might need to request the wheel file from your Ansys contact.\nConsider installing using a virtual environment to avoid conflicts with other packages. For more information,\nsee Creation of virtual environments in the Python documentation.\nInstallation"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#install-from-pypi",
        "title": "Getting started > Installation > Install from PyPI",
        "section": "Install from PyPI",
        "text": "Before you install PyAnsys Heart, ensure that you have the latest version\nof the pip package manager:\nThen, install PyAnsys Heart:\nInstall from PyPI"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#install-from-github-source-code",
        "title": "Getting started > Installation > Install from GitHub source code",
        "section": "Install from GitHub source code",
        "text": "To install the latest version of PyAnsys Heart from the GitHub source code,\nclone the repository:\nThen, verify the installation:\nInstall from GitHub source code"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#install-from-a-wheel-file",
        "title": "Getting started > Installation > Install from a wheel file",
        "section": "Install from a wheel file",
        "text": "If you do not have an internet connection, you can install PyAnsys Heart from a wheel file.\nDownload the wheelhouse archive for your corresponding machine architecture\nfrom the repository’s Releases page.\nEach release contains a wheel file for the corresponding Python version and\nmachine architecture. For example, to install the wheel file for\nPython 3.10 on a Windows machine, run the following commands:\nIf you are on Windows with Python 3.12, unzip the wheelhouse archive to a wheelhouse\ndirectory and then install using the same pip install command as in the preceding example.\nInstall from a wheel file\npip install"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#the-curvepy-module",
        "title": "The curve.py module",
        "section": "The curve.py module",
        "text": "The curve.py module\ncurve.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#summary",
        "title": "The curve.py module > Summary",
        "section": "Summary",
        "text": "ActiveCurve\nActive stress or Ca2+ curve.\nstrocchi_active\nActive stress in doi.org/10.1371/journal.pone.0235145.\nkumaraswamy_active\nActive stress in  Gaëtan Desrues doi.org/10.1007/978-3-030-78710-3_43.\nconstant_ca2\nConstant ca2 curve for Active model 1.\na\nSummary\nActiveCurve\nstrocchi_active\nkumaraswamy_active\nconstant_ca2\na"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#description",
        "title": "The curve.py module > Description",
        "section": "Description",
        "text": "Module for active stress curve.\nDescription"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#module-detail",
        "title": "The curve.py module > Module detail",
        "section": "Module detail",
        "text": "Active stress in doi.org/10.1371/journal.pone.0235145.\nT_peak is described in MAT_295\nheart beat period, by default 800\nstart time, by default 0\n(time, stress) array\nActive stress in  Gaëtan Desrues doi.org/10.1007/978-3-030-78710-3_43.\nT_peak is described in MAT295\nheart beat duration, by default 1000\n(timen,stress) array\nConstant ca2 curve for Active model 1.\nheart beat period, by default 800\namplitude which equals ca2ionm in MAT_295\n(time, stress) array\nModule detail\npython:int\noptional\npython:int\noptional\npython:tuple\nnp.ndarray\nnp.ndarray\npython:int\noptional\npython:tuple\nnp.ndarray\nnp.ndarray\npython:float\noptional\npython:float\noptional\npython:tuple\nnp.ndarray\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#curve.strocchi_active",
        "title": "The curve.py module > Module detail > strocchi_active",
        "section": "Module detail > strocchi_active",
        "text": "curve.strocchi_active(t_end=800, t_act=0) -> tuple[numpy.ndarray, numpy.ndarray]\n\nActive stress in doi.org/10.1371/journal.pone.0235145.\n\nT_peak is described in MAT_295\n\nParameters\n\nt_end\n\npython:int, optional\n\nheart beat period, by default 800\n\nt_act\n\npython:int, optional\n\nstart time, by default 0\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\n(time, stress) array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#curve.kumaraswamy_active",
        "title": "The curve.py module > Module detail > kumaraswamy_active",
        "section": "Module detail > kumaraswamy_active",
        "text": "curve.kumaraswamy_active(t_end=1000) -> tuple[numpy.ndarray, numpy.ndarray]\n\nActive stress in  Gaëtan Desrues doi.org/10.1007/978-3-030-78710-3_43.\n\nT_peak is described in MAT295\n\nParameters\n\nt_end\n\npython:int, optional\n\nheart beat duration, by default 1000\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\n(timen,stress) array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#curve.constant_ca2",
        "title": "The curve.py module > Module detail > constant_ca2",
        "section": "Module detail > constant_ca2",
        "text": "curve.constant_ca2(tb: float = 800, ca2ionm: float = 4.35) -> tuple[numpy.ndarray, numpy.ndarray]\n\nConstant ca2 curve for Active model 1.\n\nParameters\n\ntb\n\npython:float, optional\n\nheart beat period, by default 800\n\nca2ionm\n\n: python:float, optional\n\namplitude which equals ca2ionm in MAT_295\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\n(time, stress) array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/curve/index",
        "href": "api/ansys/health/heart/settings/material/curve/index.html#curve.a",
        "title": "The curve.py module > Module detail > a",
        "section": "Module detail > a",
        "text": "curve.a\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#stimulation",
        "title": "Stimulation",
        "section": "Stimulation",
        "text": "Bases: Settings\nStimulation settings.\nStimulation\nStimulation\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#ansys.health.heart.settings.settings.Stimulation",
        "title": "Stimulation > Stimulation > Stimulation",
        "section": "Stimulation > Stimulation",
        "text": "class ansys.health.heart.settings.settings.Stimulation\n\nBases: Settings\n\nStimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#overview",
        "title": "Stimulation > Overview",
        "section": "Overview",
        "text": "node_ids\nt_start\nperiod\nduration\namplitude\n__setattr__\nSet attributes.\nOverview\nnode_ids\nt_start\nperiod\nduration\namplitude\n__setattr__"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#import-detail",
        "title": "Stimulation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#attribute-detail",
        "title": "Stimulation > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#Stimulation.node_ids",
        "title": "Stimulation > Attribute detail > node_ids",
        "section": "Attribute detail > node_ids",
        "text": "Stimulation.node_ids: List[int] = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#Stimulation.t_start",
        "title": "Stimulation > Attribute detail > t_start",
        "section": "Attribute detail > t_start",
        "text": "Stimulation.t_start: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#Stimulation.period",
        "title": "Stimulation > Attribute detail > period",
        "section": "Attribute detail > period",
        "text": "Stimulation.period: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#Stimulation.duration",
        "title": "Stimulation > Attribute detail > duration",
        "section": "Attribute detail > duration",
        "text": "Stimulation.duration: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#Stimulation.amplitude",
        "title": "Stimulation > Attribute detail > amplitude",
        "section": "Attribute detail > amplitude",
        "text": "Stimulation.amplitude: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#method-detail",
        "title": "Stimulation > Method detail",
        "section": "Method detail",
        "text": "Set attributes.\nAttribute name.\nAttribute value.\nMethod detail\npython:str\n_type_"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Stimulation",
        "href": "api/ansys/health/heart/settings/settings/Stimulation.html#Stimulation.__setattr__",
        "title": "Stimulation > Method detail > __setattr__",
        "section": "Method detail > __setattr__",
        "text": "Stimulation.__setattr__(__name: str, __value) -> None\n\nSet attributes.\n\nParameters\n\n__name\n\npython:str\n\nAttribute name.\n\n__value\n\n_type_\n\nAttribute value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#tentusscher",
        "title": "Tentusscher",
        "section": "Tentusscher",
        "text": "Hold data for Tentusscher cell model.\nTentusscher\nTentusscher"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#ansys.health.heart.settings.material.ep_material.CellModel.Tentusscher",
        "title": "Tentusscher > Tentusscher > Tentusscher",
        "section": "Tentusscher > Tentusscher",
        "text": "class ansys.health.heart.settings.material.ep_material.CellModel.Tentusscher\n\nHold data for Tentusscher cell model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#overview",
        "title": "Tentusscher > Overview",
        "section": "Overview",
        "text": "to_dictionary\nConvert to dictionary.\ngas_constant\nt\nfaraday_constant\ncm\nvc\nvsr\nvss\npkna\nko\nnao\ncao\ngk1\ngkr\ngna\ngbna\ngcal\ngbca\ngpca\ngpk\npnak\nkm\nkmna\nknaca\nksat\nalpha\ngamma\nkmca\nkmnai\nkpca\nk1\nk2\nk3\nk4\nec\nmaxsr\nminsr\nvrel\nvleak\nvxfer\nvmaxup\nkup\nbufc\nkbufc\nbufsr\nkbufsf\nbufss\nkbufss\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\nto_dictionary\ngas_constant\nt\nfaraday_constant\ncm\nvc\nvsr\nvss\npkna\nko\nnao\ncao\ngk1\ngkr\ngna\ngbna\ngcal\ngbca\ngpca\ngpk\npnak\nkm\nkmna\nknaca\nksat\nalpha\ngamma\nkmca\nkmnai\nkpca\nk1\nk2\nk3\nk4\nec\nmaxsr\nminsr\nvrel\nvleak\nvxfer\nvmaxup\nkup\nbufc\nkbufc\nbufsr\nkbufsf\nbufss\nkbufss\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#import-detail",
        "title": "Tentusscher > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#attribute-detail",
        "title": "Tentusscher > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gas_constant",
        "title": "Tentusscher > Attribute detail > gas_constant",
        "section": "Attribute detail > gas_constant",
        "text": "Tentusscher.gas_constant: float = 8314.472\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.t",
        "title": "Tentusscher > Attribute detail > t",
        "section": "Attribute detail > t",
        "text": "Tentusscher.t: float = 310\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.faraday_constant",
        "title": "Tentusscher > Attribute detail > faraday_constant",
        "section": "Attribute detail > faraday_constant",
        "text": "Tentusscher.faraday_constant: float = 96485.3415\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cm",
        "title": "Tentusscher > Attribute detail > cm",
        "section": "Attribute detail > cm",
        "text": "Tentusscher.cm: float = 0.185\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vc",
        "title": "Tentusscher > Attribute detail > vc",
        "section": "Attribute detail > vc",
        "text": "Tentusscher.vc: float = 0.016404\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vsr",
        "title": "Tentusscher > Attribute detail > vsr",
        "section": "Attribute detail > vsr",
        "text": "Tentusscher.vsr: float = 0.001094\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vss",
        "title": "Tentusscher > Attribute detail > vss",
        "section": "Attribute detail > vss",
        "text": "Tentusscher.vss: float = 5.468e-05\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.pkna",
        "title": "Tentusscher > Attribute detail > pkna",
        "section": "Attribute detail > pkna",
        "text": "Tentusscher.pkna: float = 0.03\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ko",
        "title": "Tentusscher > Attribute detail > ko",
        "section": "Attribute detail > ko",
        "text": "Tentusscher.ko: float = 5.4\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.nao",
        "title": "Tentusscher > Attribute detail > nao",
        "section": "Attribute detail > nao",
        "text": "Tentusscher.nao: float = 140.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cao",
        "title": "Tentusscher > Attribute detail > cao",
        "section": "Attribute detail > cao",
        "text": "Tentusscher.cao: float = 2.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gk1",
        "title": "Tentusscher > Attribute detail > gk1",
        "section": "Attribute detail > gk1",
        "text": "Tentusscher.gk1: float = 5.405\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gkr",
        "title": "Tentusscher > Attribute detail > gkr",
        "section": "Attribute detail > gkr",
        "text": "Tentusscher.gkr: float = 0.153\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gna",
        "title": "Tentusscher > Attribute detail > gna",
        "section": "Attribute detail > gna",
        "text": "Tentusscher.gna: float = 14.838\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gbna",
        "title": "Tentusscher > Attribute detail > gbna",
        "section": "Attribute detail > gbna",
        "text": "Tentusscher.gbna: float = 0.0002\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gcal",
        "title": "Tentusscher > Attribute detail > gcal",
        "section": "Attribute detail > gcal",
        "text": "Tentusscher.gcal: float = 3.98e-05\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gbca",
        "title": "Tentusscher > Attribute detail > gbca",
        "section": "Attribute detail > gbca",
        "text": "Tentusscher.gbca: float = 0.000592\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gpca",
        "title": "Tentusscher > Attribute detail > gpca",
        "section": "Attribute detail > gpca",
        "text": "Tentusscher.gpca: float = 0.1238\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gpk",
        "title": "Tentusscher > Attribute detail > gpk",
        "section": "Attribute detail > gpk",
        "text": "Tentusscher.gpk: float = 0.0146\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.pnak",
        "title": "Tentusscher > Attribute detail > pnak",
        "section": "Attribute detail > pnak",
        "text": "Tentusscher.pnak: float = 2.724\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.km",
        "title": "Tentusscher > Attribute detail > km",
        "section": "Attribute detail > km",
        "text": "Tentusscher.km: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kmna",
        "title": "Tentusscher > Attribute detail > kmna",
        "section": "Attribute detail > kmna",
        "text": "Tentusscher.kmna: float = 40.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.knaca",
        "title": "Tentusscher > Attribute detail > knaca",
        "section": "Attribute detail > knaca",
        "text": "Tentusscher.knaca: float = 1000.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ksat",
        "title": "Tentusscher > Attribute detail > ksat",
        "section": "Attribute detail > ksat",
        "text": "Tentusscher.ksat: float = 0.1\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.alpha",
        "title": "Tentusscher > Attribute detail > alpha",
        "section": "Attribute detail > alpha",
        "text": "Tentusscher.alpha: float = 2.5\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gamma",
        "title": "Tentusscher > Attribute detail > gamma",
        "section": "Attribute detail > gamma",
        "text": "Tentusscher.gamma: float = 0.35\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kmca",
        "title": "Tentusscher > Attribute detail > kmca",
        "section": "Attribute detail > kmca",
        "text": "Tentusscher.kmca: float = 1.38\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kmnai",
        "title": "Tentusscher > Attribute detail > kmnai",
        "section": "Attribute detail > kmnai",
        "text": "Tentusscher.kmnai: float = 87.5\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kpca",
        "title": "Tentusscher > Attribute detail > kpca",
        "section": "Attribute detail > kpca",
        "text": "Tentusscher.kpca: float = 0.0005\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k1",
        "title": "Tentusscher > Attribute detail > k1",
        "section": "Attribute detail > k1",
        "text": "Tentusscher.k1: float = 0.15\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k2",
        "title": "Tentusscher > Attribute detail > k2",
        "section": "Attribute detail > k2",
        "text": "Tentusscher.k2: float = 0.045\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k3",
        "title": "Tentusscher > Attribute detail > k3",
        "section": "Attribute detail > k3",
        "text": "Tentusscher.k3: float = 0.06\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k4",
        "title": "Tentusscher > Attribute detail > k4",
        "section": "Attribute detail > k4",
        "text": "Tentusscher.k4: float = 0.005\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ec",
        "title": "Tentusscher > Attribute detail > ec",
        "section": "Attribute detail > ec",
        "text": "Tentusscher.ec: float = 1.5\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.maxsr",
        "title": "Tentusscher > Attribute detail > maxsr",
        "section": "Attribute detail > maxsr",
        "text": "Tentusscher.maxsr: float = 2.5\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.minsr",
        "title": "Tentusscher > Attribute detail > minsr",
        "section": "Attribute detail > minsr",
        "text": "Tentusscher.minsr: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vrel",
        "title": "Tentusscher > Attribute detail > vrel",
        "section": "Attribute detail > vrel",
        "text": "Tentusscher.vrel: float = 0.102\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vleak",
        "title": "Tentusscher > Attribute detail > vleak",
        "section": "Attribute detail > vleak",
        "text": "Tentusscher.vleak: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vxfer",
        "title": "Tentusscher > Attribute detail > vxfer",
        "section": "Attribute detail > vxfer",
        "text": "Tentusscher.vxfer: float = 0.0038\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vmaxup",
        "title": "Tentusscher > Attribute detail > vmaxup",
        "section": "Attribute detail > vmaxup",
        "text": "Tentusscher.vmaxup: float = 0.006375\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kup",
        "title": "Tentusscher > Attribute detail > kup",
        "section": "Attribute detail > kup",
        "text": "Tentusscher.kup: float = 0.00025\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.bufc",
        "title": "Tentusscher > Attribute detail > bufc",
        "section": "Attribute detail > bufc",
        "text": "Tentusscher.bufc: float = 0.2\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kbufc",
        "title": "Tentusscher > Attribute detail > kbufc",
        "section": "Attribute detail > kbufc",
        "text": "Tentusscher.kbufc: float = 0.001\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.bufsr",
        "title": "Tentusscher > Attribute detail > bufsr",
        "section": "Attribute detail > bufsr",
        "text": "Tentusscher.bufsr: float = 10.0\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kbufsf",
        "title": "Tentusscher > Attribute detail > kbufsf",
        "section": "Attribute detail > kbufsf",
        "text": "Tentusscher.kbufsf: float = 0.3\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.bufss",
        "title": "Tentusscher > Attribute detail > bufss",
        "section": "Attribute detail > bufss",
        "text": "Tentusscher.bufss: float = 0.4\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kbufss",
        "title": "Tentusscher > Attribute detail > kbufss",
        "section": "Attribute detail > kbufss",
        "text": "Tentusscher.kbufss: float = 0.00025\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gks",
        "title": "Tentusscher > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "Tentusscher.gks: float = 0.392\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gto",
        "title": "Tentusscher > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "Tentusscher.gto: float = 0.294\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.v",
        "title": "Tentusscher > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "Tentusscher.v: float = -85.23\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ki",
        "title": "Tentusscher > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "Tentusscher.ki: float = 136.89\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.nai",
        "title": "Tentusscher > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "Tentusscher.nai: float = 8.604\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cai",
        "title": "Tentusscher > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "Tentusscher.cai: float = 0.000126\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cass",
        "title": "Tentusscher > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "Tentusscher.cass: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.casr",
        "title": "Tentusscher > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "Tentusscher.casr: float = 3.64\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.rpri",
        "title": "Tentusscher > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "Tentusscher.rpri: float = 0.9073\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.xr1",
        "title": "Tentusscher > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "Tentusscher.xr1: float = 0.00621\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.xr2",
        "title": "Tentusscher > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "Tentusscher.xr2: float = 0.4712\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.xs",
        "title": "Tentusscher > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "Tentusscher.xs: float = 0.0095\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.m",
        "title": "Tentusscher > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "Tentusscher.m: float = 0.00172\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.h",
        "title": "Tentusscher > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "Tentusscher.h: float = 0.7444\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.j",
        "title": "Tentusscher > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "Tentusscher.j: float = 0.7045\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.d",
        "title": "Tentusscher > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "Tentusscher.d: float = 3.373e-05\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.f",
        "title": "Tentusscher > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "Tentusscher.f: float = 0.7888\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.f2",
        "title": "Tentusscher > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "Tentusscher.f2: float = 0.9755\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.fcass",
        "title": "Tentusscher > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "Tentusscher.fcass: float = 0.9953\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.s",
        "title": "Tentusscher > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "Tentusscher.s: float = 0.999998\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.r",
        "title": "Tentusscher > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "Tentusscher.r: float = 2.42e-08\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#method-detail",
        "title": "Tentusscher > Method detail",
        "section": "Method detail",
        "text": "Convert to dictionary.\nMethod detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/health/heart/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.to_dictionary",
        "title": "Tentusscher > Method detail > to_dictionary",
        "section": "Method detail > to_dictionary",
        "text": "Tentusscher.to_dictionary()\n\nConvert to dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#mechanics",
        "title": "Mechanics",
        "section": "Mechanics",
        "text": "Bases: Settings\nClass for keeping track of settings.\nMechanics\nMechanics\nSettings"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#ansys.health.heart.settings.settings.Mechanics",
        "title": "Mechanics > Mechanics > Mechanics",
        "section": "Mechanics > Mechanics",
        "text": "class ansys.health.heart.settings.settings.Mechanics\n\nBases: Settings\n\nClass for keeping track of settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#overview",
        "title": "Mechanics > Overview",
        "section": "Overview",
        "text": "analysis\nGeneric analysis settings.\nmaterial\nMaterial settings/configuration.\nboundary_conditions\nBoundary condition specifications.\nsystem\nSystem model settings.\nOverview\nanalysis\nmaterial\nboundary_conditions\nsystem"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#import-detail",
        "title": "Mechanics > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#attribute-detail",
        "title": "Mechanics > Attribute detail",
        "section": "Attribute detail",
        "text": "Generic analysis settings.\nMaterial settings/configuration.\nBoundary condition specifications.\nSystem model settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#Mechanics.analysis",
        "title": "Mechanics > Attribute detail > analysis",
        "section": "Attribute detail > analysis",
        "text": "Mechanics.analysis: Analysis\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#Mechanics.material",
        "title": "Mechanics > Attribute detail > material",
        "section": "Attribute detail > material",
        "text": "Mechanics.material: Material\n\nMaterial settings/configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#Mechanics.boundary_conditions",
        "title": "Mechanics > Attribute detail > boundary_conditions",
        "section": "Attribute detail > boundary_conditions",
        "text": "Mechanics.boundary_conditions: BoundaryConditions\n\nBoundary condition specifications.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/Mechanics",
        "href": "api/ansys/health/heart/settings/settings/Mechanics.html#Mechanics.system",
        "title": "Mechanics > Attribute detail > system",
        "section": "Attribute detail > system",
        "text": "Mechanics.system: SystemModel\n\nSystem model settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Myocardium",
        "href": "api/ansys/health/heart/parts/Myocardium.html#myocardium",
        "title": "Myocardium",
        "section": "Myocardium",
        "text": "Bases: Part\nMyocardium part.\nMyocardium\nMyocardium\nPart"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Myocardium",
        "href": "api/ansys/health/heart/parts/Myocardium.html#ansys.health.heart.parts.Myocardium",
        "title": "Myocardium > Myocardium > Myocardium",
        "section": "Myocardium > Myocardium",
        "text": "class ansys.health.heart.parts.Myocardium(name: str = None)\n\nBases: Part\n\nMyocardium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/parts/Myocardium",
        "href": "api/ansys/health/heart/parts/Myocardium.html#import-detail",
        "title": "Myocardium > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#fullheart",
        "title": "FullHeart",
        "section": "FullHeart",
        "text": "Bases: FourChamber\nModel of both ventricles, both atria, the aorta, and the pulmonary artery.\nFullHeart\nFullHeart\nFourChamber"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#ansys.health.heart.models.FullHeart",
        "title": "FullHeart > FullHeart > FullHeart",
        "section": "FullHeart > FullHeart",
        "text": "class ansys.health.heart.models.FullHeart(working_directory: pathlib.Path | str = None)\n\nBases: FourChamber\n\nModel of both ventricles, both atria, the aorta, and the pulmonary artery.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#overview",
        "title": "FullHeart > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nright_ventricle\nRight ventricle part.\nseptum\nSeptum.\nleft_atrium\nLeft atrium part.\nright_atrium\nRight atrium part.\naorta\nAorta part.\npulmonary_artery\nPulmonary artery part.\nOverview\nleft_ventricle\nright_ventricle\nseptum\nleft_atrium\nright_atrium\naorta\npulmonary_artery"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#import-detail",
        "title": "FullHeart > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#attribute-detail",
        "title": "FullHeart > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nRight ventricle part.\nSeptum.\nLeft atrium part.\nRight atrium part.\nAorta part.\nPulmonary artery part.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#FullHeart.left_ventricle",
        "title": "FullHeart > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "FullHeart.left_ventricle: ansys.health.heart.parts.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#FullHeart.right_ventricle",
        "title": "FullHeart > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "FullHeart.right_ventricle: ansys.health.heart.parts.Part\n\nRight ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#FullHeart.septum",
        "title": "FullHeart > Attribute detail > septum",
        "section": "Attribute detail > septum",
        "text": "FullHeart.septum: ansys.health.heart.parts.Part\n\nSeptum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#FullHeart.left_atrium",
        "title": "FullHeart > Attribute detail > left_atrium",
        "section": "Attribute detail > left_atrium",
        "text": "FullHeart.left_atrium: ansys.health.heart.parts.Part\n\nLeft atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#FullHeart.right_atrium",
        "title": "FullHeart > Attribute detail > right_atrium",
        "section": "Attribute detail > right_atrium",
        "text": "FullHeart.right_atrium: ansys.health.heart.parts.Part\n\nRight atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#FullHeart.aorta",
        "title": "FullHeart > Attribute detail > aorta",
        "section": "Attribute detail > aorta",
        "text": "FullHeart.aorta: ansys.health.heart.parts.Part\n\nAorta part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FullHeart",
        "href": "api/ansys/health/heart/models/FullHeart.html#FullHeart.pulmonary_artery",
        "title": "FullHeart > Attribute detail > pulmonary_artery",
        "section": "Attribute detail > pulmonary_artery",
        "text": "FullHeart.pulmonary_artery: ansys.health.heart.parts.Part\n\nPulmonary artery part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "89:18.769 total execution time for 8 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_simulator_ep-mechanics-simulator-fullheart.py (..\\..\\examples\\simulator\\ep-mechanics-simulator-fullheart.py)\n60:04.222\n0.0\nsphx_glr_examples_preprocessor_preprocess-fullheart.py (..\\..\\examples\\preprocessor\\preprocess-fullheart.py)\n08:29.768\n0.0\nsphx_glr_examples_simulator_mechanics-simulator-leftventricle_pr.py (..\\..\\examples\\simulator\\mechanics-simulator-leftventricle_pr.py)\n08:22.170\n0.0\nsphx_glr_examples_simulator_ep-simulator-fullheart_rodero.py (..\\..\\examples\\simulator\\ep-simulator-fullheart_rodero.py)\n07:55.673\n0.0\nsphx_glr_examples_preprocessor_compute-atrial-fibers_pr.py (..\\..\\examples\\preprocessor\\compute-atrial-fibers_pr.py)\n03:59.172\n0.0\nsphx_glr_examples_preprocessor_download-case_pr.py (..\\..\\examples\\preprocessor\\download-case_pr.py)\n00:11.127\n0.0\nsphx_glr_examples_postprocessor_ep-postprocess-reaction-eikonal.py (..\\..\\examples\\postprocessor\\ep-postprocess-reaction-eikonal.py)\n00:09.113\n0.0\nsphx_glr_examples_preprocessor_demo-material_pr.py (..\\..\\examples\\preprocessor\\demo-material_pr.py)\n00:07.523\n0.0\nComputation times\n..\\..\\examples\\simulator\\ep-mechanics-simulator-fullheart.py\n..\\..\\examples\\preprocessor\\preprocess-fullheart.py\n..\\..\\examples\\simulator\\mechanics-simulator-leftventricle_pr.py\n..\\..\\examples\\simulator\\ep-simulator-fullheart_rodero.py\n..\\..\\examples\\preprocessor\\compute-atrial-fibers_pr.py\n..\\..\\examples\\preprocessor\\download-case_pr.py\n..\\..\\examples\\postprocessor\\ep-postprocess-reaction-eikonal.py\n..\\..\\examples\\preprocessor\\demo-material_pr.py"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#analysiszeropressure",
        "title": "AnalysisZeroPressure",
        "section": "AnalysisZeroPressure",
        "text": "Bases: Analysis\nClass for keeping track of zero-pressure analysis settings.\nAnalysisZeroPressure\nAnalysisZeroPressure\nAnalysis"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#ansys.health.heart.settings.settings.AnalysisZeroPressure",
        "title": "AnalysisZeroPressure > AnalysisZeroPressure > AnalysisZeroPressure",
        "section": "AnalysisZeroPressure > AnalysisZeroPressure",
        "text": "class ansys.health.heart.settings.settings.AnalysisZeroPressure\n\nBases: Analysis\n\nClass for keeping track of zero-pressure analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#overview",
        "title": "AnalysisZeroPressure > Overview",
        "section": "Overview",
        "text": "dt_nodout\nTime interval of nodeout export.\nmax_iters\nMaximum iterations for stress-free-configuration algorithm.\nmethod\nMethod to use.\ntolerance\nTolerance to use for iterative algorithm.\nOverview\ndt_nodout\nmax_iters\nmethod\ntolerance"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#import-detail",
        "title": "AnalysisZeroPressure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#attribute-detail",
        "title": "AnalysisZeroPressure > Attribute detail",
        "section": "Attribute detail",
        "text": "Time interval of nodeout export.\nMaximum iterations for stress-free-configuration algorithm.\nMethod to use.\nTolerance to use for iterative algorithm.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.dt_nodout",
        "title": "AnalysisZeroPressure > Attribute detail > dt_nodout",
        "section": "Attribute detail > dt_nodout",
        "text": "AnalysisZeroPressure.dt_nodout: pint.Quantity = 0\n\nTime interval of nodeout export.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.max_iters",
        "title": "AnalysisZeroPressure > Attribute detail > max_iters",
        "section": "Attribute detail > max_iters",
        "text": "AnalysisZeroPressure.max_iters: int = 3\n\nMaximum iterations for stress-free-configuration algorithm.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.method",
        "title": "AnalysisZeroPressure > Attribute detail > method",
        "section": "Attribute detail > method",
        "text": "AnalysisZeroPressure.method: int = 2\n\nMethod to use.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/health/heart/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.tolerance",
        "title": "AnalysisZeroPressure > Attribute detail > tolerance",
        "section": "Attribute detail > tolerance",
        "text": "AnalysisZeroPressure.tolerance: float = 5.0\n\nTolerance to use for iterative algorithm.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#passive",
        "title": "Passive",
        "section": "Passive",
        "text": "Bases: EPMaterialModel\nHold data for EP passive material.\nPassive\nPassive\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#ansys.health.heart.settings.material.ep_material.EPMaterial.Passive",
        "title": "Passive > Passive > Passive",
        "section": "Passive > Passive",
        "text": "class ansys.health.heart.settings.material.ep_material.EPMaterial.Passive\n\nBases: EPMaterialModel\n\nHold data for EP passive material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#overview",
        "title": "Passive > Overview",
        "section": "Overview",
        "text": "sigma_fiber\nsigma_sheet\nsigma_sheet_normal\nOverview\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#import-detail",
        "title": "Passive > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#attribute-detail",
        "title": "Passive > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#Passive.sigma_fiber",
        "title": "Passive > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "Passive.sigma_fiber: float\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#Passive.sigma_sheet",
        "title": "Passive > Attribute detail > sigma_sheet",
        "section": "Attribute detail > sigma_sheet",
        "text": "Passive.sigma_sheet: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/health/heart/settings/material/ep_material/EPMaterial.Passive.html#Passive.sigma_sheet_normal",
        "title": "Passive > Attribute detail > sigma_sheet_normal",
        "section": "Attribute detail > sigma_sheet_normal",
        "text": "Passive.sigma_sheet_normal: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#fourchamber",
        "title": "FourChamber",
        "section": "FourChamber",
        "text": "Bases: HeartModel\nModel of the left/right ventricle and left/right atrium.\nFourChamber\nFourChamber\nHeartModel"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#ansys.health.heart.models.FourChamber",
        "title": "FourChamber > FourChamber > FourChamber",
        "section": "FourChamber > FourChamber",
        "text": "class ansys.health.heart.models.FourChamber(working_directory: pathlib.Path | str = None)\n\nBases: HeartModel\n\nModel of the left/right ventricle and left/right atrium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#overview",
        "title": "FourChamber > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nright_ventricle\nRight ventricle part.\nseptum\nSeptum.\nleft_atrium\nLeft atrium part.\nright_atrium\nRight atrium part.\nOverview\nleft_ventricle\nright_ventricle\nseptum\nleft_atrium\nright_atrium"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#import-detail",
        "title": "FourChamber > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#attribute-detail",
        "title": "FourChamber > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nRight ventricle part.\nSeptum.\nLeft atrium part.\nRight atrium part.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#FourChamber.left_ventricle",
        "title": "FourChamber > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "FourChamber.left_ventricle: ansys.health.heart.parts.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#FourChamber.right_ventricle",
        "title": "FourChamber > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "FourChamber.right_ventricle: ansys.health.heart.parts.Part\n\nRight ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#FourChamber.septum",
        "title": "FourChamber > Attribute detail > septum",
        "section": "Attribute detail > septum",
        "text": "FourChamber.septum: ansys.health.heart.parts.Part\n\nSeptum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#FourChamber.left_atrium",
        "title": "FourChamber > Attribute detail > left_atrium",
        "section": "Attribute detail > left_atrium",
        "text": "FourChamber.left_atrium: ansys.health.heart.parts.Part\n\nLeft atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/models/FourChamber",
        "href": "api/ansys/health/heart/models/FourChamber.html#FourChamber.right_atrium",
        "title": "FourChamber > Attribute detail > right_atrium",
        "section": "Attribute detail > right_atrium",
        "text": "FourChamber.right_atrium: ansys.health.heart.parts.Part\n\nRight atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#basedynawriter",
        "title": "BaseDynaWriter",
        "section": "BaseDynaWriter",
        "text": "Base class that contains essential features for all LS-DYNA heart models.\nBaseDynaWriter\nBaseDynaWriter"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#ansys.health.heart.writer.base_writer.BaseDynaWriter",
        "title": "BaseDynaWriter > BaseDynaWriter > BaseDynaWriter",
        "section": "BaseDynaWriter > BaseDynaWriter",
        "text": "class ansys.health.heart.writer.base_writer.BaseDynaWriter(model: ansys.health.heart.models.HeartModel, settings: ansys.health.heart.settings.settings.SimulationSettings = None)\n\nBase class that contains essential features for all LS-DYNA heart models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#overview",
        "title": "BaseDynaWriter > Overview",
        "section": "Overview",
        "text": "get_unique_part_id\nSuggest a unique non-used part ID.\nget_unique_mat_id\nSuggest a unique non-used material ID.\nget_unique_section_id\nSuggest a unique non-used section ID.\nget_unique_segmentset_id\nSuggest a unique non-used segment set ID.\nget_unique_nodeset_id\nSuggest a unique non-used nodeset ID.\nget_unique_partset_id\nSuggest a unique non-used part ID.\nget_unique_curve_id\nSuggest a unique curve ID.\ninclude_to_main\nAdd *INCLUDE keywords into the main decl.\nexport\nWrite the model to files.\nexport_databases\nExport each non-empty database to a specified directory.\nmodel\nModel information necessary for creating the LS-DYNA K files.\nkw_database\nmax_node_id\nMax node id.\nsection_ids\nList of used section ids.\nmat_ids\nList of used mat ids.\nvolume_mesh\nVolume mesh information.\nid_offset\nID offset for several relevant keywords.\nOverview\nget_unique_part_id\nget_unique_mat_id\nget_unique_section_id\nget_unique_segmentset_id\nget_unique_nodeset_id\nget_unique_partset_id\nget_unique_curve_id\ninclude_to_main\nexport\nexport_databases\nmodel\nkw_database\nmax_node_id\nsection_ids\nmat_ids\nvolume_mesh\nid_offset"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#import-detail",
        "title": "BaseDynaWriter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#attribute-detail",
        "title": "BaseDynaWriter > Attribute detail",
        "section": "Attribute detail",
        "text": "Model information necessary for creating the LS-DYNA K files.\nMax node id.\nList of used section ids.\nList of used mat ids.\nVolume mesh information.\nID offset for several relevant keywords.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.model",
        "title": "BaseDynaWriter > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "BaseDynaWriter.model\n\nModel information necessary for creating the LS-DYNA K files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.kw_database",
        "title": "BaseDynaWriter > Attribute detail > kw_database",
        "section": "Attribute detail > kw_database",
        "text": "BaseDynaWriter.kw_database\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.max_node_id",
        "title": "BaseDynaWriter > Attribute detail > max_node_id",
        "section": "Attribute detail > max_node_id",
        "text": "BaseDynaWriter.max_node_id: int = 0\n\nMax node id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.section_ids",
        "title": "BaseDynaWriter > Attribute detail > section_ids",
        "section": "Attribute detail > section_ids",
        "text": "BaseDynaWriter.section_ids = []\n\nList of used section ids.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.mat_ids",
        "title": "BaseDynaWriter > Attribute detail > mat_ids",
        "section": "Attribute detail > mat_ids",
        "text": "BaseDynaWriter.mat_ids = []\n\nList of used mat ids.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.volume_mesh",
        "title": "BaseDynaWriter > Attribute detail > volume_mesh",
        "section": "Attribute detail > volume_mesh",
        "text": "BaseDynaWriter.volume_mesh\n\nVolume mesh information.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.id_offset",
        "title": "BaseDynaWriter > Attribute detail > id_offset",
        "section": "Attribute detail > id_offset",
        "text": "BaseDynaWriter.id_offset\n\nID offset for several relevant keywords.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#method-detail",
        "title": "BaseDynaWriter > Method detail",
        "section": "Method detail",
        "text": "Suggest a unique non-used part ID.\nSuggest a unique non-used material ID.\nSuggest a unique non-used section ID.\nSuggest a unique non-used segment set ID.\nSuggest a unique non-used nodeset ID.\nSuggest a unique non-used part ID.\nSuggest a unique curve ID.\nAdd *INCLUDE keywords into the main decl.\nFiles to include.\nWrite the model to files.\nExport directory.\nUser-provided K files.\nExport each non-empty database to a specified directory.\nMethod detail\npython:list\npython:str\npython:str\npython:str\npython:list\npython:str\npython:None"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.get_unique_part_id",
        "title": "BaseDynaWriter > Method detail > get_unique_part_id",
        "section": "Method detail > get_unique_part_id",
        "text": "BaseDynaWriter.get_unique_part_id() -> int\n\nSuggest a unique non-used part ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.get_unique_mat_id",
        "title": "BaseDynaWriter > Method detail > get_unique_mat_id",
        "section": "Method detail > get_unique_mat_id",
        "text": "BaseDynaWriter.get_unique_mat_id() -> int\n\nSuggest a unique non-used material ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.get_unique_section_id",
        "title": "BaseDynaWriter > Method detail > get_unique_section_id",
        "section": "Method detail > get_unique_section_id",
        "text": "BaseDynaWriter.get_unique_section_id() -> int\n\nSuggest a unique non-used section ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.get_unique_segmentset_id",
        "title": "BaseDynaWriter > Method detail > get_unique_segmentset_id",
        "section": "Method detail > get_unique_segmentset_id",
        "text": "BaseDynaWriter.get_unique_segmentset_id() -> int\n\nSuggest a unique non-used segment set ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.get_unique_nodeset_id",
        "title": "BaseDynaWriter > Method detail > get_unique_nodeset_id",
        "section": "Method detail > get_unique_nodeset_id",
        "text": "BaseDynaWriter.get_unique_nodeset_id() -> int\n\nSuggest a unique non-used nodeset ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.get_unique_partset_id",
        "title": "BaseDynaWriter > Method detail > get_unique_partset_id",
        "section": "Method detail > get_unique_partset_id",
        "text": "BaseDynaWriter.get_unique_partset_id() -> int\n\nSuggest a unique non-used part ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.get_unique_curve_id",
        "title": "BaseDynaWriter > Method detail > get_unique_curve_id",
        "section": "Method detail > get_unique_curve_id",
        "text": "BaseDynaWriter.get_unique_curve_id() -> int\n\nSuggest a unique curve ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.include_to_main",
        "title": "BaseDynaWriter > Method detail > include_to_main",
        "section": "Method detail > include_to_main",
        "text": "BaseDynaWriter.include_to_main(file_list: list[str] | str = []) -> None\n\nAdd *INCLUDE keywords into the main decl.\n\nParameters\n\nfile_list\n\npython:list[python:str] | python:str, default: []\n\nFiles to include.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.export",
        "title": "BaseDynaWriter > Method detail > export",
        "section": "Method detail > export",
        "text": "BaseDynaWriter.export(export_directory: str, user_k: list[str] | None = None) -> None\n\nWrite the model to files.\n\nParameters\n\nexport_directory\n\npython:str\n\nExport directory.\n\nuser_k\n\npython:list[python:str], default: python:None\n\nUser-provided K files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter",
        "href": "api/ansys/health/heart/writer/base_writer/BaseDynaWriter.html#BaseDynaWriter.export_databases",
        "title": "BaseDynaWriter > Method detail > export_databases",
        "section": "Method detail > export_databases",
        "text": "BaseDynaWriter.export_databases(export_directory: str) -> None\n\nExport each non-empty database to a specified directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks.html#fibergenerationdecks",
        "title": "FiberGenerationDecks",
        "section": "FiberGenerationDecks",
        "text": "Bases: BaseDecks\nUseful decks for fiber generation.\nFiberGenerationDecks\nFiberGenerationDecks\nBaseDecks"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks.html#ansys.health.heart.writer.heart_decks.FiberGenerationDecks",
        "title": "FiberGenerationDecks > FiberGenerationDecks > FiberGenerationDecks",
        "section": "FiberGenerationDecks > FiberGenerationDecks",
        "text": "class ansys.health.heart.writer.heart_decks.FiberGenerationDecks\n\nBases: BaseDecks\n\nUseful decks for fiber generation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks.html#overview",
        "title": "FiberGenerationDecks > Overview",
        "section": "Overview",
        "text": "ep_settings\ncreate_fiber\nOverview\nep_settings\ncreate_fiber"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks.html#import-detail",
        "title": "FiberGenerationDecks > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks.html#attribute-detail",
        "title": "FiberGenerationDecks > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks.html#FiberGenerationDecks.ep_settings",
        "title": "FiberGenerationDecks > Attribute detail > ep_settings",
        "section": "Attribute detail > ep_settings",
        "text": "FiberGenerationDecks.ep_settings: ansys.dyna.core.Deck\n\n"
    },
    {
        "objectID": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks",
        "href": "api/ansys/health/heart/writer/heart_decks/FiberGenerationDecks.html#FiberGenerationDecks.create_fiber",
        "title": "FiberGenerationDecks > Attribute detail > create_fiber",
        "section": "Attribute detail > create_fiber",
        "text": "FiberGenerationDecks.create_fiber: ansys.dyna.core.Deck\n\n"
    }
]