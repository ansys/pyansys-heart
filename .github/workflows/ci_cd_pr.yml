name: pull-request

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_PYTHON_VERSION: '3.10'
  DOCUMENTATION_CNAME: 'heart.docs.pyansys.com'
  LIBRARY_NAME: 'pyansys-heart'
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}

jobs:

  labeler:
    name: "Labels"
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

     - name: "Checkout project"
       uses: actions/checkout@v4

     - name: "Sync labels"
       uses: micnncim/action-label-syncer@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       # HACK: skip if contributor does not have write permissions (forks)
       if: github.event.pull_request.head.repo.full_name == github.repository
       uses: actions/labeler@v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  changelog-fragment:
    name: "Create changelog fragment"
    runs-on: ubuntu-latest
    needs: labeler
    permissions:
      contents: read
      pull-requests: write
    steps:

      - uses: ansys/actions/check-pr-title@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ansys/actions/doc-changelog@main
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          use-conventional-commits: true
          use-default-towncrier-config: true
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: changelog-fragment
    steps:
      - uses: ansys/actions/code-style@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    needs: changelog-fragment
    steps:
      - name: "Running documentation style checks"
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  wheelhouse:
    name: "Wheelhouse / ${{ matrix.os}} / ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    needs: doc-style
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: ansys/actions/build-wheelhouse@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          check-licenses: true

  doc-build:
    name: "Build documentation"
    runs-on: [self-hosted, pyhealth]
    needs: [doc-style]
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Download wheelhouse into static path"
        uses: actions/download-artifact@v4
        with:
          path: "doc/source/_static/wheelhouse"
          pattern: "*-wheelhouse-*"

      - name: "Install Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install Tox"
        run: |
          python -m venv .venv
          .venv\Scripts\Activate.ps1
          python -m pip install -U pip tox

      - name: "Build documentation"
        run: |
          .venv\Scripts\Activate.ps1
          python -m tox -e doc-clean,doc-links,doc-html,doc-pdf

  tests:
    name: "Tests ${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    needs: [code-style]
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    steps:

      - name: Checkout project
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set Licensing
        shell: bash
        run: |
          echo "ANSYS_DPF_ACCEPT_LA=Y" >> $GITHUB_ENV

      - name: Install DPF
        uses: ansys/pydpf-actions/install-dpf-server@v2.3
        with:
          dpf-standalone-TOKEN: ${{secrets.PYANSYS_CI_BOT_TOKEN}}
          ANSYS_VERSION : "241"

      - name: Installing dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[tests]

      - name: Run tests
        run: |
          python -m pytest -v -m "not (requires_fluent or extract_models or k_file_writer)"

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: ansys/actions/build-library@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
