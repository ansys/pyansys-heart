
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/preprocessor/doc_preprocess_truncated_LV.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_preprocessor_doc_preprocess_truncated_LV.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_preprocessor_doc_preprocess_truncated_LV.py:


Create a truncated ellipsoid model
----------------------------------
This example shows you how to build a basic ellipsoidal model
from primitive shapes. Shape based on
Land et al (2015): https://doi.org/10.1098/rspa.2015.0641

.. GENERATED FROM PYTHON SOURCE LINES 33-39

Example setup
-------------
Perform the required imports
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the required modules and set relevant paths, including that of the working
directory and generated model

.. GENERATED FROM PYTHON SOURCE LINES 39-54

.. code-block:: default

    import os

    import numpy as np
    import pyvista as pv

    from ansys.heart.core.helpers.general import clean_directory
    import ansys.heart.core.models as models

    # Use Fluent 24.1 for meshing.
    import ansys.heart.preprocessor.mesher as mesher

    mesher._fluent_version = "24.1"




.. GENERATED FROM PYTHON SOURCE LINES 58-60

Create a truncated ellipsoid using pyvista
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 60-88

.. code-block:: default

    workdir = r"simplified-geometries\truncated_lv"

    # create the surfaces of a truncated LV model
    ellips_epi: pv.PolyData = pv.ParametricEllipsoid(xradius=10, yradius=10, zradius=20)
    ellips_endo: pv.PolyData = pv.ParametricEllipsoid(xradius=7, yradius=7, zradius=17)

    # clip ellips at z=5
    z_truncate = 5  # z-coordinate to truncate at
    ellips_endo = ellips_endo.clip(normal="z", origin=[0, 0, z_truncate])
    ellips_epi = ellips_epi.clip(normal="z", origin=[0, 0, z_truncate])

    # compute x and y radius to create a closing disc.
    endo_bounds = ellips_endo.extract_feature_edges().bounds
    epi_bounds = ellips_epi.extract_feature_edges().bounds

    base: pv.PolyData = pv.Disc(
        center=(0, 0, z_truncate), inner=endo_bounds[1], outer=epi_bounds[1], c_res=200
    ).triangulate()

    # add "surface-id" to cell data
    base.cell_data["surface-id"] = 3
    ellips_endo.cell_data["surface-id"] = 1
    ellips_epi.cell_data["surface-id"] = 2

    # combine into single poly data object.
    heart: pv.PolyData = ellips_endo + ellips_epi + base
    heart.plot(show_edges=True)


.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. image:: /_static/images/truncated_LV_mesh_input.png
  :width: 400pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 94-96

Convert the input to a HeartModel
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 96-123

.. code-block:: default


    # construct part definition dictionary
    part_definitions = {
        "Left ventricle": {
            "id": 1,
            "enclosed_by_boundaries": {
                "left-ventricle-endocardium": 1,
                "left-ventricle-epicardium": 2,
                "interface_left-ventricle-myocardium_mitral-valve": 3,
            },
        }
    }

    # use the combined polydata `heart` as input, where "surface-id" identifies each
    # of the relevant regions.
    # part definitions is used to map the remeshed model to the HeartModel parts/boundaries
    path_to_model = os.path.join(workdir, "heart_model.pickle")

    # initialize left-ventricular heart model
    model = models.LeftVentricle(working_directory=workdir)

    # clean working directory
    clean_directory(workdir, [".stl", ".msh.h5", ".pickle"])

    # load input model
    model.load_input(heart, part_definitions, "surface-id")


.. GENERATED FROM PYTHON SOURCE LINES 124-131

Remesh the surfaces and volume
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note::
   The individual surfaces in the combined PolyData object are
   unconnected. Using the wrapper automatically fixes any small gaps
   and ensures proper connectivity.

.. GENERATED FROM PYTHON SOURCE LINES 131-159

.. code-block:: default


    # remesh the model using wrapping
    model.mesh_volume(use_wrapper=True, global_mesh_size=0.5)

    # assign axis of model manually.
    model.l4cv_axis = {"center": base.center, "normal": np.array([1, 0, 0])}
    model.l2cv_axis = {"center": base.center, "normal": np.array([0, 1, 0])}
    model.short_axis = {"center": base.center, "normal": np.array([0, 0, 1])}

    # update the model
    model._sync_input_parts_to_model_parts()

    model._assign_elements_to_parts()
    model._assign_surfaces_to_parts()

    model._validate_parts()
    model._validate_surfaces()

    model._assign_cavities_to_parts()
    model._update_cap_names()
    model._validate_cap_names()
    model._extract_apex()

    model.save_model(os.path.join(workdir, "heart_model.vtu"))

    # plot the clipped volume mesh.
    model.mesh.clip(crinkle=True).plot(show_edges=True)


.. GENERATED FROM PYTHON SOURCE LINES 160-163

.. image:: /_static/images/truncated_LV_mesh.png
  :width: 400pt
  :align: center


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.000 seconds)


.. _sphx_glr_download_examples_preprocessor_doc_preprocess_truncated_LV.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: doc_preprocess_truncated_LV.py <doc_preprocess_truncated_LV.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: doc_preprocess_truncated_LV.ipynb <doc_preprocess_truncated_LV.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
