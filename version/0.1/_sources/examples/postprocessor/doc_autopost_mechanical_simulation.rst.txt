
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/postprocessor/doc_autopost_mechanical_simulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_postprocessor_doc_autopost_mechanical_simulation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_postprocessor_doc_autopost_mechanical_simulation.py:


Post process mechanical simulation folder
-----------------------------------------
This example shows you how to use post process script after mechanical simulation.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Perform the required imports
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the required modules

.. GENERATED FROM PYTHON SOURCE LINES 12-25

.. code-block:: default


    import os
    import pathlib

    from ansys.heart.postprocessor.SystemModelPost import SystemModelPost
    from ansys.heart.postprocessor.aha17_strain import AhaStrainCalculator
    from ansys.heart.postprocessor.auto_process import mech_post
    from ansys.heart.postprocessor.exporter import LVContourExporter
    import ansys.heart.preprocessor.models as models
    import matplotlib.pyplot as plt
    import numpy as np
    import pyvista as pv


.. GENERATED FROM PYTHON SOURCE LINES 30-32

Set relevant paths
~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 32-44

.. code-block:: default


    path_to_model = r"D:\pyansys-heart\test_case\test_lv\model_with_fiber.pickle"

    if not os.path.isfile(path_to_model):
        raise FileExistsError(f"{path_to_model} not found")

    # load heart model.
    model: models.LeftVentricle = models.HeartModel.load_model(path_to_model)

    # set simulation path
    meca_folder = pathlib.Path(r"D:\pyansys-heart\test_case\test_lv\main-mechanics")


.. GENERATED FROM PYTHON SOURCE LINES 45-48

Create PV loop
~~~~~~~~~~~~~~
Pressure-volume loop figure is an important metric for heart function

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default

    system = SystemModelPost(meca_folder)
    fig = system.plot_pv_loop()
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. image:: /_static/images/pv.png
  :width: 300pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 56-63

.. code-block:: default


    # You can generate a series of png by setting start and end time (in second)
    for it, tt in enumerate(np.linspace(0.001, 3, 60)):
        # assume heart beat once per 1s
        fig = system.plot_pv_loop(t_start=0, t_end=tt)
        fig.savefig("pv_{0:d}.png".format(it))
        plt.close()

.. GENERATED FROM PYTHON SOURCE LINES 64-65

An animation  can be created by

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default


    # `ffmpeg -f image2 -i pv_%d.png pv_loop.mp4`


.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. video:: ../../_static/images/pvloop.mp4
  :width: 400
  :loop:
  :class: center

.. GENERATED FROM PYTHON SOURCE LINES 75-77

Export left ventricle contour
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 77-94

.. code-block:: default


    exporter = LVContourExporter(os.path.join(meca_folder, "d3plot"), model)
    # In case principle axis is not yet computed
    model.compute_left_ventricle_anatomy_axis()

    # cut from long axis 4 cavity view
    cut_long = exporter.export_contour_to_vtk("l4cv", model.l4cv_axis)
    # cut from short axis
    cut_short = exporter.export_contour_to_vtk("short", model.short_axis)

    # plot the first frame using pyvista
    plotter = pv.Plotter()
    plotter.add_mesh(exporter.lv_surfaces[0], opacity=0.6)
    plotter.add_mesh(cut_long[0], line_width=3, color="red")
    plotter.add_mesh(cut_short[0], line_width=3, color="green")
    plotter.show()


.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. image:: /_static/images/cut.png
  :width: 400pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 100-103

Myocardium wall strain
~~~~~~~~~~~~~~~~~~~~~~
Compute left ventricle strain in longitudinal, radial, circumferential directions

.. GENERATED FROM PYTHON SOURCE LINES 103-117

.. code-block:: default


    # in case they are not pre-computed
    model.compute_left_ventricle_anatomy_axis()
    model.compute_left_ventricle_aha17()

    aha_evaluator = AhaStrainCalculator(model, d3plot_file=meca_folder / "d3plot")
    # get LRC strain at a given time and export a file named LRC_10.vtk
    strain17_at10 = aha_evaluator.compute_aha_strain_once(frame=10, out_dir=".")

    # show generated vtk
    aha = pv.read(r"LRC_10.vtk")
    aha.set_active_scalars("AHA")
    aha.plot()


.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. image:: /_static/images/aha17.png
  :width: 400pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 121-132

.. code-block:: default


    # bulleye plot for strain
    fig, ax = plt.subplots(figsize=(24, 16), nrows=1, ncols=3, subplot_kw=dict(projection="polar"))
    fig.canvas.manager.set_window_title("Left Ventricle Bulls Eyes (AHA)")
    for i in range(3):
        aha_evaluator.bullseye_plot(ax[i], strain17_at10[:, i])
    ax[0].set_title("longitudinal")
    ax[1].set_title("radial")
    ax[2].set_title("circumferential")
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 133-136

.. image:: /_static/images/aha17_strain.png
  :width: 400pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 136-151

.. code-block:: default


    # get strain for all simulation frames (this will take a while)
    strain_table = aha_evaluator.compute_aha_strain(out_dir=".", with_vtk=False)

    # plot
    l_strain_base = np.mean(strain_table[:, 1:19:3], axis=1)
    l_strain_mid = np.mean(strain_table[:, 19:37:3], axis=1)
    l_strain_apical = np.mean(strain_table[:, 37::3], axis=1)

    plt.plot(strain_table[:, 0], l_strain_base, label="Longitudinal strain @Basal")
    plt.plot(strain_table[:, 0], l_strain_mid, label="Longitudinal strain @MidCavity")
    plt.plot(strain_table[:, 0], l_strain_apical, label="Longitudinal strain @Apical")
    plt.legend()
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 152-155

.. image:: /_static/images/l_strain_curve.png
  :width: 400pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 157-160

Run with default process scripts
~~~~~~~~~~~~~~~~~~~~~~~~~~~
All above steps are encapsulated in one script:

.. GENERATED FROM PYTHON SOURCE LINES 160-163

.. code-block:: default


    mech_post(meca_folder, model)


.. GENERATED FROM PYTHON SOURCE LINES 164-167

You can open Paraview and load the state file
:download:`post_main2.pvsm <../../_static/others/post_main2.pvsm>`,
and specify the folder.

.. GENERATED FROM PYTHON SOURCE LINES 169-173

.. video:: ../../_static/images/main_meca.mp4
  :width: 600
  :loop:
  :class: center


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.000 seconds)


.. _sphx_glr_download_examples_postprocessor_doc_autopost_mechanical_simulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: doc_autopost_mechanical_simulation.py <doc_autopost_mechanical_simulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: doc_autopost_mechanical_simulation.ipynb <doc_autopost_mechanical_simulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
