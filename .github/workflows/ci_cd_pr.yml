name: pull-request

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ANSYS_VERSION: '241'
  ANSYS_DPF_ACCEPT_LA: 'Y'
  MAIN_PYTHON_VERSION: '3.11'
  DOCUMENTATION_CNAME: 'heart.docs.pyansys.com'
  LIBRARY_NAME: 'ansys-heart'
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  PYFLUENT_START_INSTANCE: 0
  PYFLUENT_LAUNCH_CONTAINER: 1
  FLUENT_IMAGE_TAG: v24.2.0

jobs:

  labeler:
    name: "Labels"
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v4

     - name: "Update labels"
       uses: micnncim/action-label-syncer@v1
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     - name: "Label pull-request"
       uses: actions/labeler@v5.0.0
       with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  changelog-fragment:
    name: "Create changelog fragment"
    runs-on: ubuntu-latest
    needs: labeler
    permissions:
      contents: read
      pull-requests: write
    steps:

      - uses: ansys/actions/check-pr-title@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: ansys/actions/doc-changelog@main
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          use-conventional-commits: true
          use-default-towncrier-config: true
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    needs: changelog-fragment
    steps:
      - uses: ansys/actions/code-style@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    needs: changelog-fragment
    steps:
      - name: "Running documentation style checks"
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  wheelhouse:
    name: "Wheelhouse / ${{ matrix.os}} / ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}
    needs: doc-style
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.11', '3.12']
    steps:
      - uses: ansys/actions/build-wheelhouse@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          check-licenses: true

  doc-build:
    name: "Build documentation"
    runs-on: [self-hosted, pyhealth]
    needs: doc-style
    steps:

      - name: "Checkout the project"
        uses: actions/checkout@v4

      - name: "Install Python ${{ env.MAIN_PYTHON_VERSION }}"
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174 # v5.4.0
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install Tox"
        run: |
          uv tool install tox --with tox-uv

      - name: "Build documentation"
        run: |
          tox -e doc-links,doc-html,doc-pdf

      - name: Upload HTML documentation artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: Upload PDF documentation artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: documentation-pdf
          path: doc/_build/latex/*.pdf
          retention-days: 7

  tests:
    name: "Tests / ${{ matrix.tests.runner }} / Python ${{ matrix.python-version }} / ${{ matrix.tests.name }}"
    runs-on: ${{ matrix.tests.runner }}
    needs: code-style
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        tests:
          - { name: "Base", runner: "ubuntu-latest", markers: "not (requires_fluent or requires_dpf)", tox_extra_args: ""}
          - { name: "PyDPF", runner: "ubuntu-latest", markers: "requires_dpf", needs_dpf: true}
          - { name: "PyFluent", runner: "ubuntu-latest", markers: "requires_fluent", needs_fluent: true }
    steps:

      - name: Checkout project
        uses: actions/checkout@v4

      - name: "Set up uv"
        uses: astral-sh/setup-uv@22695119d769bdb6f7032ad67b9bca0ef8c4a174 # v5.4.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install DPF
        uses: ansys/pydpf-actions/install-dpf-server@v2.3
        if: matrix.tests.needs_dpf
        with:
          dpf-standalone-TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          ANSYS_VERSION : ${{ env.ANSYS_VERSION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: matrix.tests.needs_fluent
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Fluent docker image
        if: matrix.tests.needs_fluent
        run: |
          sudo rm -rf /usr/share/dotnet
          docker pull ghcr.io/ansys/pyfluent:${{ env.FLUENT_IMAGE_TAG }}
          docker image prune -f

      - name: Run Tox
        if: ${{ ! matrix.tests.needs_dpf }}
        env:
          PYFLUENT_UI_MODE: "hidden_gui"
        run: |
          uv tool run tox -e tests -- -m "${{ matrix.tests.markers }}" -vv

      - name: Run Tox
        if: matrix.tests.needs_dpf
        run: |
          uv tool run tox -e tests -x testenv.deps+="-e dpf-standalone/v${{ env.ANSYS_VERSION }}" -- -m "${{ matrix.tests.markers }}" -vv

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [wheelhouse, doc-build, tests]
    steps:
      - uses: ansys/actions/build-library@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
