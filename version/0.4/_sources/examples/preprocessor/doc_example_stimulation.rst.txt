
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/preprocessor/doc_example_stimulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_preprocessor_doc_example_stimulation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_preprocessor_doc_example_stimulation.py:


Stimulation definition example
---------------------------------
This example shows you how to define an EP stimulation. It demonstrates how you
can load a pre-computed heart model, define a stimulation region based on a sphere
centered on the apex, and a sphere centered on a point chosen in Universal
Ventricular Coordinates (UVC).

.. GENERATED FROM PYTHON SOURCE LINES 34-41

Example setup
-------------
Loading required modules and heart model.

Perform the required imports
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the required modules and set relevant paths.

.. GENERATED FROM PYTHON SOURCE LINES 41-70

.. code-block:: default



    import os

    import numpy as np
    import pyvista as pv

    import ansys.heart.preprocessor.models as models
    from ansys.heart.simulator.settings.settings import SimulationSettings, Stimulation
    from ansys.heart.simulator.simulator import DynaSettings, EPSimulator

    # accept dpf license aggrement
    # https://dpf.docs.pyansys.com/version/stable/getting_started/licensing.html#ref-licensing
    os.environ["ANSYS_DPF_ACCEPT_LA"] = "Y"

    workdir = os.path.join(
        "pyansys-heart", "downloads", "Strocchi2020", "01", "FourChamber", "teststim"
    )
    path_to_model = os.path.join(workdir, "heart_model.vtu")


    # load your four chamber heart model with uvcs (see preprocessor examples to create
    # a heart model from scratch)
    model: models.FourChamber = models.FourChamber(models.ModelInfo(work_directory=workdir))
    model.load_model_from_mesh(path_to_model)
    model._extract_apex()
    model.compute_left_ventricle_anatomy_axis()
    model.compute_left_ventricle_aha17()


.. GENERATED FROM PYTHON SOURCE LINES 79-82

Define stimulation at the apex
------------------------------
Select points inside sphere centered at the left apex.

.. GENERATED FROM PYTHON SOURCE LINES 82-124

.. code-block:: default

    apex_left = model.left_ventricle.apex_points[0].xyz
    sphere = pv.Sphere(center=(apex_left), radius=2)
    newdata = model.mesh.select_enclosed_points(sphere)
    node_ids = np.where(newdata.point_data["SelectedPoints"] == 1)[0]
    apex_stim_points = model.mesh.points[node_ids, :]

    pl = pv.Plotter()
    pl.add_points(apex_stim_points, color="red")
    pl.add_mesh(model.mesh, color="lightgrey", opacity=0.2)
    pl.show()

    # Define stimulation and introduce it as simulation settings
    stim_apex = Stimulation(node_ids=list(node_ids), t_start=0, period=800, duration=20, amplitude=50)
    settings = SimulationSettings()
    settings.load_defaults()
    settings.electrophysiology.stimulation = {"stim_apex": stim_apex}


    # Define auxiliary function to find a point in the model based on its UVC coordinates
    def get_point_from_uvc(
        model: models.HeartModel, apicobasal: float, transmural: float, rotational: float
    ):
        point_coords = np.array([apicobasal, transmural, rotational])
        diffs = (
            np.transpose(
                np.vstack(
                    (
                        model.mesh.point_data["apico-basal"],
                        model.mesh.point_data["transmural"],
                        model.mesh.point_data["rotational"],
                    )
                )
            )
            - point_coords
        )

        norms = np.linalg.norm(diffs, axis=1)
        norms[np.isnan(norms)] = 1000
        point_id = np.argmin(norms)
        return point_id



.. GENERATED FROM PYTHON SOURCE LINES 125-129

Define stimulation based on UVC
-------------------------------
Select points inside sphere centered at a chosen point based on UVC coordinates
(if the model has UVC).

.. GENERATED FROM PYTHON SOURCE LINES 129-169

.. code-block:: default

    if (
        ("transmural" in model.mesh.point_data.keys())
        and ("apico-basal" in model.mesh.point_data.keys())
        and ("rotational" in model.mesh.point_data.keys())
    ):
        uvc_point_id = get_point_from_uvc(model, apicobasal=0.7, transmural=0, rotational=1)
        uvc_stimpoint = model.mesh.points[uvc_point_id, :]
        sphere = pv.Sphere(center=(uvc_stimpoint), radius=2)
        newdata = model.mesh.select_enclosed_points(sphere)
        node_ids = np.where(newdata.point_data["SelectedPoints"] == 1)[0]
        uvc_stim_points = model.mesh.points[node_ids, :]

        pl = pv.Plotter()
        pl.add_points(apex_stim_points, color="red")
        pl.add_points(uvc_stim_points, color="blue")
        pl.add_mesh(model.mesh, color="lightgrey", opacity=0.2)
        pl.show()

        stim_uvc = Stimulation(
            node_ids=list(node_ids), t_start=0, period=800, duration=20, amplitude=50
        )
        settings.electrophysiology.stimulation["stim_uvc"] = stim_uvc

    # specify LS-DYNA path
    lsdyna_path = r"ls-dyna_msmpi.exe"


    # instantaiate dyna settings of choice
    dyna_settings = DynaSettings(
        lsdyna_path=lsdyna_path, dynatype="intelmpi", num_cpus=4, platform="wsl"
    )

    simulator = EPSimulator(
        model=model,
        dyna_settings=dyna_settings,
        simulation_directory=os.path.join(workdir, "simulation-EP"),
    )
    simulator.settings = settings

    simulator.simulate()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.000 seconds)


.. _sphx_glr_download_examples_preprocessor_doc_example_stimulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: doc_example_stimulation.py <doc_example_stimulation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: doc_example_stimulation.ipynb <doc_example_stimulation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
