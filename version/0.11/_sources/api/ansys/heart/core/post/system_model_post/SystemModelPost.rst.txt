





:class:`SystemModelPost`
========================

.. py:class:: ansys.heart.core.post.system_model_post.SystemModelPost(dir: str)

   
   Class for post-processing system model.













   .. rubric:: Notes

   unit: ms, kPa, mL



   ..
       !! processed by numpydoc !!


.. py:currentmodule:: SystemModelPost

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~get_ejection_fraction`
            - Compute ejection fraction at a given time interval.
          * - :py:attr:`~plot_pv_loop`
            - Plot PV loop.



   .. tab-item:: Attributes

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~dir`
            - 
          * - :py:attr:`~model_type`
            - 
          * - :py:attr:`~lv_system`
            - 






Import detail
-------------

.. code-block:: python

    from ansys.heart.core.post.system_model_post import SystemModelPost


Attribute detail
----------------

.. py:attribute:: dir

.. py:attribute:: model_type
   :value: 'LV'


.. py:attribute:: lv_system



Method detail
-------------

.. py:method:: get_ejection_fraction(t_start=0, t_end=100000000000.0)

   
   Compute ejection fraction at a given time interval.


   :Parameters:

       **t_start: start time**
           ..

       **t_end: end time**
           ..



   :Returns:

       :obj:`Ejection` :obj:`fraction`
           ..











   ..
       !! processed by numpydoc !!

.. py:method:: plot_pv_loop(t_start: float = 0, t_end: float = 100000000000.0, show_ed: bool = True, ef: list[float, float] = [None, None]) -> matplotlib.pyplot.Figure

   
   Plot PV loop.


   :Parameters:

       **t_start** : :class:`python:float`, :obj:`optional`
           Start time to plot, by default 0

       **t_end** : :class:`python:float`, :obj:`optional`
           End time to plot, by default 10e10

       **show_ed** : :ref:`bool <python:bltin-boolean-values>`, :obj:`optional`
           Whether to show the end of diastole state in zeroppressure, by default True

       **ef** : :class:`python:list`\[:class:`python:float`, :class:`python:float`], :obj:`optional`
           Show the ejection fraction in the legend, by default [None, None]



   :Returns:

       :obj:`plt.Figure`
           Figrue handle











   ..
       !! processed by numpydoc !!




