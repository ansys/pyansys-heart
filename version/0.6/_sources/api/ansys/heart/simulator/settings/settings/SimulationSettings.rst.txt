

:class:`SimulationSettings`
===========================

.. py:class:: ansys.heart.simulator.settings.settings.SimulationSettings(mechanics: bool = True, electrophysiology: bool = True, fiber: bool = True, purkinje: bool = True, stress_free: bool = True)

   
   Class for keeping track of settings.
















   ..
       !! processed by numpydoc !!



.. py:currentmodule:: SimulationSettings

Overview
--------

.. tab-set::



   .. tab-item:: Methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~save`
            - Save simulation settings to disk.
          * - :py:attr:`~load`
            - Load simulation settings.
          * - :py:attr:`~load_defaults`
            - Load the default simulation settings.
          * - :py:attr:`~to_consistent_unit_system`
            - Convert all settings to consistent unit-system ["MPa", "mm", "N", "ms", "g"].
          * - :py:attr:`~get_mechanical_material`
            - Load material data from settings.





   .. tab-item:: Special methods

      .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__repr__`
            - Represent object as list of relevant attribute names.




Import detail
-------------

.. code-block:: python

    from ansys.heart.simulator.settings.settings import SimulationSettings





Method detail
-------------
.. py:method:: __repr__()

   
   Represent object as list of relevant attribute names.
















   ..
       !! processed by numpydoc !!

.. py:method:: save(filename: pathlib.Path, remove_units: bool = False)

   
   Save simulation settings to disk.


   :Parameters:

       **filename** : :obj:`pathlib.Path`
           Path to target .json or .yml file

       **remove_units** : :ref:`bool <python:bltin-boolean-values>`, :obj:`optional`
           Flag indicating whether to remove units before writing, by default False













   .. rubric:: Examples

   Create examples settings with default values.

   >>> from ansys.heart.simulator.settings.settings import SimulationSettings
   >>> settings = SimulationSettings()
   >>> settings.load_defaults()
   >>> settings.save("my_settings.yml")

   ..
       !! processed by numpydoc !!

.. py:method:: load(filename: pathlib.Path)

   
   Load simulation settings.


   :Parameters:

       **filename** : :obj:`pathlib.Path`
           Path to yaml or json file.













   .. rubric:: Examples

   Create examples settings with default values.

   >>> from ansys.heart.simulator.settings.settings import SimulationSettings
   >>> settings = SimulationSettings()
   >>> settings.load_defaults()
   >>> settings.save("my_settings.yml")

   Load settings in second SimulationSettings object.

   >>> settings1 = SimulationSettings()
   >>> settings1.load("my_settings.yml")
   >>> assert settings.mechanics.analysis == settings1.mechanics.analysis
   True

   ..
       !! processed by numpydoc !!

.. py:method:: load_defaults()

   
   Load the default simulation settings.















   .. rubric:: Examples

   Create examples settings with default values.

   Load module
   >>> from ansys.heart.simulator.settings.settings import SimulationSettings

   Instantiate settings object.

   >>> settings = SimulationSettings()
   >>> settings.load_defaults()
   >>> settings.mechanics.analysis
   Analysis:
     end_time: 3000.0 millisecond
     dtmin: 10.0 millisecond
     dtmax: 10.0 millisecond
     dt_d3plot: 50.0 millisecond
     dt_icvout: 1.0 millisecond
     global_damping: 0.5 / millisecond

   ..
       !! processed by numpydoc !!

.. py:method:: to_consistent_unit_system()

   
   Convert all settings to consistent unit-system ["MPa", "mm", "N", "ms", "g"].















   .. rubric:: Examples

   Convert to the consistent unit system ["MPa", "mm", "N", "ms", "g"].

   Import necessary modules
   >>> from ansys.heart.simulator.settings.settings import SimulationSettings
   >>> from pint import Quantity

   Instantiate settings
   >>> settings = SimulationSettings()
   >>> settings.mechanics.analysis.end_time = Quantity(1, "s")
   >>> settings.to_consistent_unit_system()
   >>> settings.mechanics.analysis.end_time
   <Quantity(1000.0, 'millisecond')>

   ..
       !! processed by numpydoc !!

.. py:method:: get_mechanical_material() -> tuple[ansys.heart.simulator.settings.material.material.MAT295, ansys.heart.simulator.settings.material.material.NeoHookean]

   
   Load material data from settings.





   :Returns:

       :class:`python:tuple`\[:obj:`MAT295`, :obj:`NeoHookean`]
           MAT295 will be assigned for active/passive parts with fibers.
           NeoHookean will be assigned for isotropic parts.











   ..
       !! processed by numpydoc !!


