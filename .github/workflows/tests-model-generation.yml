# GitHub workflow for functional tests
# Tests consistencty of model being generated
name: Test model generation
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:

# Required env variables for pyfluent
env:
  MAIN_PYTHON_VERSION: 3.8
  ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}
  PYFLUENT_START_INSTANCE: 0
  PYFLUENT_LAUNCH_CONTAINER: 1          
  FLUENT_IMAGE_TAG: v22.2.0
  RESET_STROCCHI_CACHE: 0
  RESET_FLUENT_IMAGE_CACHE: 0 


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Tests requiring PyFluent
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      # make folder to store image cache.
      - name: Make image directory
        run: |
          mkdir -p ~/image-cache
          echo "Available disk space before:"
          df -h
          echo "*********************"          

      - name: Cache Fluent docker image
        uses: actions/cache@v3
        id: cache-fluent-image
        with:
          path: ~/image-cache
          key: image-cache-${{ runner.os }}-v${{ env.RESET_FLUENT_IMAGE_CACHE }}-${{ github.sha }}
          restore-keys: |
            image-cache-${{ runner.os }}-v${{ env.RESET_FLUENT_IMAGE_CACHE }}

      # Login to Github container registry and pull Fluent image. if image-cach doesn't exist
      - name: Login to GitHub Container Registry
        if: steps.cache-fluent-image.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.REPO_DOWNLOAD_PAT }}

      - name: Pull 22.2 Fluent docker image
        if: steps.cache-fluent-image.outputs.cache-hit != 'true'
        run: | 
          docker pull ghcr.io/ansys/pyfluent:$FLUENT_IMAGE_TAG          
          docker image prune -f
          echo "Available disk space after:"
          df -h
          echo "*********************"        
          echo "Compressing Fluent docker image..."
          docker save ghcr.io/ansys/pyfluent:$FLUENT_IMAGE_TAG | pigz --stdout --best > ~/image-cache/fluent.tar.gz
      #    docker save -o ~/image-cache/fluent.tar ghcr.io/ansys/pyfluent:$FLUENT_IMAGE_TAG

      - name: Load cached Fluent docker image
        if: steps.cache-fluent-image.outputs.cache-hit == 'true'
        run: |
          echo "Loading docker image from compressed file."
          docker load < ~/image-cache/fluent.tar.gz  
      #    load -i ~/image-cache/fluent.tar
         
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .         

      - name: Install testing dependencies
        run: |
          python -m pip install -r requirements_tests.txt

      - name: Test PyFluent launch
        continue-on-error: false
        run: |
          python -m pytest tests/heart/test_pyfluent.py

      - name: Cache large files
        id: cache-strocchi
        uses: actions/cache@v3
        with:
          # cache the case file that will be downloaded in tests/heart/assets/cases/Strocchi2020
          path: /home/runner/work/pyheart-lib/pyheart-lib/tests/heart/assets/cases/Strocchi2020
          key: cache-strocchi-${{ runner.os }}-v${{ env.RESET_STROCCHI_CACHE }}-${{ github.sha }}
          #restore-keys: |
          #    cache-strocchi-${{ runner.os }}-v${{ env.RESET_STROCCHI_CACHE }}

      # - name: Test biventricle model generation 1
      #   continue-on-error: false
      #   run: |
      #     python -m pytest tests/heart/test_biventricle_mesh_extraction.py
      #     ls -R -lh /home/runner/work/pyheart-lib/pyheart-lib/tests/heart/assets/cases/

      # - name: Test biventricle model generation 2
      #   continue-on-error: false
      #   run: |
      #     python -m pytest tests/heart/test_biventricle_mesh_extraction_with_bloodpool.py

      # - name: Test full heart model generation
      #   continue-on-error: false
      #   run: |
      #     python -m pytest tests/heart/test_fullheart_mesh_extraction.py

      - name: Cached files check
        continue-on-error: true
        run: |
          ls -R -lh /home/runner/work/pyheart-lib/pyheart-lib/tests/heart/assets/cases/Strocchi2020
          ls -R -lh ~/image-cache