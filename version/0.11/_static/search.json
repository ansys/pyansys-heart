[
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#zerodsystem",
        "title": "ZeroDSystem",
        "section": "ZeroDSystem",
        "text": "0D circulation system model (for one cavity).\nZeroDSystem\nZeroDSystem"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#ansys.heart.core.post.system_model_post.ZeroDSystem",
        "title": "ZeroDSystem > ZeroDSystem > ZeroDSystem",
        "section": "ZeroDSystem > ZeroDSystem",
        "text": "class ansys.heart.core.post.system_model_post.ZeroDSystem(csv_path: str, ed_state: list[float, float], name: str = '')\n\n0D circulation system model (for one cavity).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#overview",
        "title": "ZeroDSystem > Overview",
        "section": "Overview",
        "text": "name\ned\ntime\npressure\nflow\nvolume\nOverview\nname\ned\ntime\npressure\nflow\nvolume"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#import-detail",
        "title": "ZeroDSystem > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#attribute-detail",
        "title": "ZeroDSystem > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#ZeroDSystem.name",
        "title": "ZeroDSystem > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "ZeroDSystem.name = ''\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#ZeroDSystem.ed",
        "title": "ZeroDSystem > Attribute detail > ed",
        "section": "Attribute detail > ed",
        "text": "ZeroDSystem.ed\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#ZeroDSystem.time",
        "title": "ZeroDSystem > Attribute detail > time",
        "section": "Attribute detail > time",
        "text": "ZeroDSystem.time\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#ZeroDSystem.pressure",
        "title": "ZeroDSystem > Attribute detail > pressure",
        "section": "Attribute detail > pressure",
        "text": "ZeroDSystem.pressure\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#ZeroDSystem.flow",
        "title": "ZeroDSystem > Attribute detail > flow",
        "section": "Attribute detail > flow",
        "text": "ZeroDSystem.flow\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/ZeroDSystem",
        "href": "api/ansys/heart/core/post/system_model_post/ZeroDSystem.html#ZeroDSystem.volume",
        "title": "ZeroDSystem > Attribute detail > volume",
        "section": "Attribute detail > volume",
        "text": "ZeroDSystem.volume\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#activecurve",
        "title": "ActiveCurve",
        "section": "ActiveCurve",
        "text": "Active stress or Ca2+ curve.\nActiveCurve\nActiveCurve"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ansys.heart.core.settings.material.curve.ActiveCurve",
        "title": "ActiveCurve > ActiveCurve > ActiveCurve",
        "section": "ActiveCurve > ActiveCurve",
        "text": "class ansys.heart.core.settings.material.curve.ActiveCurve(func: tuple[numpy.ndarray, numpy.ndarray], type: Literal['stress', 'ca2'] = 'ca2', threshold: float = 5e-07, n: int = 5)\n\nActive stress or Ca2+ curve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#overview",
        "title": "ActiveCurve > Overview",
        "section": "Overview",
        "text": "plot_time_vs_ca2\nPlot Ca2+ with threshold.\nplot_time_vs_stress\nPlot stress.\ndyna_input\nReturn x,y input for k files.\ntype\nn_beat\nthreshold\ntime\nt_beat\nOverview\nplot_time_vs_ca2\nplot_time_vs_stress\ndyna_input\ntype\nn_beat\nthreshold\ntime\nt_beat"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#import-detail",
        "title": "ActiveCurve > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#property-detail",
        "title": "ActiveCurve > Property detail",
        "section": "Property detail",
        "text": "Return x,y input for k files.\nProperty detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.dyna_input",
        "title": "ActiveCurve > Property detail > dyna_input",
        "section": "Property detail > dyna_input",
        "text": "property ActiveCurve.dyna_input\n\nReturn x,y input for k files.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#attribute-detail",
        "title": "ActiveCurve > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.type",
        "title": "ActiveCurve > Attribute detail > type",
        "section": "Attribute detail > type",
        "text": "ActiveCurve.type = 'ca2'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.n_beat",
        "title": "ActiveCurve > Attribute detail > n_beat",
        "section": "Attribute detail > n_beat",
        "text": "ActiveCurve.n_beat = 5\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.threshold",
        "title": "ActiveCurve > Attribute detail > threshold",
        "section": "Attribute detail > threshold",
        "text": "ActiveCurve.threshold = 5e-07\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.time",
        "title": "ActiveCurve > Attribute detail > time",
        "section": "Attribute detail > time",
        "text": "ActiveCurve.time\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.t_beat",
        "title": "ActiveCurve > Attribute detail > t_beat",
        "section": "Attribute detail > t_beat",
        "text": "ActiveCurve.t_beat\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#method-detail",
        "title": "ActiveCurve > Method detail",
        "section": "Method detail",
        "text": "Plot Ca2+ with threshold.\nPlot stress.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.plot_time_vs_ca2",
        "title": "ActiveCurve > Method detail > plot_time_vs_ca2",
        "section": "Method detail > plot_time_vs_ca2",
        "text": "ActiveCurve.plot_time_vs_ca2()\n\nPlot Ca2+ with threshold.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/ActiveCurve",
        "href": "api/ansys/heart/core/settings/material/curve/ActiveCurve.html#ActiveCurve.plot_time_vs_stress",
        "title": "ActiveCurve > Method detail > plot_time_vs_stress",
        "section": "Method detail > plot_time_vs_stress",
        "text": "ActiveCurve.plot_time_vs_stress()\n\nPlot stress.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/preprocessor/doc_demo_material",
        "href": "examples/preprocessor/doc_demo_material.html#define-materials",
        "title": "Define materials",
        "section": "Define materials",
        "text": "This example show you how to create a mechanical material and assign it to a heart part.\nDefine materials"
    },
    {
        "objectID": "examples/preprocessor/doc_demo_material",
        "href": "examples/preprocessor/doc_demo_material.html#import-material-module",
        "title": "Define materials > Import material module",
        "section": "Import material module",
        "text": "Unit system used for heart modeling in LS-DYNA is [“MPa”, “mm”, “N”, “ms”, “g”]\nImport material module"
    },
    {
        "objectID": "examples/preprocessor/doc_demo_material",
        "href": "examples/preprocessor/doc_demo_material.html#create-a-material",
        "title": "Define materials > Create a material",
        "section": "Create a material",
        "text": "activating only the isotropic module in MAT295.\nPlease refer to LS-DYNA manual for more details of MAT_295\nWith setting eta=0 is model 3, stress curve will be the active stress for all elements.\nIf eta!=0, this is idealized active stress when fiber stretch stays to 1.\n# Finally, MAT295 can be created with the above modules\n# EP materials can be created as follows\nCa2+ curve will be ignored if the simulation is coupled with electrophysiology\nCreate a material"
    },
    {
        "objectID": "examples/preprocessor/doc_demo_material",
        "href": "examples/preprocessor/doc_demo_material.html#assign-material-to-a-part",
        "title": "Define materials > Assign material to a part",
        "section": "Assign material to a part",
        "text": "Assign the materials to the heart model\nLoad a heart model\nYou need to complete the full heart preprocessing example first.\nIf no material is set before writing k files, default material from `settings` will be set.\nCreate a new part and set material\nDownload Jupyter notebook: doc_demo_material.ipynb\nDownload Python source code: doc_demo_material.py\nDownload zipped: doc_demo_material.zip\nGallery generated by Sphinx-Gallery\nAssign material to a part\n`settings`\nDownload Jupyter notebook: doc_demo_material.ipynb\nDownload Python source code: doc_demo_material.py\nDownload zipped: doc_demo_material.zip"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "This section describes ansys-heart endpoints, their capabilities, and how\nto interact with them programmatically.\nAPI reference"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#the-downloadpy-module",
        "title": "The download.py module",
        "section": "The download.py module",
        "text": "The download.py module\ndownload.py"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#summary",
        "title": "The download.py module > Summary",
        "section": "Summary",
        "text": "download_case_from_zenodo\nDownload a case from the remote repository.\nunpack_case\nUnpack the downloaded tar file.\ndownload_all_cases\nDownload all supported cases.\nunpack_cases\nUnpack a list of tar files.\nSummary\ndownload_case_from_zenodo\nunpack_case\ndownload_all_cases\nunpack_cases"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#description",
        "title": "The download.py module > Description",
        "section": "Description",
        "text": "Module containing methods to download cases from public databases.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#module-detail",
        "title": "The download.py module > Module detail",
        "section": "Module detail",
        "text": "Download a case from the remote repository.\nname of the database. Either Strocchi2020 or Rodero2021.\ncase number to download.\npath to the folder in which to download the case.\nPath to the tar ball that contains the vtk/case files.\nDownload case 1 from the public repository (Strocchi2020) of pathological hearts.\nDownload case 1 from the public repository (Rodero2021) of ‘healthy’ hearts.\nUnpack the downloaded tar file.\nPath to tar.gz file.\nIf True, reduce the size of the unpacked files by removing the .vtk file for the\nStrocchi database.\nPath to the .case or .vtk file\nDownload all supported cases.\nBase directory where to download the cases to.\nNote that downloading all cases may - depending on bandwidth - take substantial\ntime.\nTo unpack all cases you can use the unpack_cases method:\n>>> from ansys.heart.core.utils.download import unpack_cases\n>>> unpack_cases(tar_files)\nUnpack a list of tar files.\nList of tar files to unpack.\nModule detail\npython:str\npython:int\nPath\nPath\nPath\npython:True\npython:str\npython:str\ntyping.List"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#download.download_case_from_zenodo",
        "title": "The download.py module > Module detail > download_case_from_zenodo",
        "section": "Module detail > download_case_from_zenodo",
        "text": "download.download_case_from_zenodo(database: str, case_number: int, download_folder: pathlib.Path, overwrite: bool = True, validate_hash: bool = True) -> pathlib.Path\n\nDownload a case from the remote repository.\n\nParameters\n\ndatabase\n\npython:str\n\nname of the database. Either Strocchi2020 or Rodero2021.\n\ncase_number\n\npython:int\n\ncase number to download.\n\ndownload_folder\n\nPath\n\npath to the folder in which to download the case.\n\nReturns\n\nPath\n\nPath to the tar ball that contains the vtk/case files.\n\nExamples\n\nDownload case 1 from the public repository (Strocchi2020) of pathological hearts.\n\n>>> path_to_tar_file = download_case_from_zenodo(\n    database=\"Strocchi2020\", case_number=1, download_folder=\"my/download/folder\"\n    )\n\nDownload case 1 from the public repository (Rodero2021) of ‘healthy’ hearts.\n\n>>> path_to_tar_file = download_case_from_zenodo(\n    database=\"Rodero2021\", case_number=1, download_folder=\"my/download/folder\"\n    )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#download.unpack_case",
        "title": "The download.py module > Module detail > unpack_case",
        "section": "Module detail > unpack_case",
        "text": "download.unpack_case(tar_path: pathlib.Path, reduce_size: bool = True) -> str\n\nUnpack the downloaded tar file.\n\nParameters\n\ntar_path\n\nPath\n\nPath to tar.gz file.\n\nreduce_size\n\nbool, default: python:True\n\nIf True, reduce the size of the unpacked files by removing the .vtk file for the\nStrocchi database.\n\nReturns\n\npython:str\n\nPath to the .case or .vtk file\n\nExamples\n\n>>> from ansys.heart.core.utils.download import unpack_case\n>>> path = unpack_case(\"Rodero2021\\\\01.tar.gz\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#download.download_all_cases",
        "title": "The download.py module > Module detail > download_all_cases",
        "section": "Module detail > download_all_cases",
        "text": "download.download_all_cases(download_dir: str = None)\n\nDownload all supported cases.\n\nParameters\n\ndownload_dir\n\npython:str\n\nBase directory where to download the cases to.\n\nNotes\n\nNote that downloading all cases may - depending on bandwidth - take substantial\ntime.\n\nExamples\n\n>>> from ansys.heart.core.utils.download import download_all_cases\n>>> tar_files = download_call_cases(\"my-downloads\")\n\nTo unpack all cases you can use the unpack_cases method:\n>>> from ansys.heart.core.utils.download import unpack_cases\n>>> unpack_cases(tar_files)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/download/index",
        "href": "api/ansys/heart/core/utils/download/index.html#download.unpack_cases",
        "title": "The download.py module > Module detail > unpack_cases",
        "section": "Module detail > unpack_cases",
        "text": "download.unpack_cases(list_of_tar_files: List)\n\nUnpack a list of tar files.\n\nParameters\n\nlist_of_tar_files\n\ntyping.List\n\nList of tar files to unpack.\n\nExamples\n\n>>> from ansys.heart.core.utils.download import unpack_cases\n>>> unpack_cases([\"01.tar.gz\", \"02.tar.gz\"])\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/index",
        "href": "api/ansys/heart/index.html#the-heart-package",
        "title": "The heart package",
        "section": "The heart package",
        "text": "The heart package\nheart"
    },
    {
        "objectID": "api/ansys/heart/index",
        "href": "api/ansys/heart/index.html#summary",
        "title": "The heart package > Summary",
        "section": "Summary",
        "text": "core\nInitialise core module.\n__version__\nThe version of pyansys-heart.\nSummary\ncore\n__version__"
    },
    {
        "objectID": "api/ansys/heart/index",
        "href": "api/ansys/heart/index.html#description",
        "title": "The heart package > Description",
        "section": "Description",
        "text": "PyAnsys Heart is a Python framework for heart modeling using ANSYS tools.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/index",
        "href": "api/ansys/heart/index.html#module-detail",
        "title": "The heart package > Module detail",
        "section": "Module detail",
        "text": "The version of pyansys-heart.\nModule detail"
    },
    {
        "objectID": "api/ansys/heart/index",
        "href": "api/ansys/heart/index.html#heart.__version__",
        "title": "The heart package > Module detail > __version__",
        "section": "Module detail > __version__",
        "text": "heart.__version__\n\nThe version of pyansys-heart.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#mesh",
        "title": "Mesh",
        "section": "Mesh",
        "text": "Bases: pyvista.UnstructuredGrid\nMesh class: inherits from pyvista UnstructuredGrid.\nThis class inherits from pyvista.UnstructuredGrid and adds additional\nattributes and convenience methods for enhanced functionality. E.g. we use _volume_id,\n_surface_id and _line_id cell arrays to keep track of “labeled” selections of\ncells. _volume_id is used to group 3D volume cells together.\nAny non 3D volume cell is labeled as numpy.nan. Similarly 2D and 1D cells are tracked\nthrough _surface_id and _line_id respectively.\nMesh\nMesh\npyvista.UnstructuredGrid"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#ansys.heart.core.objects.Mesh",
        "title": "Mesh > Mesh > Mesh",
        "section": "Mesh > Mesh",
        "text": "class ansys.heart.core.objects.Mesh(*args)\n\nBases: pyvista.UnstructuredGrid\n\nMesh class: inherits from pyvista UnstructuredGrid.\n\nNotes\n\nThis class inherits from pyvista.UnstructuredGrid and adds additional\nattributes and convenience methods for enhanced functionality. E.g. we use _volume_id,\n_surface_id and _line_id cell arrays to keep track of “labeled” selections of\ncells. _volume_id is used to group 3D volume cells together.\nAny non 3D volume cell is labeled as numpy.nan. Similarly 2D and 1D cells are tracked\nthrough _surface_id and _line_id respectively.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#overview",
        "title": "Mesh > Overview",
        "section": "Overview",
        "text": "save\nSave mesh.\nload_mesh\nLoad an existing mesh.\nvalidate_ids_to_name_map\nCheck whether there are any duplicate or unmapped surfaces/volumes.\nclean\nMerge duplicate points and return cleaned copy.\nadd_volume\nAdd a volume.\nadd_surface\nAdd a surface.\nadd_lines\nAdd lines.\nget_volume\nGet a volume as a UnstructuredGrids object.\nget_volume_by_name\nGet the surface associated with name.\nget_surface\nGet a surface as PolyData object.\nget_surface_by_name\nGet the surface associated with name.\nget_lines\nGet lines as a PolyData object.\nremove_surface\nRemove a surface with id.\nremove_volume\nRemove a volume with id.\nremove_lines\nRemove a set of lines with id.\ntetrahedrons\nTetrahedrons num_tetra x 4.\ntriangles\nGet all triangles of the mesh.\nlines\nGet all triangles of the mesh.\nsurface_ids\nUnique surface ids.\nsurface_names\nList of surface names.\nvolume_ids\nUnique volume ids.\nvolume_names\nList of volume names.\nline_ids\nUnique line ids.\nOverview\nsave\nload_mesh\nvalidate_ids_to_name_map\nclean\nadd_volume\nadd_surface\nadd_lines\nget_volume\nget_volume_by_name\nget_surface\nget_surface_by_name\nget_lines\nremove_surface\nremove_volume\nremove_lines\ntetrahedrons\ntriangles\nlines\nsurface_ids\nsurface_names\nvolume_ids\nvolume_names\nline_ids"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#import-detail",
        "title": "Mesh > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#property-detail",
        "title": "Mesh > Property detail",
        "section": "Property detail",
        "text": "Tetrahedrons num_tetra x 4.\nGet all triangles of the mesh.\nGet all triangles of the mesh.\nUnique surface ids.\nArray with unique surface ids\nList of surface names.\nUnique volume ids.\nArray with unique volume ids\nList of volume names.\nUnique line ids.\nArray with unique line ids\nProperty detail\nnp.ndarray\nnp.ndarray\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.tetrahedrons",
        "title": "Mesh > Property detail > tetrahedrons",
        "section": "Property detail > tetrahedrons",
        "text": "property Mesh.tetrahedrons\n\nTetrahedrons num_tetra x 4.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.triangles",
        "title": "Mesh > Property detail > triangles",
        "section": "Property detail > triangles",
        "text": "property Mesh.triangles\n\nGet all triangles of the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.lines",
        "title": "Mesh > Property detail > lines",
        "section": "Property detail > lines",
        "text": "property Mesh.lines\n\nGet all triangles of the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.surface_ids",
        "title": "Mesh > Property detail > surface_ids",
        "section": "Property detail > surface_ids",
        "text": "property Mesh.surface_ids: numpy.ndarray\n\nUnique surface ids.\n\nReturns\n\nnp.ndarray\n\nArray with unique surface ids\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.surface_names",
        "title": "Mesh > Property detail > surface_names",
        "section": "Property detail > surface_names",
        "text": "property Mesh.surface_names: List[str]\n\nList of surface names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.volume_ids",
        "title": "Mesh > Property detail > volume_ids",
        "section": "Property detail > volume_ids",
        "text": "property Mesh.volume_ids: numpy.ndarray\n\nUnique volume ids.\n\nReturns\n\nnp.ndarray\n\nArray with unique volume ids\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.volume_names",
        "title": "Mesh > Property detail > volume_names",
        "section": "Property detail > volume_names",
        "text": "property Mesh.volume_names: List[str]\n\nList of volume names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.line_ids",
        "title": "Mesh > Property detail > line_ids",
        "section": "Property detail > line_ids",
        "text": "property Mesh.line_ids: numpy.ndarray\n\nUnique line ids.\n\nReturns\n\nnp.ndarray\n\nArray with unique line ids\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#method-detail",
        "title": "Mesh > Method detail",
        "section": "Method detail",
        "text": "Save mesh.\nLoad an existing mesh.\nPath to filename.\nThis tries to read a JSON file with the volume/surface id to name map\nwith extension .namemap.json in the same directory as the file. Alternatively,\nyou can read the name map manually by calling ._load_id_to_name_map(filename)\nCheck whether there are any duplicate or unmapped surfaces/volumes.\nMerge duplicate points and return cleaned copy.\nFlag indicating whether to ignore nan values when averaging point data, by default False\nCleaned copy of self.\nAdd a volume.\nPolyData representation of the volume to add\nID of the volume to be added. This id will be tracked as “_volume-id”\nName of the added volume, by default None (not tracked)\nAdd a surface.\nPolyData representation of the surface to add\nID of the surface to be added. This id will be tracked as “_surface-id”\nName of the added surface, by default None (not tracked)\nFlag indicating whether to overwrite/append a surface with the same id, by default False\nAdd lines.\nPolyData representation of the lines to add\nID of the surface to be added. This id will be tracked as “_line-id”\nGet a volume as a UnstructuredGrids object.\nGet the surface associated with name.\nGet a surface as PolyData object.\nTries to return a SurfaceMesh object that also contains a name and id.\nand additional convenience properties.\nGet the surface associated with name.\nGet lines as a PolyData object.\nRemove a surface with id.\nId of surface to remove.\nRemove a volume with id.\nId of volume to remove.\nRemove a set of lines with id.\nId of lines to remove.\nMethod detail\nUnion\npython:str\npathlib.Path\noptional\nMesh\npv.PolyData\npython:int\npython:str\noptional\npv.PolyData\npython:int\npython:str\noptional\noptional\npv.PolyData\npython:int\npython:int\npython:int\npython:int"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.save",
        "title": "Mesh > Method detail > save",
        "section": "Method detail > save",
        "text": "Mesh.save(filename: str | pathlib.Path, **kwargs)\n\nSave mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.load_mesh",
        "title": "Mesh > Method detail > load_mesh",
        "section": "Method detail > load_mesh",
        "text": "Mesh.load_mesh(filename: str | pathlib.Path)\n\nLoad an existing mesh.\n\nParameters\n\nfilename\n\nUnion[python:str, pathlib.Path]\n\nPath to filename.\n\nNotes\n\nThis tries to read a JSON file with the volume/surface id to name map\nwith extension .namemap.json in the same directory as the file. Alternatively,\nyou can read the name map manually by calling ._load_id_to_name_map(filename)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.validate_ids_to_name_map",
        "title": "Mesh > Method detail > validate_ids_to_name_map",
        "section": "Method detail > validate_ids_to_name_map",
        "text": "Mesh.validate_ids_to_name_map()\n\nCheck whether there are any duplicate or unmapped surfaces/volumes.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.clean",
        "title": "Mesh > Method detail > clean",
        "section": "Method detail > clean",
        "text": "Mesh.clean(ignore_nans_in_point_average: bool = False, **kwargs)\n\nMerge duplicate points and return cleaned copy.\n\nParameters\n\nignore_nans_in_point_average\n\nbool, optional\n\nFlag indicating whether to ignore nan values when averaging point data, by default False\n\nReturns\n\nMesh\n\nCleaned copy of self.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.add_volume",
        "title": "Mesh > Method detail > add_volume",
        "section": "Method detail > add_volume",
        "text": "Mesh.add_volume(volume: pyvista.UnstructuredGrid, id: int = None, name: str = None)\n\nAdd a volume.\n\nParameters\n\nvolume\n\npv.PolyData\n\nPolyData representation of the volume to add\n\nid\n\npython:int\n\nID of the volume to be added. This id will be tracked as “_volume-id”\n\nname\n\npython:str, optional\n\nName of the added volume, by default None (not tracked)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.add_surface",
        "title": "Mesh > Method detail > add_surface",
        "section": "Method detail > add_surface",
        "text": "Mesh.add_surface(surface: pyvista.PolyData, id: int = None, name: str = None, overwrite_existing: bool = False)\n\nAdd a surface.\n\nParameters\n\nsurface\n\npv.PolyData\n\nPolyData representation of the surface to add\n\nsid\n\npython:int\n\nID of the surface to be added. This id will be tracked as “_surface-id”\n\nname\n\npython:str, optional\n\nName of the added surface, by default None (not tracked)\n\noverwrite_existing\n\nbool, optional\n\nFlag indicating whether to overwrite/append a surface with the same id, by default False\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.add_lines",
        "title": "Mesh > Method detail > add_lines",
        "section": "Method detail > add_lines",
        "text": "Mesh.add_lines(lines: pyvista.PolyData, id: int = None)\n\nAdd lines.\n\nParameters\n\nlines\n\npv.PolyData\n\nPolyData representation of the lines to add\n\nid\n\npython:int\n\nID of the surface to be added. This id will be tracked as “_line-id”\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.get_volume",
        "title": "Mesh > Method detail > get_volume",
        "section": "Method detail > get_volume",
        "text": "Mesh.get_volume(sid: int) -> pyvista.UnstructuredGrid\n\nGet a volume as a UnstructuredGrids object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.get_volume_by_name",
        "title": "Mesh > Method detail > get_volume_by_name",
        "section": "Method detail > get_volume_by_name",
        "text": "Mesh.get_volume_by_name(name: str) -> pyvista.UnstructuredGrid\n\nGet the surface associated with name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.get_surface",
        "title": "Mesh > Method detail > get_surface",
        "section": "Method detail > get_surface",
        "text": "Mesh.get_surface(sid: int) -> pyvista.PolyData | SurfaceMesh\n\nGet a surface as PolyData object.\n\nNotes\n\nTries to return a SurfaceMesh object that also contains a name and id.\nand additional convenience properties.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.get_surface_by_name",
        "title": "Mesh > Method detail > get_surface_by_name",
        "section": "Method detail > get_surface_by_name",
        "text": "Mesh.get_surface_by_name(name: str) -> pyvista.PolyData | SurfaceMesh\n\nGet the surface associated with name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.get_lines",
        "title": "Mesh > Method detail > get_lines",
        "section": "Method detail > get_lines",
        "text": "Mesh.get_lines(sid: int) -> pyvista.PolyData\n\nGet lines as a PolyData object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.remove_surface",
        "title": "Mesh > Method detail > remove_surface",
        "section": "Method detail > remove_surface",
        "text": "Mesh.remove_surface(sid: int)\n\nRemove a surface with id.\n\nParameters\n\nsid\n\npython:int\n\nId of surface to remove.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.remove_volume",
        "title": "Mesh > Method detail > remove_volume",
        "section": "Method detail > remove_volume",
        "text": "Mesh.remove_volume(vid: int)\n\nRemove a volume with id.\n\nParameters\n\nvid\n\npython:int\n\nId of volume to remove.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Mesh",
        "href": "api/ansys/heart/core/objects/Mesh.html#Mesh.remove_lines",
        "title": "Mesh > Method detail > remove_lines",
        "section": "Method detail > remove_lines",
        "text": "Mesh.remove_lines(lid: int)\n\nRemove a set of lines with id.\n\nParameters\n\nlid\n\npython:int\n\nId of lines to remove.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/database_utils/index",
        "href": "api/ansys/heart/core/pre/database_utils/index.html#the-database_utilspy-module",
        "title": "The database_utils.py module",
        "section": "The database_utils.py module",
        "text": "The database_utils.py module\ndatabase_utils.py"
    },
    {
        "objectID": "api/ansys/heart/core/pre/database_utils/index",
        "href": "api/ansys/heart/core/pre/database_utils/index.html#summary",
        "title": "The database_utils.py module > Summary",
        "section": "Summary",
        "text": "get_compatible_input\nExtract a preprocessor compatible input surface.\nSummary\nget_compatible_input"
    },
    {
        "objectID": "api/ansys/heart/core/pre/database_utils/index",
        "href": "api/ansys/heart/core/pre/database_utils/index.html#description",
        "title": "The database_utils.py module > Description",
        "section": "Description",
        "text": "Some helper methods to process cases from Strocchi and Rodero databases.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/pre/database_utils/index",
        "href": "api/ansys/heart/core/pre/database_utils/index.html#module-detail",
        "title": "The database_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Extract a preprocessor compatible input surface.\nPath to the input mesh (UnstructuredGrid or MultiBlock)\nType of model to extract, by default “FullHeart”\nDatabase name, by default “Rodero2021”\nPreprocessor compatible polydata object and dictionary with part definitions\nModule detail\npython:str\npython:str\noptional\npython:str\noptional\nTuple\npv.PolyData\npython:dict"
    },
    {
        "objectID": "api/ansys/heart/core/pre/database_utils/index",
        "href": "api/ansys/heart/core/pre/database_utils/index.html#database_utils.get_compatible_input",
        "title": "The database_utils.py module > Module detail > get_compatible_input",
        "section": "Module detail > get_compatible_input",
        "text": "database_utils.get_compatible_input(mesh_path: str, model_type: Literal['FullHeart', 'FourChamber', 'BiVentricle', 'LeftVentricle'] = 'FullHeart', database: str = 'Rodero2021') -> Tuple[pyvista.PolyData, dict]\n\nExtract a preprocessor compatible input surface.\n\nParameters\n\nmesh_path\n\npython:str\n\nPath to the input mesh (UnstructuredGrid or MultiBlock)\n\nmodel_type\n\npython:str, optional\n\nType of model to extract, by default “FullHeart”\n\ndatabase\n\npython:str, optional\n\nDatabase name, by default “Rodero2021”\n\nReturns\n\nTuple[pv.PolyData, python:dict]\n\nPreprocessor compatible polydata object and dictionary with part definitions\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/DatabaseNotSupportedError",
        "href": "api/ansys/heart/core/exceptions/DatabaseNotSupportedError.html#databasenotsupportederror",
        "title": "DatabaseNotSupportedError",
        "section": "DatabaseNotSupportedError",
        "text": "Bases: NotImplementedError\nException raised when the database is not supported.\nDatabaseNotSupportedError\nDatabaseNotSupportedError\nNotImplementedError"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/DatabaseNotSupportedError",
        "href": "api/ansys/heart/core/exceptions/DatabaseNotSupportedError.html#ansys.heart.core.exceptions.DatabaseNotSupportedError",
        "title": "DatabaseNotSupportedError > DatabaseNotSupportedError > DatabaseNotSupportedError",
        "section": "DatabaseNotSupportedError > DatabaseNotSupportedError",
        "text": "exception ansys.heart.core.exceptions.DatabaseNotSupportedError(db_type, message)\n\nBases: NotImplementedError\n\nException raised when the database is not supported.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/DatabaseNotSupportedError",
        "href": "api/ansys/heart/core/exceptions/DatabaseNotSupportedError.html#import-detail",
        "title": "DatabaseNotSupportedError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/ZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/ZeroPressure.html#zeropressure",
        "title": "ZeroPressure",
        "section": "ZeroPressure",
        "text": "Bases: Settings\nClass for keeping track of settings for stress-free-configuration computation.\nZeroPressure\nZeroPressure\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/ZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/ZeroPressure.html#ansys.heart.core.settings.settings.ZeroPressure",
        "title": "ZeroPressure > ZeroPressure > ZeroPressure",
        "section": "ZeroPressure > ZeroPressure",
        "text": "class ansys.heart.core.settings.settings.ZeroPressure\n\nBases: Settings\n\nClass for keeping track of settings for stress-free-configuration computation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/ZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/ZeroPressure.html#overview",
        "title": "ZeroPressure > Overview",
        "section": "Overview",
        "text": "analysis\nGeneric analysis settings.\nOverview\nanalysis"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/ZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/ZeroPressure.html#import-detail",
        "title": "ZeroPressure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/ZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/ZeroPressure.html#attribute-detail",
        "title": "ZeroPressure > Attribute detail",
        "section": "Attribute detail",
        "text": "Generic analysis settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/ZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/ZeroPressure.html#ZeroPressure.analysis",
        "title": "ZeroPressure > Attribute detail > analysis",
        "section": "Attribute detail > analysis",
        "text": "ZeroPressure.analysis: AnalysisZeroPressure\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPMechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/EPMechanicsSimulator.html#epmechanicssimulator",
        "title": "EPMechanicsSimulator",
        "section": "EPMechanicsSimulator",
        "text": "Bases: EPSimulator, MechanicsSimulator\nCoupled EP-mechanics simulator with computed Electrophysiology.\nEPMechanicsSimulator\nEPMechanicsSimulator\nEPSimulator\nMechanicsSimulator"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPMechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/EPMechanicsSimulator.html#ansys.heart.core.simulator.EPMechanicsSimulator",
        "title": "EPMechanicsSimulator > EPMechanicsSimulator > EPMechanicsSimulator",
        "section": "EPMechanicsSimulator > EPMechanicsSimulator",
        "text": "class ansys.heart.core.simulator.EPMechanicsSimulator(model: ansys.heart.core.models.HeartModel, dyna_settings: ansys.heart.core.settings.settings.DynaSettings, simulation_directory: pathlib = '')\n\nBases: EPSimulator, MechanicsSimulator\n\nCoupled EP-mechanics simulator with computed Electrophysiology.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPMechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/EPMechanicsSimulator.html#overview",
        "title": "EPMechanicsSimulator > Overview",
        "section": "Overview",
        "text": "simulate\nLaunch the main electro-mechanical simulation.\nOverview\nsimulate"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPMechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/EPMechanicsSimulator.html#import-detail",
        "title": "EPMechanicsSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPMechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/EPMechanicsSimulator.html#method-detail",
        "title": "EPMechanicsSimulator > Method detail",
        "section": "Method detail",
        "text": "Launch the main electro-mechanical simulation.\nsimulation folder name, by default “main-mechanics”\nfolder contains stress free simulation.\nUse “zeropressure” under roo_directory if None\nif run post-process scripts, by default True\nuser defined k files, by default []\nMethod detail\npython:str\noptional\npython:str\npython:None\noptional\noptional\npython:list\npython:str\noptional"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPMechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/EPMechanicsSimulator.html#EPMechanicsSimulator.simulate",
        "title": "EPMechanicsSimulator > Method detail > simulate",
        "section": "Method detail > simulate",
        "text": "EPMechanicsSimulator.simulate(folder_name: str = 'ep_meca', zerop_folder: str | None = None, auto_post: bool = True, extra_k_files: list[str] = [])\n\nLaunch the main electro-mechanical simulation.\n\nParameters\n\nfolder_name\n\npython:str, optional\n\nsimulation folder name, by default “main-mechanics”\n\nzerop_folder\n\npython:str | python:None, optional\n\nfolder contains stress free simulation.\nUse “zeropressure” under roo_directory if None\n\nauto_post\n\nbool, optional\n\nif run post-process scripts, by default True\n\nextra_k_files\n\npython:list[python:str], optional\n\nuser defined k files, by default []\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#full-heart-mechanics",
        "title": "Full-heart mechanics",
        "section": "Full-heart mechanics",
        "text": "This example shows you how to consume a preprocessed full heart model and\nset it up for the main mechanical simulation. This examples demonstrates how\nyou can load a pre-computed heart model, compute the fiber direction, compute the\nstress free configuration, and finally simulate the mechanical model.\nFull-heart mechanics"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#example-setup",
        "title": "Full-heart mechanics > Example setup",
        "section": "Example setup",
        "text": "before computing the fiber orientation, and stress free configuration we\nneed to load the required modules, load a heart model and configure the\nmechanical simulator.\nExample setup"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#perform-the-required-imports",
        "title": "Full-heart mechanics > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, model, and ls-dyna executable.\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#instantiate-the-simulator-object",
        "title": "Full-heart mechanics > Instantiate the simulator object",
        "section": "Instantiate the simulator object",
        "text": "instantiate your DynaSettings and Simulator objects.\nChange options where necessary. Note that you may need to configure your environment\nvariables if you choose to use a mpi version of LS-DYNA.\nInstantiate the simulator object"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#load-simulation-settings",
        "title": "Full-heart mechanics > Load simulation settings",
        "section": "Load simulation settings",
        "text": "Here we load the default settings.\nLoad simulation settings"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#compute-the-fiber-orientation",
        "title": "Full-heart mechanics > Compute the fiber orientation",
        "section": "Compute the fiber orientation",
        "text": "Compute fiber orientation and plot the computed fibers on the entire model.\nCompute the fiber orientation"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#compute-the-stress-free-configuration",
        "title": "Full-heart mechanics > Compute the stress free configuration",
        "section": "Compute the stress free configuration",
        "text": "Compute the stress free configuration. That is, when imaged under diastole\nwe need to approximate the initial stress at t=0. The stress free configuration\nis computed through Rausch’ method.\nCompute the stress free configuration"
    },
    {
        "objectID": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01",
        "href": "examples/simulator/doc_mechanics_simulator_fullheart_rodero_01.html#start-main-simulation",
        "title": "Full-heart mechanics > Start main simulation",
        "section": "Start main simulation",
        "text": "Start the main mechanical simulation. This uses the previously computed fiber orientation\nand stress free configuration and runs the final LS-DYNA heart model.\nDownload Jupyter notebook: doc_mechanics_simulator_fullheart_rodero_01.ipynb\nDownload Python source code: doc_mechanics_simulator_fullheart_rodero_01.py\nDownload zipped: doc_mechanics_simulator_fullheart_rodero_01.zip\nGallery generated by Sphinx-Gallery\nStart main simulation\nDownload Jupyter notebook: doc_mechanics_simulator_fullheart_rodero_01.ipynb\nDownload Python source code: doc_mechanics_simulator_fullheart_rodero_01.py\nDownload zipped: doc_mechanics_simulator_fullheart_rodero_01.zip"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#captype",
        "title": "CapType",
        "section": "CapType",
        "text": "Bases: enum.Enum\nEnumeration tracking cap names.\nCapType\nCapType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#ansys.heart.core.objects.CapType",
        "title": "CapType > CapType > CapType",
        "section": "CapType > CapType",
        "text": "class ansys.heart.core.objects.CapType(*args, **kwds)\n\nBases: enum.Enum\n\nEnumeration tracking cap names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#overview",
        "title": "CapType > Overview",
        "section": "Overview",
        "text": "MITRAL_VALVE\nCap representing mitral valve region.\nAORTIC_VALVE\nCap representing aortic valve region.\nMITRAL_VALVE_ATRIUM\nCap representing mitral valve region on the atrial side.\nCOMBINED_MITRAL_AORTIC_VALVE\nCombined mitral aortic valve. Valid for truncated models.\nPULMONARY_VALVE\nCap representing pulmonary valve region.\nTRICUSPID_VALVE\nCap representing tricuspid valve region.\nTRICUSPID_VALVE_ATRIUM\nCap representing tricuspid valve region on the atrial side.\nLEFT_ATRIUM_APPENDAGE\nCap representing left atrium appendage region.\nLEFT_SUPERIOR_PULMONARY_VEIN\nCap representing left superior pulmonary vein region.\nLEFT_INFERIOR_PULMONARY_VEIN\nCap representing left inferior pulmonary vein region.\nRIGHT_INFERIOR_PULMONARY_VEIN\nCap representing right inferior pulmonary vein region.\nRIGHT_SUPERIOR_PULMONARY_VEIN\nCap representing right superior pulmonary vein region.\nSUPERIOR_VENA_CAVA\nCap representing superior vena cava region.\nINFERIOR_VENA_CAVA\nCap representing inferior vena cava region.\nUNKNOWN\nCap with unknown association.\nOverview\nMITRAL_VALVE\nAORTIC_VALVE\nMITRAL_VALVE_ATRIUM\nCOMBINED_MITRAL_AORTIC_VALVE\nPULMONARY_VALVE\nTRICUSPID_VALVE\nTRICUSPID_VALVE_ATRIUM\nLEFT_ATRIUM_APPENDAGE\nLEFT_SUPERIOR_PULMONARY_VEIN\nLEFT_INFERIOR_PULMONARY_VEIN\nRIGHT_INFERIOR_PULMONARY_VEIN\nRIGHT_SUPERIOR_PULMONARY_VEIN\nSUPERIOR_VENA_CAVA\nINFERIOR_VENA_CAVA\nUNKNOWN"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#import-detail",
        "title": "CapType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#attribute-detail",
        "title": "CapType > Attribute detail",
        "section": "Attribute detail",
        "text": "Cap representing mitral valve region.\nCap representing aortic valve region.\nCap representing mitral valve region on the atrial side.\nCombined mitral aortic valve. Valid for truncated models.\nCap representing pulmonary valve region.\nCap representing tricuspid valve region.\nCap representing tricuspid valve region on the atrial side.\nCap representing left atrium appendage region.\nCap representing left superior pulmonary vein region.\nCap representing left inferior pulmonary vein region.\nCap representing right inferior pulmonary vein region.\nCap representing right superior pulmonary vein region.\nCap representing superior vena cava region.\nCap representing inferior vena cava region.\nCap with unknown association.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.MITRAL_VALVE",
        "title": "CapType > Attribute detail > MITRAL_VALVE",
        "section": "Attribute detail > MITRAL_VALVE",
        "text": "CapType.MITRAL_VALVE = 'mitral-valve'\n\nCap representing mitral valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.AORTIC_VALVE",
        "title": "CapType > Attribute detail > AORTIC_VALVE",
        "section": "Attribute detail > AORTIC_VALVE",
        "text": "CapType.AORTIC_VALVE = 'aortic-valve'\n\nCap representing aortic valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.MITRAL_VALVE_ATRIUM",
        "title": "CapType > Attribute detail > MITRAL_VALVE_ATRIUM",
        "section": "Attribute detail > MITRAL_VALVE_ATRIUM",
        "text": "CapType.MITRAL_VALVE_ATRIUM = 'mitral-valve-atrium'\n\nCap representing mitral valve region on the atrial side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.COMBINED_MITRAL_AORTIC_VALVE",
        "title": "CapType > Attribute detail > COMBINED_MITRAL_AORTIC_VALVE",
        "section": "Attribute detail > COMBINED_MITRAL_AORTIC_VALVE",
        "text": "CapType.COMBINED_MITRAL_AORTIC_VALVE = 'combined-mitral-aortic-valve'\n\nCombined mitral aortic valve. Valid for truncated models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.PULMONARY_VALVE",
        "title": "CapType > Attribute detail > PULMONARY_VALVE",
        "section": "Attribute detail > PULMONARY_VALVE",
        "text": "CapType.PULMONARY_VALVE = 'pulmonary-valve'\n\nCap representing pulmonary valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.TRICUSPID_VALVE",
        "title": "CapType > Attribute detail > TRICUSPID_VALVE",
        "section": "Attribute detail > TRICUSPID_VALVE",
        "text": "CapType.TRICUSPID_VALVE = 'tricuspid-valve'\n\nCap representing tricuspid valve region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.TRICUSPID_VALVE_ATRIUM",
        "title": "CapType > Attribute detail > TRICUSPID_VALVE_ATRIUM",
        "section": "Attribute detail > TRICUSPID_VALVE_ATRIUM",
        "text": "CapType.TRICUSPID_VALVE_ATRIUM = 'tricuspid-valve-atrium'\n\nCap representing tricuspid valve region on the atrial side.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.LEFT_ATRIUM_APPENDAGE",
        "title": "CapType > Attribute detail > LEFT_ATRIUM_APPENDAGE",
        "section": "Attribute detail > LEFT_ATRIUM_APPENDAGE",
        "text": "CapType.LEFT_ATRIUM_APPENDAGE = 'left-atrium-appendage'\n\nCap representing left atrium appendage region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.LEFT_SUPERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > LEFT_SUPERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > LEFT_SUPERIOR_PULMONARY_VEIN",
        "text": "CapType.LEFT_SUPERIOR_PULMONARY_VEIN = 'left-superior-pulmonary-vein'\n\nCap representing left superior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.LEFT_INFERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > LEFT_INFERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > LEFT_INFERIOR_PULMONARY_VEIN",
        "text": "CapType.LEFT_INFERIOR_PULMONARY_VEIN = 'left-inferior-pulmonary-vein'\n\nCap representing left inferior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.RIGHT_INFERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > RIGHT_INFERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > RIGHT_INFERIOR_PULMONARY_VEIN",
        "text": "CapType.RIGHT_INFERIOR_PULMONARY_VEIN = 'right-inferior-pulmonary-vein'\n\nCap representing right inferior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.RIGHT_SUPERIOR_PULMONARY_VEIN",
        "title": "CapType > Attribute detail > RIGHT_SUPERIOR_PULMONARY_VEIN",
        "section": "Attribute detail > RIGHT_SUPERIOR_PULMONARY_VEIN",
        "text": "CapType.RIGHT_SUPERIOR_PULMONARY_VEIN = 'right-superior-pulmonary-vein'\n\nCap representing right superior pulmonary vein region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.SUPERIOR_VENA_CAVA",
        "title": "CapType > Attribute detail > SUPERIOR_VENA_CAVA",
        "section": "Attribute detail > SUPERIOR_VENA_CAVA",
        "text": "CapType.SUPERIOR_VENA_CAVA = 'superior-vena-cava'\n\nCap representing superior vena cava region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.INFERIOR_VENA_CAVA",
        "title": "CapType > Attribute detail > INFERIOR_VENA_CAVA",
        "section": "Attribute detail > INFERIOR_VENA_CAVA",
        "text": "CapType.INFERIOR_VENA_CAVA = 'inferior-vena-cava'\n\nCap representing inferior vena cava region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/CapType",
        "href": "api/ansys/heart/core/objects/CapType.html#CapType.UNKNOWN",
        "title": "CapType > Attribute detail > UNKNOWN",
        "section": "Attribute detail > UNKNOWN",
        "text": "CapType.UNKNOWN = 'unknown-cap'\n\nCap with unknown association.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#systemmodelpost",
        "title": "SystemModelPost",
        "section": "SystemModelPost",
        "text": "Class for post-processing system model.\nunit: ms, kPa, mL\nSystemModelPost\nSystemModelPost"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#ansys.heart.core.post.system_model_post.SystemModelPost",
        "title": "SystemModelPost > SystemModelPost > SystemModelPost",
        "section": "SystemModelPost > SystemModelPost",
        "text": "class ansys.heart.core.post.system_model_post.SystemModelPost(dir: str)\n\nClass for post-processing system model.\n\nNotes\n\nunit: ms, kPa, mL\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#overview",
        "title": "SystemModelPost > Overview",
        "section": "Overview",
        "text": "get_ejection_fraction\nCompute ejection fraction at a given time interval.\nplot_pv_loop\nPlot PV loop.\ndir\nmodel_type\nlv_system\nOverview\nget_ejection_fraction\nplot_pv_loop\ndir\nmodel_type\nlv_system"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#import-detail",
        "title": "SystemModelPost > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#attribute-detail",
        "title": "SystemModelPost > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#SystemModelPost.dir",
        "title": "SystemModelPost > Attribute detail > dir",
        "section": "Attribute detail > dir",
        "text": "SystemModelPost.dir\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#SystemModelPost.model_type",
        "title": "SystemModelPost > Attribute detail > model_type",
        "section": "Attribute detail > model_type",
        "text": "SystemModelPost.model_type = 'LV'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#SystemModelPost.lv_system",
        "title": "SystemModelPost > Attribute detail > lv_system",
        "section": "Attribute detail > lv_system",
        "text": "SystemModelPost.lv_system\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#method-detail",
        "title": "SystemModelPost > Method detail",
        "section": "Method detail",
        "text": "Compute ejection fraction at a given time interval.\nPlot PV loop.\nStart time to plot, by default 0\nEnd time to plot, by default 10e10\nWhether to show the end of diastole state in zeroppressure, by default True\nShow the ejection fraction in the legend, by default [None, None]\nFigrue handle\nMethod detail\nEjection\nfraction\npython:float\noptional\npython:float\noptional\noptional\npython:list\npython:float\npython:float\noptional\nplt.Figure"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#SystemModelPost.get_ejection_fraction",
        "title": "SystemModelPost > Method detail > get_ejection_fraction",
        "section": "Method detail > get_ejection_fraction",
        "text": "SystemModelPost.get_ejection_fraction(t_start=0, t_end=100000000000.0)\n\nCompute ejection fraction at a given time interval.\n\nParameters\n\nt_start: start time\n\n\n\nt_end: end time\n\n\n\nReturns\n\nEjection fraction\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemModelPost",
        "href": "api/ansys/heart/core/post/system_model_post/SystemModelPost.html#SystemModelPost.plot_pv_loop",
        "title": "SystemModelPost > Method detail > plot_pv_loop",
        "section": "Method detail > plot_pv_loop",
        "text": "SystemModelPost.plot_pv_loop(t_start: float = 0, t_end: float = 100000000000.0, show_ed: bool = True, ef: list[float, float] = [None, None]) -> matplotlib.pyplot.Figure\n\nPlot PV loop.\n\nParameters\n\nt_start\n\npython:float, optional\n\nStart time to plot, by default 0\n\nt_end\n\npython:float, optional\n\nEnd time to plot, by default 10e10\n\nshow_ed\n\nbool, optional\n\nWhether to show the end of diastole state in zeroppressure, by default True\n\nef\n\npython:list[python:float, python:float], optional\n\nShow the ejection fraction in the legend, by default [None, None]\n\nReturns\n\nplt.Figure\n\nFigrue handle\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/postprocessor/doc_postproc_ep_simulation",
        "href": "examples/postprocessor/doc_postproc_ep_simulation.html#post-process-ep-simulation",
        "title": "Post process EP simulation",
        "section": "Post process EP simulation",
        "text": "This example shows you how to post process an EP simulation.\nPost process EP simulation"
    },
    {
        "objectID": "examples/postprocessor/doc_postproc_ep_simulation",
        "href": "examples/postprocessor/doc_postproc_ep_simulation.html#perform-the-required-imports",
        "title": "Post process EP simulation > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules\nPerform the required imports"
    },
    {
        "objectID": "examples/postprocessor/doc_postproc_ep_simulation",
        "href": "examples/postprocessor/doc_postproc_ep_simulation.html#instantiate-the-postprocessor",
        "title": "Post process EP simulation > Instantiate the Postprocessor",
        "section": "Instantiate the Postprocessor",
        "text": "instantiate Postprocessor\nInstantiate the Postprocessor"
    },
    {
        "objectID": "examples/postprocessor/doc_postproc_ep_simulation",
        "href": "examples/postprocessor/doc_postproc_ep_simulation.html#12-lead-ecgs",
        "title": "Post process EP simulation > 12-LEAD ECGs",
        "section": "12-LEAD ECGs",
        "text": "Plot 12-Lead ECGs\n12-LEAD ECGs"
    },
    {
        "objectID": "examples/postprocessor/doc_postproc_ep_simulation",
        "href": "examples/postprocessor/doc_postproc_ep_simulation.html#activation-times",
        "title": "Post process EP simulation > Activation times",
        "section": "Activation times",
        "text": "Get activation times and plot the field\nActivation times"
    },
    {
        "objectID": "examples/postprocessor/doc_postproc_ep_simulation",
        "href": "examples/postprocessor/doc_postproc_ep_simulation.html#transmembrane-potentials",
        "title": "Post process EP simulation > Transmembrane potentials",
        "section": "Transmembrane potentials",
        "text": "Get transmembrane potentials on list of nodes and plot\nDownload Jupyter notebook: doc_postproc_ep_simulation.ipynb\nDownload Python source code: doc_postproc_ep_simulation.py\nDownload zipped: doc_postproc_ep_simulation.zip\nGallery generated by Sphinx-Gallery\nTransmembrane potentials\nDownload Jupyter notebook: doc_postproc_ep_simulation.ipynb\nDownload Python source code: doc_postproc_ep_simulation.py\nDownload zipped: doc_postproc_ep_simulation.zip"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#full-heart-ep-mechanics",
        "title": "Full heart EP-mechanics",
        "section": "Full heart EP-mechanics",
        "text": "This example shows you how to consume a full heart model and\nset it up for a coupled electromechanical simulation.\nFull heart EP-mechanics"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#example-setup",
        "title": "Full heart EP-mechanics > Example setup",
        "section": "Example setup",
        "text": "before computing the fiber orientation, purkinje network we need to load\nthe required modules, load a heart model and set up the simulator.\nExample setup"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#perform-the-required-imports",
        "title": "Full heart EP-mechanics > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, model, and ls-dyna executable.\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#example-setup",
        "title": "Full heart EP-mechanics > Example setup",
        "section": "Example setup",
        "text": "Example setup"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#perform-the-required-imports",
        "title": "Full heart EP-mechanics > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory and generated model\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#load-the-full-heart-model",
        "title": "Full heart EP-mechanics > Load the full heart model",
        "section": "Load the full heart model",
        "text": "Load the full heart model"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#instantiate-the-simulator-object",
        "title": "Full heart EP-mechanics > Instantiate the simulator object",
        "section": "Instantiate the simulator object",
        "text": "instantiate the simulator and settings appropriately.\nInstantiate the simulator object"
    },
    {
        "objectID": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero",
        "href": "examples/simulator/doc_EP-mechanics_simulator_fullheart_rodero.html#start-main-simulation",
        "title": "Full heart EP-mechanics > Start main simulation",
        "section": "Start main simulation",
        "text": "A constant pressure is prescribed to the atria.\nNo circulation system is coupled with the atria.\nResult in LS-PrePost\nDownload Jupyter notebook: doc_EP-mechanics_simulator_fullheart_rodero.ipynb\nDownload Python source code: doc_EP-mechanics_simulator_fullheart_rodero.py\nDownload zipped: doc_EP-mechanics_simulator_fullheart_rodero.zip\nGallery generated by Sphinx-Gallery\nStart main simulation\nDownload Jupyter notebook: doc_EP-mechanics_simulator_fullheart_rodero.ipynb\nDownload Python source code: doc_EP-mechanics_simulator_fullheart_rodero.py\nDownload zipped: doc_EP-mechanics_simulator_fullheart_rodero.zip"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/InvalidInputModelTypeError",
        "href": "api/ansys/heart/core/exceptions/InvalidInputModelTypeError.html#invalidinputmodeltypeerror",
        "title": "InvalidInputModelTypeError",
        "section": "InvalidInputModelTypeError",
        "text": "Bases: TypeError\nException raised when the input heart model type is invalid.\nInvalidInputModelTypeError\nInvalidInputModelTypeError\nTypeError"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/InvalidInputModelTypeError",
        "href": "api/ansys/heart/core/exceptions/InvalidInputModelTypeError.html#ansys.heart.core.exceptions.InvalidInputModelTypeError",
        "title": "InvalidInputModelTypeError > InvalidInputModelTypeError > InvalidInputModelTypeError",
        "section": "InvalidInputModelTypeError > InvalidInputModelTypeError",
        "text": "exception ansys.heart.core.exceptions.InvalidInputModelTypeError(message: str)\n\nBases: TypeError\n\nException raised when the input heart model type is invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/InvalidInputModelTypeError",
        "href": "api/ansys/heart/core/exceptions/InvalidInputModelTypeError.html#import-detail",
        "title": "InvalidInputModelTypeError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/pre/mesher/index",
        "href": "api/ansys/heart/core/pre/mesher/index.html#the-mesherpy-module",
        "title": "The mesher.py module",
        "section": "The mesher.py module",
        "text": "The mesher.py module\nmesher.py"
    },
    {
        "objectID": "api/ansys/heart/core/pre/mesher/index",
        "href": "api/ansys/heart/core/pre/mesher/index.html#summary",
        "title": "The mesher.py module > Summary",
        "section": "Summary",
        "text": "mesh_from_manifold_input_model\nCreate mesh from good-quality manifold input model.\nmesh_from_non_manifold_input_model\nGenerate mesh from a non-manifold poor quality input model.\nSummary\nmesh_from_manifold_input_model\nmesh_from_non_manifold_input_model"
    },
    {
        "objectID": "api/ansys/heart/core/pre/mesher/index",
        "href": "api/ansys/heart/core/pre/mesher/index.html#description",
        "title": "The mesher.py module > Description",
        "section": "Description",
        "text": "Module contains methods for interaction with Fluent meshing.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/pre/mesher/index",
        "href": "api/ansys/heart/core/pre/mesher/index.html#module-detail",
        "title": "The mesher.py module > Module detail",
        "section": "Module detail",
        "text": "Create mesh from good-quality manifold input model.\nInput model.\nWorking directory.\nPath to the resulting Fluent mesh file.\nUniform mesh size to use for both wrapping and filling the volume, by default 2.0\nThe VTK mesh with both cell and face zones.\nGenerate mesh from a non-manifold poor quality input model.\nInput model.\nWorking directory.\nPath to the resulting Fluent mesh file.\nUniform mesh size to use for all volumes and surfaces, by default 2.0\nGlobal size used by the wrapper to reconstruct the geometry, by default 1.5\nFlag indicating whether to overwrite an existing mesh, by default True\nDictionary specifying the mesh size that should be used for each part, by default None\nDictionary specifying the mesh size that should be used to wrap each part, by default None\nThe VTK mesh with both cell and face zones.\nUses Fluent wrapping technology to wrap the individual parts first to create manifold\nparts. Consequently wrap the entire model and use the manifold parts to split the\nwrapped model into the different cell zones.\nWhen specifying a mesh size per part, you can do that by either specifying that for all\nparts, or for specific parts. The default mesh size will be used for any part not listed\nin the dictionary. This also applies to the wrapping step. The user can control the wrap size\nper part, or on a global level. By default a size of 1.5 mm is used: but is not guaranteed to\ngive good results.\nNote that a post-wrap remesh is triggered if the wrap size is not equal to the target mesh size.\nRemeshing may fail if the target mesh size deviates too much from the wrap size.\nModule detail\n_InputModel\nUnion\npython:str\nPath\nUnion\npython:str\nPath\npython:float\noptional\nMesh\n_InputModel\nUnion\npython:str\nPath\nUnion\npython:str\nPath\npython:float\noptional\npython:float\noptional\noptional\npython:dict\noptional\npython:dict\noptional\nMesh"
    },
    {
        "objectID": "api/ansys/heart/core/pre/mesher/index",
        "href": "api/ansys/heart/core/pre/mesher/index.html#mesher.mesh_from_manifold_input_model",
        "title": "The mesher.py module > Module detail > mesh_from_manifold_input_model",
        "section": "Module detail > mesh_from_manifold_input_model",
        "text": "mesher.mesh_from_manifold_input_model(model: ansys.heart.core.pre.input._InputModel, workdir: str | pathlib.Path, path_to_output: str | pathlib.Path, mesh_size: float = 2.0, overwrite_existing_mesh: bool = True) -> ansys.heart.core.objects.Mesh\n\nCreate mesh from good-quality manifold input model.\n\nParameters\n\nmodel\n\n_InputModel\n\nInput model.\n\nworkdir\n\nUnion[python:str, Path]\n\nWorking directory.\n\npath_to_output\n\nUnion[python:str, Path]\n\nPath to the resulting Fluent mesh file.\n\nmesh_size\n\npython:float, optional\n\nUniform mesh size to use for both wrapping and filling the volume, by default 2.0\n\nReturns\n\nMesh\n\nThe VTK mesh with both cell and face zones.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/mesher/index",
        "href": "api/ansys/heart/core/pre/mesher/index.html#mesher.mesh_from_non_manifold_input_model",
        "title": "The mesher.py module > Module detail > mesh_from_non_manifold_input_model",
        "section": "Module detail > mesh_from_non_manifold_input_model",
        "text": "mesher.mesh_from_non_manifold_input_model(model: ansys.heart.core.pre.input._InputModel, workdir: str | pathlib.Path, path_to_output: str | pathlib.Path, global_mesh_size: float = 2.0, _global_wrap_size: float = 1.5, overwrite_existing_mesh: bool = True, mesh_size_per_part: dict = None, _wrap_size_per_part: dict = None) -> ansys.heart.core.objects.Mesh\n\nGenerate mesh from a non-manifold poor quality input model.\n\nParameters\n\nmodel\n\n_InputModel\n\nInput model.\n\nworkdir\n\nUnion[python:str, Path]\n\nWorking directory.\n\npath_to_output\n\nUnion[python:str, Path]\n\nPath to the resulting Fluent mesh file.\n\nglobal_mesh_size\n\npython:float, optional\n\nUniform mesh size to use for all volumes and surfaces, by default 2.0\n\n_global_wrap_size\n\npython:float, optional\n\nGlobal size used by the wrapper to reconstruct the geometry, by default 1.5\n\noverwrite_existing_mesh\n\nbool, optional\n\nFlag indicating whether to overwrite an existing mesh, by default True\n\nmesh_size_per_part\n\npython:dict, optional\n\nDictionary specifying the mesh size that should be used for each part, by default None\n\n_wrap_size_per_part\n\npython:dict, optional\n\nDictionary specifying the mesh size that should be used to wrap each part, by default None\n\nReturns\n\nMesh\n\nThe VTK mesh with both cell and face zones.\n\nNotes\n\nUses Fluent wrapping technology to wrap the individual parts first to create manifold\nparts. Consequently wrap the entire model and use the manifold parts to split the\nwrapped model into the different cell zones.\n\nWhen specifying a mesh size per part, you can do that by either specifying that for all\nparts, or for specific parts. The default mesh size will be used for any part not listed\nin the dictionary. This also applies to the wrapping step. The user can control the wrap size\nper part, or on a global level. By default a size of 1.5 mm is used: but is not guaranteed to\ngive good results.\n\nNote that a post-wrap remesh is triggered if the wrap size is not equal to the target mesh size.\nRemeshing may fail if the target mesh size deviates too much from the wrap size.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#prerequisites",
        "title": "Getting started > Prerequisites",
        "section": "Prerequisites",
        "text": "Prerequisites"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#operating-system",
        "title": "Getting started > Prerequisites > Operating system",
        "section": "Operating system",
        "text": "Windows 10\nLinux Ubuntu\nOperating system"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#ansys-tools",
        "title": "Getting started > Prerequisites > Ansys tools",
        "section": "Ansys tools",
        "text": "This framework was developed and tested under Python310, Python311 and Python312 versions.\nBefore starting the\ninstallation run python --version and check that it fits with the supported versions.\nAnsys tools\npython --version"
    },
    {
        "objectID": "getting-started/prerequisites",
        "href": "getting-started/prerequisites.html#software",
        "title": "Getting started > Prerequisites > Software",
        "section": "Software",
        "text": "Product\nSupported versions\nScope\nLink to download\nAnsys Fluent\nR24R1, R24R2, R25R1\nPre-processor\nAnsys Customer Portal\nAnsys DPF Server\n2024.1 (R24R1 install), 2024.1rc1, 2024.2rc0\nPost-processor\nAnsys Customer Portal\nAnsys LS-DYNA\nR16.0\nSimulator\nContact PyAnsys Core team to get more information\nFluent is required for meshing. Also note that currently the postprocessor module is only compatible with Ansys DPF Servers 2024.1 (comes with R24R1 installation), 2024.1rc1 and 2024.2rc0. Later versions are currently not supported. Hence installing Ansys Fluent R24R1 is currently the most convenient.\nSoftware\nRequired Ansys products"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#the-laplace_postpy-module",
        "title": "The laplace_post.py module",
        "section": "The laplace_post.py module",
        "text": "The laplace_post.py module\nlaplace_post.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#summary",
        "title": "The laplace_post.py module > Summary",
        "section": "Summary",
        "text": "read_laplace_solution\nRead laplace fields from d3plot files.\nupdate_transmural_by_normal\nUse surface normal for transmural direction.\northogonalization\nOrthogonalization.\ncompute_la_fiber_cs\nCompute left atrium fibers coordinate system.\ncompute_ra_fiber_cs\nCompute right atrium fibers coordinate system.\nset_rotation_bounds\nDefine rotation bounds from input parameters.\ncompute_rotation_angle\nRotate by alpha and beta angles.\ncompute_ventricle_fiber_by_drbm\nD-RBM method described in https://doi.org/10.1016/j.cma.2020.113468.\nSummary\nread_laplace_solution\nupdate_transmural_by_normal\northogonalization\ncompute_la_fiber_cs\ncompute_ra_fiber_cs\nset_rotation_bounds\ncompute_rotation_angle\ncompute_ventricle_fiber_by_drbm"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#description",
        "title": "The laplace_post.py module > Description",
        "section": "Description",
        "text": "Post process script related to Laplace solving (UHC, fibers).\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#module-detail",
        "title": "The laplace_post.py module > Module detail",
        "section": "Module detail",
        "text": "Read laplace fields from d3plot files.\ndirectory of d3plot files\nname of each d3plot file/field\ngrid with point data of each field\nUse surface normal for transmural direction.\natrium grid\natrium endocardium surface\ncell transmural direction vector\nOrthogonalization.\ntransmural vector\nBundle selection vector\nlocal coordinate system e_l,e_n,e_t\nCompute left atrium fibers coordinate system.\ndirectory of d3plot files.\nAtrial fiber settings.\n_description_, by default None\nIf given, normal direction will be updated by surface normal instead of Laplace solution.\npv object with fiber coordinates system.\nMethod descrbed in https://doi.org/10.1016/j.cma.2020.113468\nCompute right atrium fibers coordinate system.\ndirectory of d3plot files.\nAtrial fiber settings.\n_description_, by default None\nIf given, normal direction will be updated by surface normal instead of Laplace solution.\npv object with fiber coordinates system.\nMethod descrbed in https://doi.org/10.1016/j.cma.2020.113468\nDefine rotation bounds from input parameters.\nintra-ventricular interpolation weight if outflow_tracts is not None\nrotation angle at endocardium\nrotation angle at epicardium\nrotation angle of enendocardium do and epicardium on outflow tract, by default None\ncell-wise rotation bounds for endocardium and epicardium\nRotate by alpha and beta angles.\nmesh grid\nintral ventricular interpolation weight\nrotation angles in degree at endocardium and epicardium\nrotation angle of enendocardium do and epicardium on outflow tract, by default None\ncell-wise rotation angles\nD-RBM method described in https://doi.org/10.1016/j.cma.2020.113468.\ndirectory of d3plot/tprint files.\nrotation angles, by default { “alpha_left”: [-60, 60], “alpha_right”: [-60, 60],\n“alpha_ot”: None, “beta_left”: [-65, 25], “beta_right”: [-65, 25], “beta_ot”: None, }\nonly compute fibers on left ventricle, by default False\ngrid contains fiber,`cross-fiber`,`sheet` vectors\nModule detail\npython:str\npython:list\npython:str\npv.UnstructuredGrid\npv.UnstructuredGrid\npv.PolyData\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:tuple\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:str\nAtrialFiber\npv.PolyData\noptional\npv.UnstructuredGrid\npython:str\nAtrialFiber\npv.PolyData\noptional\npv.UnstructuredGrid\nnp.ndarray\npython:float\npython:float\npython:list\npython:float\npython:float\noptional\npython:tuple\nnp.ndarray\nnp.ndarray\npv.UnstructuredGrid\nnp.ndarray\npython:list\npython:float\npython:float\npython:list\npython:float\npython:float\noptional\nnp.ndarray\npython:str\npython:dict\noptional\noptional\npv.UnstructuredGrid"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.read_laplace_solution",
        "title": "The laplace_post.py module > Module detail > read_laplace_solution",
        "section": "Module detail > read_laplace_solution",
        "text": "laplace_post.read_laplace_solution(directory: str, field_list: list[str], read_heatflux: bool = False) -> pyvista.UnstructuredGrid\n\nRead laplace fields from d3plot files.\n\nParameters\n\ndirectory\n\npython:str\n\ndirectory of d3plot files\n\nfield_list\n\npython:list[python:str]\n\nname of each d3plot file/field\n\nReturns\n\npv.UnstructuredGrid\n\ngrid with point data of each field\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.update_transmural_by_normal",
        "title": "The laplace_post.py module > Module detail > update_transmural_by_normal",
        "section": "Module detail > update_transmural_by_normal",
        "text": "laplace_post.update_transmural_by_normal(grid: pyvista.UnstructuredGrid, surface: pyvista.PolyData) -> numpy.ndarray\n\nUse surface normal for transmural direction.\n\nParameters\n\ngrid\n\npv.UnstructuredGrid\n\natrium grid\n\nsurface\n\npv.PolyData\n\natrium endocardium surface\n\nReturns\n\nnp.ndarray\n\ncell transmural direction vector\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.orthogonalization",
        "title": "The laplace_post.py module > Module detail > orthogonalization",
        "section": "Module detail > orthogonalization",
        "text": "laplace_post.orthogonalization(grad_trans: numpy.ndarray, k: numpy.ndarray) -> tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nOrthogonalization.\n\nParameters\n\ngrad_trans\n\nnp.ndarray\n\ntransmural vector\n\nk\n\nnp.ndarray\n\nBundle selection vector\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray, np.ndarray]\n\nlocal coordinate system e_l,e_n,e_t\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.compute_la_fiber_cs",
        "title": "The laplace_post.py module > Module detail > compute_la_fiber_cs",
        "section": "Module detail > compute_la_fiber_cs",
        "text": "laplace_post.compute_la_fiber_cs(directory: str, settings: ansys.heart.core.settings.settings.AtrialFiber, endo_surface: pyvista.PolyData = None) -> pyvista.UnstructuredGrid\n\nCompute left atrium fibers coordinate system.\n\nParameters\n\ndirectory\n\npython:str\n\ndirectory of d3plot files.\n\nsettings\n\nAtrialFiber\n\nAtrial fiber settings.\n\nendo_surface\n\npv.PolyData, optional\n\n_description_, by default None\nIf given, normal direction will be updated by surface normal instead of Laplace solution.\n\nReturns\n\npv.UnstructuredGrid\n\npv object with fiber coordinates system.\n\nNotes\n\nMethod descrbed in https://doi.org/10.1016/j.cma.2020.113468\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.compute_ra_fiber_cs",
        "title": "The laplace_post.py module > Module detail > compute_ra_fiber_cs",
        "section": "Module detail > compute_ra_fiber_cs",
        "text": "laplace_post.compute_ra_fiber_cs(directory: str, settings: ansys.heart.core.settings.settings.AtrialFiber, endo_surface: pyvista.PolyData = None) -> pyvista.UnstructuredGrid\n\nCompute right atrium fibers coordinate system.\n\nParameters\n\ndirectory\n\npython:str\n\ndirectory of d3plot files.\n\nsettings\n\nAtrialFiber\n\nAtrial fiber settings.\n\nendo_surface\n\npv.PolyData, optional\n\n_description_, by default None\nIf given, normal direction will be updated by surface normal instead of Laplace solution.\n\nReturns\n\npv.UnstructuredGrid\n\npv object with fiber coordinates system.\n\nNotes\n\nMethod descrbed in https://doi.org/10.1016/j.cma.2020.113468\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.set_rotation_bounds",
        "title": "The laplace_post.py module > Module detail > set_rotation_bounds",
        "section": "Module detail > set_rotation_bounds",
        "text": "laplace_post.set_rotation_bounds(w: numpy.ndarray, endo: float, epi: float, outflow_tracts: list[float, float] = None) -> tuple[numpy.ndarray, numpy.ndarray]\n\nDefine rotation bounds from input parameters.\n\nParameters\n\nw\n\nnp.ndarray\n\nintra-ventricular interpolation weight if outflow_tracts is not None\n\nendo\n\npython:float\n\nrotation angle at endocardium\n\nepi\n\npython:float\n\nrotation angle at epicardium\n\noutflow_tracts\n\npython:list[python:float, python:float], optional\n\nrotation angle of enendocardium do and epicardium on outflow tract, by default None\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\ncell-wise rotation bounds for endocardium and epicardium\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.compute_rotation_angle",
        "title": "The laplace_post.py module > Module detail > compute_rotation_angle",
        "section": "Module detail > compute_rotation_angle",
        "text": "laplace_post.compute_rotation_angle(grid: pyvista.UnstructuredGrid, w: numpy.ndarray, rotation: list[float, float], outflow_tracts: list[float, float] = None) -> numpy.ndarray\n\nRotate by alpha and beta angles.\n\nParameters\n\ngrid\n\npv.UnstructuredGrid\n\nmesh grid\n\nw\n\nnp.ndarray\n\nintral ventricular interpolation weight\n\nrotation\n\npython:list[python:float, python:float]\n\nrotation angles in degree at endocardium and epicardium\n\noutflow_tracts\n\npython:list[python:float, python:float], optional\n\nrotation angle of enendocardium do and epicardium on outflow tract, by default None\n\nReturns\n\nnp.ndarray\n\ncell-wise rotation angles\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/laplace_post/index",
        "href": "api/ansys/heart/core/post/laplace_post/index.html#laplace_post.compute_ventricle_fiber_by_drbm",
        "title": "The laplace_post.py module > Module detail > compute_ventricle_fiber_by_drbm",
        "section": "Module detail > compute_ventricle_fiber_by_drbm",
        "text": "laplace_post.compute_ventricle_fiber_by_drbm(directory: str, settings: dict = {'alpha_left': [-60, 60], 'alpha_right': [-60, 60], 'alpha_ot': None, 'beta_left': [-65, 25], 'beta_right': [-65, 25], 'beta_ot': None}, left_only: bool = False) -> pyvista.UnstructuredGrid\n\nD-RBM method described in https://doi.org/10.1016/j.cma.2020.113468.\n\nParameters\n\ndirectory\n\npython:str\n\ndirectory of d3plot/tprint files.\n\nsettings\n\npython:dict, optional\n\nrotation angles, by default { “alpha_left”: [-60, 60], “alpha_right”: [-60, 60],\n“alpha_ot”: None, “beta_left”: [-65, 25], “beta_right”: [-65, 25], “beta_ot”: None, }\n\nleft_only\n\nbool, optional\n\nonly compute fibers on left ventricle, by default False\n\nReturns\n\npv.UnstructuredGrid\n\ngrid contains fiber,`cross-fiber`,`sheet` vectors\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.html#cellmodel",
        "title": "CellModel",
        "section": "CellModel",
        "text": "Abstract class for different cell models.\nCellModel\nCellModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.html#ansys.heart.core.settings.material.ep_material.CellModel",
        "title": "CellModel > CellModel > CellModel",
        "section": "CellModel > CellModel",
        "text": "class ansys.heart.core.settings.material.ep_material.CellModel\n\nAbstract class for different cell models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.html#import-detail",
        "title": "CellModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.html#classes",
        "title": "CellModel > Classes",
        "section": "Classes",
        "text": "Tentusscher\nHold data for Tentusscher cell model.\nTentusscherEndo\nHold data for Tentusscher cell model in its endocardium version.\nTentusscherEpi\nHold data for Tentusscher cell model in its epicardium version.\nTentusscherMid\nHold data for Tentusscher cell model in its mid-myocardium version.\nClasses\nTentusscher\nTentusscherEndo\nTentusscherEpi\nTentusscherMid"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#icvoutreader",
        "title": "ICVoutReader",
        "section": "ICVoutReader",
        "text": "Read control volume data from binout.\nICVoutReader\nICVoutReader"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#ansys.heart.core.post.dpf_utils.ICVoutReader",
        "title": "ICVoutReader > ICVoutReader > ICVoutReader",
        "section": "ICVoutReader > ICVoutReader",
        "text": "class ansys.heart.core.post.dpf_utils.ICVoutReader(fn: str)\n\nRead control volume data from binout.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#overview",
        "title": "ICVoutReader > Overview",
        "section": "Overview",
        "text": "get_time\nGet time array.\nget_pressure\nGet pressure array.\nget_volume\nGet volume array.\nget_flowrate\nGet flow rate array.\nOverview\nget_time\nget_pressure\nget_volume\nget_flowrate"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#import-detail",
        "title": "ICVoutReader > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#method-detail",
        "title": "ICVoutReader > Method detail",
        "section": "Method detail",
        "text": "Get time array.\ntime array\nGet pressure array.\ncontrol volume id\npressure array\nGet volume array.\ncontrol volume id\nvolume array\nGet flow rate array.\ncontrol volume interaction id\nflowrate array\nMethod detail\nnp.ndarray\npython:int\nnp.ndarray\npython:int\nnp.ndarray\npython:int\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_time",
        "title": "ICVoutReader > Method detail > get_time",
        "section": "Method detail > get_time",
        "text": "ICVoutReader.get_time() -> numpy.ndarray\n\nGet time array.\n\nReturns\n\nnp.ndarray\n\ntime array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_pressure",
        "title": "ICVoutReader > Method detail > get_pressure",
        "section": "Method detail > get_pressure",
        "text": "ICVoutReader.get_pressure(icv_id: int) -> numpy.ndarray\n\nGet pressure array.\n\nParameters\n\nicv_id\n\npython:int\n\ncontrol volume id\n\nReturns\n\nnp.ndarray\n\npressure array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_volume",
        "title": "ICVoutReader > Method detail > get_volume",
        "section": "Method detail > get_volume",
        "text": "ICVoutReader.get_volume(icv_id: int) -> numpy.ndarray\n\nGet volume array.\n\nParameters\n\nicv_id\n\npython:int\n\ncontrol volume id\n\nReturns\n\nnp.ndarray\n\nvolume array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/ICVoutReader",
        "href": "api/ansys/heart/core/post/dpf_utils/ICVoutReader.html#ICVoutReader.get_flowrate",
        "title": "ICVoutReader > Method detail > get_flowrate",
        "section": "Method detail > get_flowrate",
        "text": "ICVoutReader.get_flowrate(icvi_id: int) -> numpy.ndarray\n\nGet flow rate array.\n\nParameters\n\nicvi_id\n\npython:int\n\ncontrol volume interaction id\n\nReturns\n\nnp.ndarray\n\nflowrate array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model2",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model2.html#model2",
        "title": "Model2",
        "section": "Model2",
        "text": "Hold data for active model 2.\nModel2\nModel2"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model2",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model2.html#ansys.heart.core.settings.material.material.ActiveModel.Model2",
        "title": "Model2 > Model2 > Model2",
        "section": "Model2 > Model2",
        "text": "class ansys.heart.core.settings.material.material.ActiveModel.Model2\n\nHold data for active model 2.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model2",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model2.html#import-detail",
        "title": "Model2 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "These examples show you how you can use the preprocessor and simulator modules\nto preprocess, consume and run heart models. Examples include electrophysiology and mechanics.\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#postprocessor-examples",
        "title": "Examples > Postprocessor examples",
        "section": "Postprocessor examples",
        "text": "These examples show you how you can use the postprocessor module\nto handle simulation data generated by LS-DYNA.\nsphx_glr_examples_postprocessor_doc_postproc_ep_simulation.py\nsphx_glr_examples_postprocessor_doc_autopost_zerop_simulation.py\nsphx_glr_examples_postprocessor_doc_autopost_mechanical_simulation.py\nPostprocessor examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#preprocessor-examples",
        "title": "Examples > Preprocessor examples",
        "section": "Preprocessor examples",
        "text": "These examples show you how you can use the preprocessor module\nto generate different kinds of heart models. For instance, a\nbiventricular, four chamber, or full heart model.\nsphx_glr_examples_preprocessor_doc_download_case.py\nsphx_glr_examples_preprocessor_doc_example_uhc.py\nsphx_glr_examples_preprocessor_doc_example_atrial_fiber.py\nsphx_glr_examples_preprocessor_doc_preprocess_fullheart_rodero_01.py\nsphx_glr_examples_preprocessor_doc_preprocess_fourchamber.py\nsphx_glr_examples_preprocessor_doc_example_stimulation.py\nsphx_glr_examples_preprocessor_doc_preprocess_truncated_LV.py\nsphx_glr_examples_preprocessor_doc_demo_material.py\nPreprocessor examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#simulator-examples",
        "title": "Examples > Simulator examples",
        "section": "Simulator examples",
        "text": "These examples show you how you can use the simulator module\nto consume preprocessed models and consequently use these to run various\nsimulations.\nsphx_glr_examples_simulator_doc_mechanics_simulator_fullheart_rodero_01.py\nsphx_glr_examples_simulator_doc_EP-mechanics_simulator_fullheart_rodero.py\nsphx_glr_examples_simulator_doc_EP_simulator_FullHeart_rodero.py\nsphx_glr_examples_simulator_doc_EP_simulator_fourchamber.py\nDownload all examples in Python source code: examples_python.zip\nDownload all examples in Jupyter notebooks: examples_jupyter.zip\nGallery generated by Sphinx-Gallery\nSimulator examples\nDownload all examples in Python source code: examples_python.zip\nDownload all examples in Jupyter notebooks: examples_jupyter.zip"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#full-heart-ep-simulator-example",
        "title": "Full-heart EP-simulator example",
        "section": "Full-heart EP-simulator example",
        "text": "This example shows you how to consume a full-heart model and\nset it up for the main electropysiology simulation. This examples demonstrates how\nyou can load a pre-computed heart model, compute the fiber direction, compute the\npurkinje network and conduction system and finally simulate the electrophysiology.\nFull-heart EP-simulator example"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#example-setup",
        "title": "Full-heart EP-simulator example > Example setup",
        "section": "Example setup",
        "text": "before computing the fiber orientation, purkinje network we need to load\nthe required modules, load a heart model and set up the simulator.\nExample setup"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#perform-the-required-imports",
        "title": "Full-heart EP-simulator example > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, model, and ls-dyna executable.\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#instantiate-the-simulator-object",
        "title": "Full-heart EP-simulator example > Instantiate the simulator object",
        "section": "Instantiate the simulator object",
        "text": "instantiate the simulator and settings appropriately.\nInstantiate the simulator object"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#load-simulation-settings",
        "title": "Full-heart EP-simulator example > Load simulation settings",
        "section": "Load simulation settings",
        "text": "Here we load the default settings.\nLoad simulation settings"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#compute-the-fiber-orientation",
        "title": "Full-heart EP-simulator example > Compute the fiber orientation",
        "section": "Compute the fiber orientation",
        "text": "Compute fiber orientation and plot the computed fibers on the entire model.\nAtrial fiber orientation is approximated by apex-base direction in this model\nCompute the fiber orientation"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#compute-conduction-system",
        "title": "Full-heart EP-simulator example > Compute conduction system",
        "section": "Compute conduction system",
        "text": "Compute conduction system and purkinje network and visualize.\nThe action potential will propagate faster through this system\ncompared to the rest of the model.\nCompute conduction system"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_FullHeart_rodero",
        "href": "examples/simulator/doc_EP_simulator_FullHeart_rodero.html#start-main-simulation",
        "title": "Full-heart EP-simulator example > Start main simulation",
        "section": "Start main simulation",
        "text": "Start the main EP simulation. This uses the previously computed fiber orientation\nand purkinje network to set up and run the LS-DYNA model.\nDownload Jupyter notebook: doc_EP_simulator_FullHeart_rodero.ipynb\nDownload Python source code: doc_EP_simulator_FullHeart_rodero.py\nDownload zipped: doc_EP_simulator_FullHeart_rodero.zip\nGallery generated by Sphinx-Gallery\nStart main simulation\nDownload Jupyter notebook: doc_EP_simulator_FullHeart_rodero.ipynb\nDownload Python source code: doc_EP_simulator_FullHeart_rodero.py\nDownload zipped: doc_EP_simulator_FullHeart_rodero.zip"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#the-vtk_utilspy-module",
        "title": "The vtk_utils.py module",
        "section": "The vtk_utils.py module",
        "text": "The vtk_utils.py module\nvtk_utils.py"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#summary",
        "title": "The vtk_utils.py module > Summary",
        "section": "Summary",
        "text": "compute_surface_nodal_area_pyvista\nCompute an average nodal area by summing surface areas of connected elements.\nextrude_polydata\nExtrude a given polydata surface in a given direction.\ncell_ids_inside_enclosed_surface\nGet cell ids of cells of which the centroids are inside a given surface.\nfind_cells_close_to_nodes\nFind cell IDs close to nodes.\nget_boundary_edges\nGet the boundary edges from an input surface.\nget_boundary_edge_loops\nGet the closed/open boundary edge loops of a surface mesh.\nget_patches_delaunay\nPatch boundary edges with a delaunay algorithm.\nget_patches_with_centroid\nPatch boundary edges with a custom algorithm using a central node.\nare_connected\nCheck whether two PolyData or UnstructuredGrids are connected.\nadd_solid_name_to_stl\nAdd name of solid to stl file.\nfind_corresponding_points\nFind corresponding points between two surfaces.\ngenerate_thickness_lines\nGenerate lines from points on surface 1 to corresponding points on surface 2.\nSummary\ncompute_surface_nodal_area_pyvista\nextrude_polydata\ncell_ids_inside_enclosed_surface\nfind_cells_close_to_nodes\nget_boundary_edges\nget_boundary_edge_loops\nget_patches_delaunay\nget_patches_with_centroid\nare_connected\nadd_solid_name_to_stl\nfind_corresponding_points\ngenerate_thickness_lines"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#description",
        "title": "The vtk_utils.py module > Description",
        "section": "Description",
        "text": "Module contains methods for mesh operations related to the vtk library.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#module-detail",
        "title": "The vtk_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Compute an average nodal area by summing surface areas of connected elements.\nVtk object describing the object\nNumpy array with nodal areas of length number of points\nAdds the partial areas of connected elements/cells to each node.\nExtrude a given polydata surface in a given direction.\nSurface to extrude\nExtrude by this much, by default 1\nDirection of extrusion, should have three components if not specified\nextrudes in normal direction\nExtruded PolyData object\nGet cell ids of cells of which the centroids are inside a given surface.\nSource object of which to check which cells are inside/outside\nthe specified surface\nSurface used to check whether cells are inside/outside.\nTolerance for the select_enclosed_points filter, by default 1e-9\nArray with cell ids that are inside the enclosed surface.\nThis also accepts a source that represent the cell centroids. In this case we can skip computing\nthe cell_centers.\nFind cell IDs close to nodes.\ntarget mesh\nnode IDs\ninfluence radius, by default 2\ncell IDs\nGet the boundary edges from an input surface.\nSurface to check for boundary edges.\nMulti-block data, where each block represents connected edges.\nGet the closed/open boundary edge loops of a surface mesh.\nSurface mesh to check for boundary edges\nRemoves open edge loops from the return dictionary, by default True\ndictionary with the edges that make up the open/closed loop\nPatch boundary edges with a delaunay algorithm.\nSurface with boundary edges for which to find patches.\nFlag indicating whether to return patches for closed loops of boundary edges,\nby default True\nList of patches that close the open surface.\nPatch boundary edges with a custom algorithm using a central node.\nSurface with boundary edges for which to find patches.\nFlag indicating whether to return patches for closed loops of boundary edges,\nby default True\nList of patches that close the open surface.\nEdges need to be sorted properly for this method to return sensible patches.\nCheck whether two PolyData or UnstructuredGrids are connected.\nFirst mesh.\nSecond mesh.\nAdd name of solid to stl file.\nSupports only single block.\nFind corresponding points between two surfaces.\nfirst surface\nsecond surface\napproximate largest distance between two surfaces\n2*N array\nfirst row is node IDs of master surface,\nsecond row is corresponding node IDs on the slave surface\nNone if no corresponding node is found\nUses ray tracing.\nThe two surfaces are assumed to be close and nearly parallel.\nAs a result, the correspondence is not one-to-one—some points may\nhave no corresponding match, while others may share the same\ncorresponding point.\nGenerate lines from points on surface 1 to corresponding points on surface 2.\nmaster surface\nslave surface\ncorresponding points array, default None\nit contains cell data named ‘thickenss’.\nModule detail\nvtk.vtkPolyData\nnp.array\npv.PolyData\npython:float\noptional\nnp.array\noptional\npv.PolyData\npv.UnstructuredGrid\npv.PolyData\npython:float\noptional\nnp.ndarray\npv.UnstructuredGrid\npython:list\npython:int\npython:float\noptional\nnp.ndarray\npv.PolyData\npv.MultiBlock\npv.PolyData\noptional\npython:dict\npv.PolyData\nList\npv.PolyData\npv.PolyData\nList\npv.PolyData\nUnion\npv.PolyData\npv.UnstructuredGrid\nUnion\npv.PolyData\npv.UnstructuredGrid\npv.PolyData\npv.PolyData\npython:float\nnp.ndarray\npv.PolyData\npv.PolyData\nnp.ndarray\noptional\npv.PolyData"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.compute_surface_nodal_area_pyvista",
        "title": "The vtk_utils.py module > Module detail > compute_surface_nodal_area_pyvista",
        "section": "Module detail > compute_surface_nodal_area_pyvista",
        "text": "vtk_utils.compute_surface_nodal_area_pyvista(surface: pyvista.PolyData) -> numpy.ndarray\n\nCompute an average nodal area by summing surface areas of connected elements.\n\nParameters\n\nvtk_surface\n\nvtk.vtkPolyData\n\nVtk object describing the object\n\nReturns\n\nnp.array\n\nNumpy array with nodal areas of length number of points\n\nNotes\n\nAdds the partial areas of connected elements/cells to each node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.extrude_polydata",
        "title": "The vtk_utils.py module > Module detail > extrude_polydata",
        "section": "Module detail > extrude_polydata",
        "text": "vtk_utils.extrude_polydata(surface: pyvista.PolyData, extrude_by: float = 1, extrude_direction: numpy.array = np.empty(0)) -> pyvista.PolyData\n\nExtrude a given polydata surface in a given direction.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface to extrude\n\nextrude_by\n\npython:float, optional\n\nExtrude by this much, by default 1\n\nextrude_direction\n\nnp.array, optional\n\nDirection of extrusion, should have three components if not specified\nextrudes in normal direction\n\nReturns\n\npv.PolyData\n\nExtruded PolyData object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.cell_ids_inside_enclosed_surface",
        "title": "The vtk_utils.py module > Module detail > cell_ids_inside_enclosed_surface",
        "section": "Module detail > cell_ids_inside_enclosed_surface",
        "text": "vtk_utils.cell_ids_inside_enclosed_surface(source: pyvista.UnstructuredGrid | pyvista.PolyData, surface: pyvista.PolyData, tolerance: float = 1e-09) -> numpy.ndarray\n\nGet cell ids of cells of which the centroids are inside a given surface.\n\nParameters\n\nsource\n\npv.UnstructuredGrid\n\nSource object of which to check which cells are inside/outside\nthe specified surface\n\nsurface\n\npv.PolyData\n\nSurface used to check whether cells are inside/outside.\n\ntolerance\n\npython:float, optional\n\nTolerance for the select_enclosed_points filter, by default 1e-9\n\nReturns\n\nnp.ndarray\n\nArray with cell ids that are inside the enclosed surface.\n\nNotes\n\nThis also accepts a source that represent the cell centroids. In this case we can skip computing\nthe cell_centers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.find_cells_close_to_nodes",
        "title": "The vtk_utils.py module > Module detail > find_cells_close_to_nodes",
        "section": "Module detail > find_cells_close_to_nodes",
        "text": "vtk_utils.find_cells_close_to_nodes(mesh: pyvista.UnstructuredGrid, node_ids: list[int], radius: float = 2) -> numpy.ndarray\n\nFind cell IDs close to nodes.\n\nParameters\n\nmesh\n\npv.UnstructuredGrid\n\ntarget mesh\n\nnode_ids\n\npython:list[python:int]\n\nnode IDs\n\nradius\n\npython:float, optional\n\ninfluence radius, by default 2\n\nReturns\n\nnp.ndarray\n\ncell IDs\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.get_boundary_edges",
        "title": "The vtk_utils.py module > Module detail > get_boundary_edges",
        "section": "Module detail > get_boundary_edges",
        "text": "vtk_utils.get_boundary_edges(surface: pyvista.PolyData) -> pyvista.MultiBlock\n\nGet the boundary edges from an input surface.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface to check for boundary edges.\n\nReturns\n\npv.MultiBlock\n\nMulti-block data, where each block represents connected edges.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.get_boundary_edge_loops",
        "title": "The vtk_utils.py module > Module detail > get_boundary_edge_loops",
        "section": "Module detail > get_boundary_edge_loops",
        "text": "vtk_utils.get_boundary_edge_loops(surface: pyvista.PolyData, remove_open_edge_loops: bool = True, return_types: bool = False) -> dict\n\nGet the closed/open boundary edge loops of a surface mesh.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface mesh to check for boundary edges\n\nremove_open_edge_loops\n\nbool, optional\n\nRemoves open edge loops from the return dictionary, by default True\n\nReturns\n\npython:dict\n\ndictionary with the edges that make up the open/closed loop\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.get_patches_delaunay",
        "title": "The vtk_utils.py module > Module detail > get_patches_delaunay",
        "section": "Module detail > get_patches_delaunay",
        "text": "vtk_utils.get_patches_delaunay(surface: pyvista.PolyData, closed_only: bool = True) -> list[pyvista.PolyData]\n\nPatch boundary edges with a delaunay algorithm.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface with boundary edges for which to find patches.\n\nclosed_only\n\nbool\n\nFlag indicating whether to return patches for closed loops of boundary edges,\nby default True\n\nReturns\n\nList[pv.PolyData]\n\nList of patches that close the open surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.get_patches_with_centroid",
        "title": "The vtk_utils.py module > Module detail > get_patches_with_centroid",
        "section": "Module detail > get_patches_with_centroid",
        "text": "vtk_utils.get_patches_with_centroid(surface: pyvista.PolyData, closed_only: bool = True) -> list[pyvista.PolyData]\n\nPatch boundary edges with a custom algorithm using a central node.\n\nParameters\n\nsurface\n\npv.PolyData\n\nSurface with boundary edges for which to find patches.\n\nclosed_only\n\nbool\n\nFlag indicating whether to return patches for closed loops of boundary edges,\nby default True\n\nReturns\n\nList[pv.PolyData]\n\nList of patches that close the open surface.\n\nNotes\n\nEdges need to be sorted properly for this method to return sensible patches.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.are_connected",
        "title": "The vtk_utils.py module > Module detail > are_connected",
        "section": "Module detail > are_connected",
        "text": "vtk_utils.are_connected(mesh1: pyvista.PolyData | pyvista.UnstructuredGrid, mesh2: pyvista.PolyData | pyvista.UnstructuredGrid)\n\nCheck whether two PolyData or UnstructuredGrids are connected.\n\nParameters\n\nmesh1\n\nUnion[pv.PolyData, pv.UnstructuredGrid]\n\nFirst mesh.\n\nmesh2\n\nUnion[pv.PolyData, pv.UnstructuredGrid]\n\nSecond mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.add_solid_name_to_stl",
        "title": "The vtk_utils.py module > Module detail > add_solid_name_to_stl",
        "section": "Module detail > add_solid_name_to_stl",
        "text": "vtk_utils.add_solid_name_to_stl(filename, solid_name, file_type: str = 'ascii') -> None\n\nAdd name of solid to stl file.\n\nNotes\n\nSupports only single block.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.find_corresponding_points",
        "title": "The vtk_utils.py module > Module detail > find_corresponding_points",
        "section": "Module detail > find_corresponding_points",
        "text": "vtk_utils.find_corresponding_points(master_surface: pyvista.PolyData, slave_surface: pyvista.PolyData, distance: float = 20) -> numpy.ndarray\n\nFind corresponding points between two surfaces.\n\nParameters\n\nmaster_surface\n\npv.PolyData\n\nfirst surface\n\nslave_surface\n\npv.PolyData\n\nsecond surface\n\ndistance\n\npython:float\n\napproximate largest distance between two surfaces\n\nReturns\n\nnp.ndarray\n\n2*N array\nfirst row is node IDs of master surface,\nsecond row is corresponding node IDs on the slave surface\nNone if no corresponding node is found\n\nNotes\n\nUses ray tracing.\nThe two surfaces are assumed to be close and nearly parallel.\nAs a result, the correspondence is not one-to-one—some points may\nhave no corresponding match, while others may share the same\ncorresponding point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/vtk_utils/index",
        "href": "api/ansys/heart/core/utils/vtk_utils/index.html#vtk_utils.generate_thickness_lines",
        "title": "The vtk_utils.py module > Module detail > generate_thickness_lines",
        "section": "Module detail > generate_thickness_lines",
        "text": "vtk_utils.generate_thickness_lines(surface1: pyvista.PolyData, surface2: pyvista.PolyData, corresponding_points: numpy.ndarray = None) -> pyvista.PolyData\n\nGenerate lines from points on surface 1 to corresponding points on surface 2.\n\nParameters\n\nsurface1\n\npv.PolyData\n\nmaster surface\n\nsurface2\n\npv.PolyData\n\nslave surface\n\nres\n\nnp.ndarray, optional\n\ncorresponding points array, default None\n\nReturns\n\npv.PolyData\n\nit contains cell data named ‘thickenss’.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#epmaterialmodel",
        "title": "EPMaterialModel",
        "section": "EPMaterialModel",
        "text": "Base class for all EP material models.\nEPMaterialModel\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#ansys.heart.core.settings.material.ep_material.EPMaterialModel",
        "title": "EPMaterialModel > EPMaterialModel > EPMaterialModel",
        "section": "EPMaterialModel > EPMaterialModel",
        "text": "class ansys.heart.core.settings.material.ep_material.EPMaterialModel\n\nBase class for all EP material models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#overview",
        "title": "EPMaterialModel > Overview",
        "section": "Overview",
        "text": "sigma_fiber\nsigma_sheet\nsigma_sheet_normal\nbeta\ncm\nlambda_\n__post_init__\nPost init method.\nOverview\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal\nbeta\ncm\nlambda_\n__post_init__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#import-detail",
        "title": "EPMaterialModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#attribute-detail",
        "title": "EPMaterialModel > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.sigma_fiber",
        "title": "EPMaterialModel > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "EPMaterialModel.sigma_fiber: float = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.sigma_sheet",
        "title": "EPMaterialModel > Attribute detail > sigma_sheet",
        "section": "Attribute detail > sigma_sheet",
        "text": "EPMaterialModel.sigma_sheet: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.sigma_sheet_normal",
        "title": "EPMaterialModel > Attribute detail > sigma_sheet_normal",
        "section": "Attribute detail > sigma_sheet_normal",
        "text": "EPMaterialModel.sigma_sheet_normal: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.beta",
        "title": "EPMaterialModel > Attribute detail > beta",
        "section": "Attribute detail > beta",
        "text": "EPMaterialModel.beta: float | None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.cm",
        "title": "EPMaterialModel > Attribute detail > cm",
        "section": "Attribute detail > cm",
        "text": "EPMaterialModel.cm: float | None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.lambda_",
        "title": "EPMaterialModel > Attribute detail > lambda_",
        "section": "Attribute detail > lambda_",
        "text": "EPMaterialModel.lambda_: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#method-detail",
        "title": "EPMaterialModel > Method detail",
        "section": "Method detail",
        "text": "Post init method.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterialModel.html#EPMaterialModel.__post_init__",
        "title": "EPMaterialModel > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "EPMaterialModel.__post_init__()\n\nPost init method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/pvloop/index",
        "href": "api/ansys/heart/core/post/pvloop/index.html#the-pvlooppy-module",
        "title": "The pvloop.py module",
        "section": "The pvloop.py module",
        "text": "The pvloop.py module\npvloop.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/pvloop/index",
        "href": "api/ansys/heart/core/post/pvloop/index.html#summary",
        "title": "The pvloop.py module > Summary",
        "section": "Summary",
        "text": "write_pvloop_pngs\nWrite pv loop figures into png.\ngenerate_pvloop\nGenerate pv loop figures from icvout.\nCV_NAME\nSummary\nwrite_pvloop_pngs\ngenerate_pvloop\nCV_NAME"
    },
    {
        "objectID": "api/ansys/heart/core/post/pvloop/index",
        "href": "api/ansys/heart/core/post/pvloop/index.html#description",
        "title": "The pvloop.py module > Description",
        "section": "Description",
        "text": "Get pressure-volume (PV) loop from LS-DYNA icvout file.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/post/pvloop/index",
        "href": "api/ansys/heart/core/post/pvloop/index.html#module-detail",
        "title": "The pvloop.py module > Module detail",
        "section": "Module detail",
        "text": "Write pv loop figures into png.\npressure array\nvolume array\nfolder to save\nGenerate pv loop figures from icvout.\nbinout path\nfolder to save\nTime to keep from the end, by default 800 (last heart beat)\nModule detail\nnp.ndarray\nnp.ndarray\npython:str\npython:str\npython:str\npython:float\noptional"
    },
    {
        "objectID": "api/ansys/heart/core/post/pvloop/index",
        "href": "api/ansys/heart/core/post/pvloop/index.html#pvloop.write_pvloop_pngs",
        "title": "The pvloop.py module > Module detail > write_pvloop_pngs",
        "section": "Module detail > write_pvloop_pngs",
        "text": "pvloop.write_pvloop_pngs(pressure: numpy.ndarray, volume: numpy.ndarray, save_to: str)\n\nWrite pv loop figures into png.\n\nParameters\n\npressure\n\nnp.ndarray\n\npressure array\n\nvolume\n\nnp.ndarray\n\nvolume array\n\nsave_to\n\npython:str\n\nfolder to save\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/pvloop/index",
        "href": "api/ansys/heart/core/post/pvloop/index.html#pvloop.generate_pvloop",
        "title": "The pvloop.py module > Module detail > generate_pvloop",
        "section": "Module detail > generate_pvloop",
        "text": "pvloop.generate_pvloop(f: str, out_dir: str, t_to_keep: float = 800)\n\nGenerate pv loop figures from icvout.\n\nParameters\n\nf\n\npython:str\n\nbinout path\n\nout_dir\n\npython:str\n\nfolder to save\n\nt_to_keep\n\npython:float, optional\n\nTime to keep from the end, by default 800 (last heart beat)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/pvloop/index",
        "href": "api/ansys/heart/core/post/pvloop/index.html#pvloop.CV_NAME",
        "title": "The pvloop.py module > Module detail > CV_NAME",
        "section": "Module detail > CV_NAME",
        "text": "pvloop.CV_NAME = ['LV', 'RV', 'LA', 'RA']\n\n"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contributing",
        "title": "Contributing",
        "section": "Contributing",
        "text": "Overall guidance on contributing to a PyAnsys repository appears in\nContribute\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyAnsys Heart.\nThis project adheres to the Contributor Covenant Code of Conduct. By\nparticipating, you agree to uphold this code.\nThe following contribution information is specific to PyAnsys Heart. Start by selecting your role in the project:\nReport bugs, suggesting features, and ask questions.\nImprove the documentation and write new guides.\nFix bugs, add new features, and improve the codebase.\nContributing"
    },
    {
        "objectID": "api/ansys/heart/core/models/LeftVentricle",
        "href": "api/ansys/heart/core/models/LeftVentricle.html#leftventricle",
        "title": "LeftVentricle",
        "section": "LeftVentricle",
        "text": "Bases: HeartModel\nModel of just the left ventricle.\nLeftVentricle\nLeftVentricle\nHeartModel"
    },
    {
        "objectID": "api/ansys/heart/core/models/LeftVentricle",
        "href": "api/ansys/heart/core/models/LeftVentricle.html#ansys.heart.core.models.LeftVentricle",
        "title": "LeftVentricle > LeftVentricle > LeftVentricle",
        "section": "LeftVentricle > LeftVentricle",
        "text": "class ansys.heart.core.models.LeftVentricle(working_directory: pathlib.Path | str = None)\n\nBases: HeartModel\n\nModel of just the left ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/LeftVentricle",
        "href": "api/ansys/heart/core/models/LeftVentricle.html#overview",
        "title": "LeftVentricle > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nOverview\nleft_ventricle"
    },
    {
        "objectID": "api/ansys/heart/core/models/LeftVentricle",
        "href": "api/ansys/heart/core/models/LeftVentricle.html#import-detail",
        "title": "LeftVentricle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/LeftVentricle",
        "href": "api/ansys/heart/core/models/LeftVentricle.html#attribute-detail",
        "title": "LeftVentricle > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/LeftVentricle",
        "href": "api/ansys/heart/core/models/LeftVentricle.html#LeftVentricle.left_ventricle",
        "title": "LeftVentricle > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "LeftVentricle.left_ventricle: ansys.heart.core.objects.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#contributing-as-a-documentarian",
        "title": "Contributing as a documentarian",
        "section": "Contributing as a documentarian",
        "text": "Explain how to get started, use, and contribute to the project.\nShowcase the capabilities of PyAnsys Heart by adding a new example.\nRender the documentation to see your changes reflected.\nContributing as a documentarian"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#write-documentation",
        "title": "Contributing as a documentarian > Write documentation",
        "section": "Write documentation",
        "text": "The documentation generator used in PyAnsys Heart is Sphinx. Most of the documents\nare written in reStructuredText. Some parts of the documentation, like the\nexamples, use a mix of reStructuredText and Python, thanks to Sphinx-Gallery.\nIf you are interested in writing examples, see the writing examples\nsection.\nThe documentation is located in the doc/source directory. The landing page\nis declared in the doc/source/index.rst file. The rest of the files contain\nthe main pages of different sections of the documentation. Finally, the\ndoc/source/_static/ folder contains various assets like images, and CSS\nfiles.\nThe layout of the doc/source directory is reflected in the slug of the\nonline documentation. For example, the\ndoc/source/contribute/documentarian.rst renders as\nhttps://heart.health.docs.pyansys.com/contribute/documentarian.html.\nThus, if you create a new file, it important to follow these rules:\nUse lowercase letters for file and directory names\nUse short and descriptive names\nUse hyphens to separate words\nPlay smart with the hierarchy of the files and directories\nAll files need to be included in a table of contents. No dangling files are\npermitted. If a file is not included in the table of contents, Sphinx raises a\nwarning.\nA table of contents can be declared using a directive like this:\nThe path to the file is relative to the directory where the table of contents\nis declared.\nWrite documentation\ndoc/source\ndoc/source/index.rst\ndoc/source/_static/\ndoc/source\ndoc/source/contribute/documentarian.rst\nhttps://heart.health.docs.pyansys.com/contribute/documentarian.html"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#write-a-new-example",
        "title": "Contributing as a documentarian > Write a new example",
        "section": "Write a new example",
        "text": "The examples section of the documentation showcases different\ncapabilities of PyAnsys Heart. Each example (grouped into folders of related examples)\nis a standalone Python script. Despite being *.py files, they are written in a mix\nof reStructuredText and Python. This is possible thanks to the Sphinx-Gallery\nSphinx extension.\nDocumentarians writing new examples are encouraged to familiarize themselves with\nstructuring Python scripts for Sphinx-Gallery.\nOnce the .py file for a new example is properly set up, Sphinx-Gallery automatically\ngenerates Sphinx reStructuredText files from it. The rendering of the resulting reST provides\nusers with .ipynb (Jupyter notebook) and .py files of each example, which users can download.\nFinally, here are some tips for writing examples:\nStart the example with an explanation of the main topic. Try to use as many relevant\nkeywords as possible in this section to optimize for Search Engine Optimization.\nInclude an explanation with each code cell. The explanations should\nbe included before, not after, the corresponding code.\nThe examples are built with the documentation. As part of the build process,\nscreenshots of rendered graphics are inserted in the document. You do not need\nto include the screenshots yourself.\nWhen creating a new folder which includes more than one related examples, ensure\na README.txt file is also included. This file should contain reST to be used as the header\nfor the index page corresponding to the subsection for these examples in the generated documentation.\nWrite a new example\n*.py\n.py\n.ipynb\n.py\nREADME.txt"
    },
    {
        "objectID": "contribute/documentarian",
        "href": "contribute/documentarian.html#build-the-documentation",
        "title": "Contributing as a documentarian > Build the documentation",
        "section": "Build the documentation",
        "text": "Tox is used for automating the build of the documentation. To install Tox, run\nThere are different tox environments for building the HTML documentation, building the PDF documentation,\nand checking the integrity of external links. The following environments are available:\nEnvironment\nDescription\nCommand\ndoc-links\nEnvironment for verifying the integrity of external links within the documentation\npython -m tox -e doc-links\ndoc-html\nEnvironment for generating HTML documentation\npython -m tox -e doc-html\ndoc-pdf\nEnvironment for generating PDF documentation\npython -m tox -e doc-pdf\ndoc-clean\nEnvironment for cleaning documentation generated files\npython -m tox -e doc-clean\nBuild the documentation"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#analysiszeropressure",
        "title": "AnalysisZeroPressure",
        "section": "AnalysisZeroPressure",
        "text": "Bases: Analysis\nClass for keeping track of zero pressure analysis settings.\nAnalysisZeroPressure\nAnalysisZeroPressure\nAnalysis"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#ansys.heart.core.settings.settings.AnalysisZeroPressure",
        "title": "AnalysisZeroPressure > AnalysisZeroPressure > AnalysisZeroPressure",
        "section": "AnalysisZeroPressure > AnalysisZeroPressure",
        "text": "class ansys.heart.core.settings.settings.AnalysisZeroPressure\n\nBases: Analysis\n\nClass for keeping track of zero pressure analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#overview",
        "title": "AnalysisZeroPressure > Overview",
        "section": "Overview",
        "text": "dt_nodout\nTime interval of nodeout export.\nmax_iters\nMaximum iterations for stress-free-configuration algorithm.\nmethod\nMethod to use.\ntolerance\nTolerance to use for iterative algorithm.\nOverview\ndt_nodout\nmax_iters\nmethod\ntolerance"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#import-detail",
        "title": "AnalysisZeroPressure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#attribute-detail",
        "title": "AnalysisZeroPressure > Attribute detail",
        "section": "Attribute detail",
        "text": "Time interval of nodeout export.\nMaximum iterations for stress-free-configuration algorithm.\nMethod to use.\nTolerance to use for iterative algorithm.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.dt_nodout",
        "title": "AnalysisZeroPressure > Attribute detail > dt_nodout",
        "section": "Attribute detail > dt_nodout",
        "text": "AnalysisZeroPressure.dt_nodout: pint.Quantity = 0\n\nTime interval of nodeout export.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.max_iters",
        "title": "AnalysisZeroPressure > Attribute detail > max_iters",
        "section": "Attribute detail > max_iters",
        "text": "AnalysisZeroPressure.max_iters: int = 3\n\nMaximum iterations for stress-free-configuration algorithm.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.method",
        "title": "AnalysisZeroPressure > Attribute detail > method",
        "section": "Attribute detail > method",
        "text": "AnalysisZeroPressure.method: int = 2\n\nMethod to use.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure",
        "href": "api/ansys/heart/core/settings/settings/AnalysisZeroPressure.html#AnalysisZeroPressure.tolerance",
        "title": "AnalysisZeroPressure > Attribute detail > tolerance",
        "section": "Attribute detail > tolerance",
        "text": "AnalysisZeroPressure.tolerance: float = 5.0\n\nTolerance to use for iterative algorithm.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#mat295",
        "title": "Mat295",
        "section": "Mat295",
        "text": "Bases: MechanicalMaterialModel\nHold data for MAT_ANISOTROPIC_HYPERELASTIC (MAT_295).\nMat295\nMat295\nMechanicalMaterialModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#ansys.heart.core.settings.material.material.Mat295",
        "title": "Mat295 > Mat295 > Mat295",
        "section": "Mat295 > Mat295",
        "text": "class ansys.heart.core.settings.material.material.Mat295\n\nBases: MechanicalMaterialModel\n\nHold data for MAT_ANISOTROPIC_HYPERELASTIC (MAT_295).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#overview",
        "title": "Mat295 > Overview",
        "section": "Overview",
        "text": "rho\nDensity of the material.\niso\nIsotropic module.\naopt\nMatrerial axe option, don’t change it.\naniso\nAnisotropic module.\nactive\nActive module.\nOverview\nrho\niso\naopt\naniso\nactive"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#import-detail",
        "title": "Mat295 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#attribute-detail",
        "title": "Mat295 > Attribute detail",
        "section": "Attribute detail",
        "text": "Density of the material.\nIsotropic module.\nMatrerial axe option, don’t change it.\nAnisotropic module.\nActive module.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#Mat295.rho",
        "title": "Mat295 > Attribute detail > rho",
        "section": "Attribute detail > rho",
        "text": "Mat295.rho: float\n\nDensity of the material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#Mat295.iso",
        "title": "Mat295 > Attribute detail > iso",
        "section": "Attribute detail > iso",
        "text": "Mat295.iso: ISO\n\nIsotropic module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#Mat295.aopt",
        "title": "Mat295 > Attribute detail > aopt",
        "section": "Attribute detail > aopt",
        "text": "Mat295.aopt: float = 2.0\n\nMatrerial axe option, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#Mat295.aniso",
        "title": "Mat295 > Attribute detail > aniso",
        "section": "Attribute detail > aniso",
        "text": "Mat295.aniso: ANISO | None = None\n\nAnisotropic module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/Mat295",
        "href": "api/ansys/heart/core/settings/material/material/Mat295.html#Mat295.active",
        "title": "Mat295 > Attribute detail > active",
        "section": "Attribute detail > active",
        "text": "Mat295.active: ACTIVE | None = None\n\nActive module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/InvalidHeartModelError",
        "href": "api/ansys/heart/core/exceptions/InvalidHeartModelError.html#invalidheartmodelerror",
        "title": "InvalidHeartModelError",
        "section": "InvalidHeartModelError",
        "text": "Bases: Exception\nException raised when the heart model is invalid.\nInvalidHeartModelError\nInvalidHeartModelError\nException"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/InvalidHeartModelError",
        "href": "api/ansys/heart/core/exceptions/InvalidHeartModelError.html#ansys.heart.core.exceptions.InvalidHeartModelError",
        "title": "InvalidHeartModelError > InvalidHeartModelError > InvalidHeartModelError",
        "section": "InvalidHeartModelError > InvalidHeartModelError",
        "text": "exception ansys.heart.core.exceptions.InvalidHeartModelError\n\nBases: Exception\n\nException raised when the heart model is invalid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/InvalidHeartModelError",
        "href": "api/ansys/heart/core/exceptions/InvalidHeartModelError.html#import-detail",
        "title": "InvalidHeartModelError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#iso",
        "title": "ISO",
        "section": "ISO",
        "text": "Isotropic module of MAT_295.\nISO\nISO"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ansys.heart.core.settings.material.material.ISO",
        "title": "ISO > ISO > ISO",
        "section": "ISO > ISO",
        "text": "class ansys.heart.core.settings.material.material.ISO\n\nIsotropic module of MAT_295.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#overview",
        "title": "ISO > Overview",
        "section": "Overview",
        "text": "itype\nIsotropic material type.\nbeta\nVolumetric response coefficient.\nnu\nPossion’s ratio.\nk1\nk1 for HGO model.\nk2\nk2 for HGO model.\nmu1\nmu1 for Ogden model.\nalpha1\nalpha1 for Ogden model.\nkappa\nBulk modulus.\n__post_init__\nTest inputs.\nOverview\nitype\nbeta\nnu\nk1\nk2\nmu1\nalpha1\nkappa\n__post_init__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#import-detail",
        "title": "ISO > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#attribute-detail",
        "title": "ISO > Attribute detail",
        "section": "Attribute detail",
        "text": "Isotropic material type.\nVolumetric response coefficient.\nPossion’s ratio.\nk1 for HGO model.\nk2 for HGO model.\nmu1 for Ogden model.\nalpha1 for Ogden model.\nBulk modulus.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.itype",
        "title": "ISO > Attribute detail > itype",
        "section": "Attribute detail > itype",
        "text": "ISO.itype: int = -3\n\nIsotropic material type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.beta",
        "title": "ISO > Attribute detail > beta",
        "section": "Attribute detail > beta",
        "text": "ISO.beta: float = 0.0\n\nVolumetric response coefficient.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.nu",
        "title": "ISO > Attribute detail > nu",
        "section": "Attribute detail > nu",
        "text": "ISO.nu: float = 0.499\n\nPossion’s ratio.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.k1",
        "title": "ISO > Attribute detail > k1",
        "section": "Attribute detail > k1",
        "text": "ISO.k1: float = None\n\nk1 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.k2",
        "title": "ISO > Attribute detail > k2",
        "section": "Attribute detail > k2",
        "text": "ISO.k2: float = None\n\nk2 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.mu1",
        "title": "ISO > Attribute detail > mu1",
        "section": "Attribute detail > mu1",
        "text": "ISO.mu1: float = None\n\nmu1 for Ogden model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.alpha1",
        "title": "ISO > Attribute detail > alpha1",
        "section": "Attribute detail > alpha1",
        "text": "ISO.alpha1: float = None\n\nalpha1 for Ogden model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.kappa",
        "title": "ISO > Attribute detail > kappa",
        "section": "Attribute detail > kappa",
        "text": "ISO.kappa: float = None\n\nBulk modulus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#method-detail",
        "title": "ISO > Method detail",
        "section": "Method detail",
        "text": "Test inputs.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ISO",
        "href": "api/ansys/heart/core/settings/material/material/ISO.html#ISO.__post_init__",
        "title": "ISO > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "ISO.__post_init__()\n\nTest inputs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#parttype",
        "title": "PartType",
        "section": "PartType",
        "text": "Bases: enum.Enum\nStores valid part types.\nPartType\nPartType\nenum.Enum"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#ansys.heart.core.objects.PartType",
        "title": "PartType > PartType > PartType",
        "section": "PartType > PartType",
        "text": "class ansys.heart.core.objects.PartType(*args, **kwds)\n\nBases: enum.Enum\n\nStores valid part types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#overview",
        "title": "PartType > Overview",
        "section": "Overview",
        "text": "VENTRICLE\nATRIUM\nSEPTUM\nARTERY\nMYOCARDIUM\nUNDEFINED\nOverview\nVENTRICLE\nATRIUM\nSEPTUM\nARTERY\nMYOCARDIUM\nUNDEFINED"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#import-detail",
        "title": "PartType > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#attribute-detail",
        "title": "PartType > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#PartType.VENTRICLE",
        "title": "PartType > Attribute detail > VENTRICLE",
        "section": "Attribute detail > VENTRICLE",
        "text": "PartType.VENTRICLE = 'ventricle'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#PartType.ATRIUM",
        "title": "PartType > Attribute detail > ATRIUM",
        "section": "Attribute detail > ATRIUM",
        "text": "PartType.ATRIUM = 'atrium'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#PartType.SEPTUM",
        "title": "PartType > Attribute detail > SEPTUM",
        "section": "Attribute detail > SEPTUM",
        "text": "PartType.SEPTUM = 'septum'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#PartType.ARTERY",
        "title": "PartType > Attribute detail > ARTERY",
        "section": "Attribute detail > ARTERY",
        "text": "PartType.ARTERY = 'artery'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#PartType.MYOCARDIUM",
        "title": "PartType > Attribute detail > MYOCARDIUM",
        "section": "Attribute detail > MYOCARDIUM",
        "text": "PartType.MYOCARDIUM = 'myocardium'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/objects/PartType",
        "href": "api/ansys/heart/core/objects/PartType.html#PartType.UNDEFINED",
        "title": "PartType > Attribute detail > UNDEFINED",
        "section": "Attribute detail > UNDEFINED",
        "text": "PartType.UNDEFINED = 'undefined'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/models/index",
        "href": "api/ansys/heart/core/models/index.html#the-modelspy-module",
        "title": "The models.py module",
        "section": "The models.py module",
        "text": "The models.py module\nmodels.py"
    },
    {
        "objectID": "api/ansys/heart/core/models/index",
        "href": "api/ansys/heart/core/models/index.html#summary",
        "title": "The models.py module > Summary",
        "section": "Summary",
        "text": "HeartModel\nParent class for heart models.\nLeftVentricle\nModel of just the left ventricle.\nBiVentricle\nModel of the left and right ventricle.\nFourChamber\nModel of the left/right ventricle and left/right atrium.\nFullHeart\nModel of both ventricles, both atria, aorta and pulmonary artery.\nSummary\nHeartModel\nLeftVentricle\nBiVentricle\nFourChamber\nFullHeart"
    },
    {
        "objectID": "api/ansys/heart/core/models/index",
        "href": "api/ansys/heart/core/models/index.html#description",
        "title": "The models.py module > Description",
        "section": "Description",
        "text": "Module containing classes for the various heart models.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#flow",
        "title": "Flow",
        "section": "Flow",
        "text": "System state for flow.\nFlow\nFlow"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#ansys.heart.core.post.system_model_post.Flow",
        "title": "Flow > Flow > Flow",
        "section": "Flow > Flow",
        "text": "class ansys.heart.core.post.system_model_post.Flow\n\nSystem state for flow.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#overview",
        "title": "Flow > Overview",
        "section": "Overview",
        "text": "cavity\nartery\nvenous\nperipheral\nOverview\ncavity\nartery\nvenous\nperipheral"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#import-detail",
        "title": "Flow > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#attribute-detail",
        "title": "Flow > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#Flow.cavity",
        "title": "Flow > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Flow.cavity: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#Flow.artery",
        "title": "Flow > Attribute detail > artery",
        "section": "Attribute detail > artery",
        "text": "Flow.artery: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#Flow.venous",
        "title": "Flow > Attribute detail > venous",
        "section": "Attribute detail > venous",
        "text": "Flow.venous: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Flow",
        "href": "api/ansys/heart/core/post/system_model_post/Flow.html#Flow.peripheral",
        "title": "Flow > Attribute detail > peripheral",
        "section": "Attribute detail > peripheral",
        "text": "Flow.peripheral: numpy.ndarray\n\n"
    },
    {
        "objectID": "user-guide",
        "href": "user-guide.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "This guide provides an overview of the capabilities of PyAnsys Heart, explaining the key concept of preprocessor, writer, simulator,\npostprocessor, and more.\nLearn how to preprocess the input files for PyAnsys Heart.\nLearn how to write the input files for PyAnsys Heart.\nLearn how to simulate the heart model using PyAnsys Heart.\nLearn how to postprocess the simulation results using PyAnsys Heart.\nUser guide"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#feature",
        "title": "Feature",
        "section": "Feature",
        "text": "Feature class.\nFeature\nFeature"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#ansys.heart.core.objects.Feature",
        "title": "Feature > Feature > Feature",
        "section": "Feature > Feature",
        "text": "class ansys.heart.core.objects.Feature(name: str = None)\n\nFeature class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#overview",
        "title": "Feature > Overview",
        "section": "Overview",
        "text": "name\nName of feature.\ntype\nType of feature.\npid\nPart id associated with the feature.\nOverview\nname\ntype\npid"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#import-detail",
        "title": "Feature > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#attribute-detail",
        "title": "Feature > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of feature.\nType of feature.\nPart id associated with the feature.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#Feature.name",
        "title": "Feature > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "Feature.name = None\n\nName of feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#Feature.type",
        "title": "Feature > Attribute detail > type",
        "section": "Attribute detail > type",
        "text": "Feature.type = None\n\nType of feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Feature",
        "href": "api/ansys/heart/core/objects/Feature.html#Feature.pid",
        "title": "Feature > Attribute detail > pid",
        "section": "Attribute detail > pid",
        "text": "Feature.pid: int = None\n\nPart id associated with the feature.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/input/index",
        "href": "api/ansys/heart/core/pre/input/index.html#the-inputpy-module",
        "title": "The input.py module",
        "section": "The input.py module",
        "text": "The input.py module\ninput.py"
    },
    {
        "objectID": "api/ansys/heart/core/pre/input/index",
        "href": "api/ansys/heart/core/pre/input/index.html#summary",
        "title": "The input.py module > Summary",
        "section": "Summary",
        "text": "Summary"
    },
    {
        "objectID": "api/ansys/heart/core/pre/input/index",
        "href": "api/ansys/heart/core/pre/input/index.html#description",
        "title": "The input.py module > Description",
        "section": "Description",
        "text": "Module to manage input.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/pre/input/index",
        "href": "api/ansys/heart/core/pre/input/index.html#notes",
        "title": "The input.py module > Notes",
        "section": "Notes",
        "text": "This module manages the different types of input that can be handled and include:\n1. User specified boundary mesh. This will require remeshing.\nMethods are provided to validate the volume and boundary mesh objects (pyvista objects),\nand to get the necessary parts or boundaries for each respective model.\nNotes"
    },
    {
        "objectID": "examples/preprocessor/doc_example_uhc",
        "href": "examples/preprocessor/doc_example_uhc.html#uhc-example",
        "title": "UHC example",
        "section": "UHC example",
        "text": "This example shows how to compute universal heart coordinates (UHC) for\nthe ventricles.\nUHC example"
    },
    {
        "objectID": "examples/preprocessor/doc_example_uhc",
        "href": "examples/preprocessor/doc_example_uhc.html#perform-the-required-imports",
        "title": "UHC example > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, model, and ls-dyna executable (uses DEV-104373-g6d20c20aee).\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/doc_example_uhc",
        "href": "examples/preprocessor/doc_example_uhc.html#instantiate-the-simulator-object",
        "title": "UHC example > Instantiate the simulator object",
        "section": "Instantiate the simulator object",
        "text": "instantiate simulator. Change options where necessary.\nInstantiate the simulator object"
    },
    {
        "objectID": "examples/preprocessor/doc_example_uhc",
        "href": "examples/preprocessor/doc_example_uhc.html#compute-uhc",
        "title": "UHC example > Compute UHC",
        "section": "Compute UHC",
        "text": "Compute UHC using Laplace Dirichlet method.\nThere are several definitions for UHC (see https://github.com/KIT-IBT/Cobiveco).\nHere, a simple approach is taken and the\nDirichlet conditions are shown below. At rotational direction, the start (pi), end (-pi)\nand middle (0) points are defined from four-cavity long axis cut view.\nCompute UHC"
    },
    {
        "objectID": "examples/preprocessor/doc_example_uhc",
        "href": "examples/preprocessor/doc_example_uhc.html#visualization-of-uvcs",
        "title": "UHC example > Visualization of UVCs",
        "section": "Visualization of UVCs",
        "text": "UVC is assigned back to the full model automatically\nAtrial points are padded with NaN’s\nDownload Jupyter notebook: doc_example_uhc.ipynb\nDownload Python source code: doc_example_uhc.py\nDownload zipped: doc_example_uhc.zip\nGallery generated by Sphinx-Gallery\nVisualization of UVCs\nDownload Jupyter notebook: doc_example_uhc.ipynb\nDownload Python source code: doc_example_uhc.py\nDownload zipped: doc_example_uhc.zip"
    },
    {
        "objectID": "api/ansys/heart/core/utils/index",
        "href": "api/ansys/heart/core/utils/index.html#the-utils-package",
        "title": "The utils package",
        "section": "The utils package",
        "text": "The utils package\nutils"
    },
    {
        "objectID": "api/ansys/heart/core/utils/index",
        "href": "api/ansys/heart/core/utils/index.html#summary",
        "title": "The utils package > Summary",
        "section": "Summary",
        "text": "connectivity\nModule containing methods for mesh connectivity.\ndownload\nModule containing methods to download cases from public databases.\nfluent_reader\nModule containing functions to read/write fluent meshes in HDF5 format.\nlandmark_utils\nModule for computing heart anatomical landmarks.\nvtk_utils\nModule contains methods for mesh operations related to the vtk library.\nSummary\nconnectivity\ndownload\nfluent_reader\nlandmark_utils\nvtk_utils"
    },
    {
        "objectID": "api/ansys/heart/core/utils/index",
        "href": "api/ansys/heart/core/utils/index.html#description",
        "title": "The utils package > Description",
        "section": "Description",
        "text": "Subpackage containing various utils.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EPAnalysis",
        "href": "api/ansys/heart/core/settings/settings/EPAnalysis.html#epanalysis",
        "title": "EPAnalysis",
        "section": "EPAnalysis",
        "text": "Bases: Analysis\nClass for EP analysis settings.\nEPAnalysis\nEPAnalysis\nAnalysis"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EPAnalysis",
        "href": "api/ansys/heart/core/settings/settings/EPAnalysis.html#ansys.heart.core.settings.settings.EPAnalysis",
        "title": "EPAnalysis > EPAnalysis > EPAnalysis",
        "section": "EPAnalysis > EPAnalysis",
        "text": "class ansys.heart.core.settings.settings.EPAnalysis\n\nBases: Analysis\n\nClass for EP analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EPAnalysis",
        "href": "api/ansys/heart/core/settings/settings/EPAnalysis.html#overview",
        "title": "EPAnalysis > Overview",
        "section": "Overview",
        "text": "solvertype\nOverview\nsolvertype"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EPAnalysis",
        "href": "api/ansys/heart/core/settings/settings/EPAnalysis.html#import-detail",
        "title": "EPAnalysis > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EPAnalysis",
        "href": "api/ansys/heart/core/settings/settings/EPAnalysis.html#attribute-detail",
        "title": "EPAnalysis > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EPAnalysis",
        "href": "api/ansys/heart/core/settings/settings/EPAnalysis.html#EPAnalysis.solvertype",
        "title": "EPAnalysis > Attribute detail > solvertype",
        "section": "Attribute detail > solvertype",
        "text": "EPAnalysis.solvertype: Literal['Monodomain', 'Eikonal', 'ReactionEikonal'] = 'Monodomain'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#logger",
        "title": "Logger",
        "section": "Logger",
        "text": "Logger used for each PyAnsys Heart session.\nLogging level to filter the message severity allowed in the logger.\nThe default is logging.DEBUG.\nWrite log messages to a file. The default is False.\nWrite log messages into the standard output. The default is\nTrue.\nName of the file where log messages are written to.\nThe default is FILE_NAME.\nThis class allows you to add handlers to the logger to output to a file or\nstandard output.\nDemonstrate logger usage from a PyAnsys Heart instance. This is automatically\ncreated when creating an PyAnsys Heart instance.\nImport the global PyAnsys Heart logger and add a file output handler.\nLogger\nLogger\npython:int\noptional\nlogging.DEBUG\noptional\nFalse\noptional\nTrue\npython:str\noptional\nFILE_NAME"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#ansys.heart.core.logger.Logger",
        "title": "Logger > Logger > Logger",
        "section": "Logger > Logger",
        "text": "class ansys.heart.core.logger.Logger(level: LOG_LEVEL_TYPE = logging.DEBUG, to_file: bool = False, to_stdout: bool = True, filename: str = FILE_NAME)\n\nLogger used for each PyAnsys Heart session.\n\nParameters\n\nlevel\n\npython:int, optional\n\nLogging level to filter the message severity allowed in the logger.\nThe default is logging.DEBUG.\n\nto_file\n\nbool, optional\n\nWrite log messages to a file. The default is False.\n\nto_stdout\n\nbool, optional\n\nWrite log messages into the standard output. The default is\nTrue.\n\nfilename\n\npython:str, optional\n\nName of the file where log messages are written to.\nThe default is FILE_NAME.\n\nNotes\n\nThis class allows you to add handlers to the logger to output to a file or\nstandard output.\n\nExamples\n\nDemonstrate logger usage from a PyAnsys Heart instance. This is automatically\ncreated when creating an PyAnsys Heart instance.\n\nImport the global PyAnsys Heart logger and add a file output handler.\n\n>>> import os\n>>> from ansys.heart.core import LOG\n>>> file_path = os.path.join(os.getcwd(), \"PyAnsys Heart.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#overview",
        "title": "Logger > Overview",
        "section": "Overview",
        "text": "log_to_file\nAdd file handler to logger.\nlog_to_stdout\nAdd standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nadd_child_logger\nAdd a child logger to the main logger.\nadd_handling_uncaught_expections\nRedirect the output of an exception to the logger.\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__\nOverload the access method by item for the Logger class.\nOverview\nlog_to_file\nlog_to_stdout\nsetLevel\nadd_child_logger\nadd_handling_uncaught_expections\nfile_handler\nstd_out_handler\nlogger\nlevel\ndebug\ninfo\nwarning\nerror\ncritical\nlog\n__getitem__\nLogger"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#import-detail",
        "title": "Logger > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#attribute-detail",
        "title": "Logger > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.file_handler",
        "title": "Logger > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "Logger.file_handler: logging.FileHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.std_out_handler",
        "title": "Logger > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "Logger.std_out_handler: logging.StreamHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.logger",
        "title": "Logger > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "Logger.logger: logging.Logger\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.level",
        "title": "Logger > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "Logger.level = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.debug",
        "title": "Logger > Attribute detail > debug",
        "section": "Attribute detail > debug",
        "text": "Logger.debug\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.info",
        "title": "Logger > Attribute detail > info",
        "section": "Attribute detail > info",
        "text": "Logger.info\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.warning",
        "title": "Logger > Attribute detail > warning",
        "section": "Attribute detail > warning",
        "text": "Logger.warning\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.error",
        "title": "Logger > Attribute detail > error",
        "section": "Attribute detail > error",
        "text": "Logger.error\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.critical",
        "title": "Logger > Attribute detail > critical",
        "section": "Attribute detail > critical",
        "text": "Logger.critical\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.log",
        "title": "Logger > Attribute detail > log",
        "section": "Attribute detail > log",
        "text": "Logger.log\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#method-detail",
        "title": "Logger > Method detail",
        "section": "Method detail",
        "text": "Add file handler to logger.\nName of the file where the logs are recorded. By default\n'PyAnsys Heart.log'.\nLevel of logging. By default 'DEBUG'.\nFlag indicating whether to remove all other file handlers, by default False\nWrite to PyAnsys Heart.log in the current working directory.\nAdd standard output handler to the logger.\nLevel of logging record. By default  'DEBUG'.\nChange the log level of the object and the attached handlers.\nAdd a child logger to the main logger.\nThis logger is more general than an instance logger which is designed to\ntrack the state of the PyAnsys Heart instances.\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child.\nName of the logger.\nLevel of logging\nLogger class.\nOverload the access method by item for the Logger class.\nRedirect the output of an exception to the logger.\nMethod detail\npython:str\noptional\n'PyAnsys Heart.log'\npython:str\npython:int\noptional\n'DEBUG'\noptional\nPyAnsys Heart.log\npython:str\npython:int\noptional\n'DEBUG'\n_global\npython:str\npython:str\npython:int\noptional\nlogging.logger\nLogger"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.log_to_file",
        "title": "Logger > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "Logger.log_to_file(filename: str = FILE_NAME, level: LOG_LEVEL_TYPE = LOG_LEVEL_FILE, remove_other_file_handlers: bool = False) -> None\n\nAdd file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. By default\n'PyAnsys Heart.log'.\n\nlevel\n\npython:str or python:int, optional\n\nLevel of logging. By default 'DEBUG'.\n\nremove_other_file_handlers\n\nbool, optional\n\nFlag indicating whether to remove all other file handlers, by default False\n\nExamples\n\nWrite to PyAnsys Heart.log in the current working directory.\n\n>>> from ansys.heart.core import LOG\n>>> import os\n>>> file_path = os.path.join(os.getcwd(), \"PyAnsys Heart.log\")\n>>> LOG.log_to_file(file_path)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.log_to_stdout",
        "title": "Logger > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "Logger.log_to_stdout(level: LOG_LEVEL_TYPE = LOG_LEVEL_STDOUT)\n\nAdd standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str or python:int, optional\n\nLevel of logging record. By default  'DEBUG'.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.setLevel",
        "title": "Logger > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "Logger.setLevel(level: LOG_LEVEL_TYPE = 'DEBUG')\n\nChange the log level of the object and the attached handlers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.add_child_logger",
        "title": "Logger > Method detail > add_child_logger",
        "section": "Method detail > add_child_logger",
        "text": "Logger.add_child_logger(suffix: str, level: LOG_LEVEL_TYPE | None = None)\n\nAdd a child logger to the main logger.\n\nThis logger is more general than an instance logger which is designed to\ntrack the state of the PyAnsys Heart instances.\n\nIf the logging level is in the arguments, a new logger with a reference\nto the _global logger handlers is created instead of a child.\n\nParameters\n\nsuffix\n\npython:str\n\nName of the logger.\n\nlevel\n\npython:str or python:int, optional\n\nLevel of logging\n\nReturns\n\nlogging.logger\n\nLogger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.__getitem__",
        "title": "Logger > Method detail > __getitem__",
        "section": "Method detail > __getitem__",
        "text": "Logger.__getitem__(key)\n\nOverload the access method by item for the Logger class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/Logger",
        "href": "api/ansys/heart/core/logger/Logger.html#Logger.add_handling_uncaught_expections",
        "title": "Logger > Method detail > add_handling_uncaught_expections",
        "section": "Method detail > add_handling_uncaught_expections",
        "text": "Logger.add_handling_uncaught_expections(logger: logging.Logger)\n\nRedirect the output of an exception to the logger.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#release-notes",
        "title": "Release notes",
        "section": "Release notes",
        "text": "Release notes"
    },
    {
        "objectID": "changelog",
        "href": "changelog.html#0110-april-07-2025",
        "title": "Release notes > 0.11.0 (April 07, 2025)",
        "section": "0.11.0 (April 07, 2025)",
        "text": "add changelog actions and changelog documentation\n#908\nhandle incompressibility consistently\n#909\nrefactor-beam-networks\n#932\nadd D-RBM method for left ventricle model\n#933\ncompute ventricle thickening\n#945\nset stiffness damping\n#980\nadd module for custom exceptions\n#990\nAppend user k files\n#992\nadd-EMCONTROLTIMESTEP-in-ep\n#922\nfix cap types and cap type check\n#935\nrefactor part id assignment post wrap\n#946\nsyntax error\n#950\ntox file correction and improvement\n#956\ntest_ep_postprocessor tests on Github runner\n#971\nreassign part ids when no orphan cells are found\n#983\nshutil.which for wsl\n#995\npinned versions for direct dependencies\n#996\nCleanup\n#923\nadd the landing page\n#949\nrefactor user guide and getting started\n#955\ncontributing guide improvement\n#961\nupdate docstrings and standardize periods\n#991\nbump tox from 4.24.1 to 4.24.2\n#910\nbump ansys-dpf-core from 0.13.4 to 0.13.6\n#912\ncleanup dependencies list\n#913\nbump ansys-fluent-core from 0.29.0 to 0.30.0\n#940\nupdate numpy requirement from <=2.2.3 to <=2.2.4\n#941\nbump the docs-deps group across 1 directory with 2 updates\n#954\nself hosted runner\n#904\nworkflow improvements\n#951\nmark and cleanup tests that require dpf\n#981\nrelease to private pypi\n#1019\nclean up deprecated dump model\n#914\nvolume meshing and mesher module\n#915\nname of Material 295\n#918\ncleanup and introduce new environment variables to manage automation\n#919\nvolume meshing and mesher module (#915)\n#921\ncreate misc module\n#924\nrename landmarks module to landmark_utils\n#927\nmove slerp methods to misc\n#930\ndownload module\n#934\nrename custom keywords and keywords_module\n#936\nuhcwriter\n#937\nrename vtkmethods to vtk_utils\n#938\ncleanup paths in examples\n#943\nmecha writer clean up\n#944\nadd method to get fluent ui-mode\n#957\nmove symbols to dpf utils and cleanup\n#960\nreplace wget by httpx\n#962\ncleanup and refactor preprocessor module\n#969\nrename helpers subpackage and downloader module\n#970\ndynain file in mechanical simulator\n#977\nboundary type and anatomy axis exception\n#988\nremove deprecated arguments and methods\n#998\nmove packages to core\n#1014\nchange structure of tests\n#1017\n0.11.0 (April 07, 2025)"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#hgofiber",
        "title": "HGOFiber",
        "section": "HGOFiber",
        "text": "Define HGO type fiber from k1 and k2.\nHGOFiber\nHGOFiber"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#ansys.heart.core.settings.material.material.ANISO.HGOFiber",
        "title": "HGOFiber > HGOFiber > HGOFiber",
        "section": "HGOFiber > HGOFiber",
        "text": "class ansys.heart.core.settings.material.material.ANISO.HGOFiber\n\nDefine HGO type fiber from k1 and k2.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#overview",
        "title": "HGOFiber > Overview",
        "section": "Overview",
        "text": "k1\nk1 for HGO model.\nk2\nk2 for HGO model.\na\nFiber dispersion tensor parameter.\nb\nFiber dispersion tensor parameter.\nOverview\nk1\nk2\na\nb"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#import-detail",
        "title": "HGOFiber > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#attribute-detail",
        "title": "HGOFiber > Attribute detail",
        "section": "Attribute detail",
        "text": "k1 for HGO model.\nk2 for HGO model.\nFiber dispersion tensor parameter.\nFiber dispersion tensor parameter.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#HGOFiber.k1",
        "title": "HGOFiber > Attribute detail > k1",
        "section": "Attribute detail > k1",
        "text": "HGOFiber.k1: float = None\n\nk1 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#HGOFiber.k2",
        "title": "HGOFiber > Attribute detail > k2",
        "section": "Attribute detail > k2",
        "text": "HGOFiber.k2: float = None\n\nk2 for HGO model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#HGOFiber.a",
        "title": "HGOFiber > Attribute detail > a",
        "section": "Attribute detail > a",
        "text": "HGOFiber.a: float = 0.0\n\nFiber dispersion tensor parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.HGOFiber.html#HGOFiber.b",
        "title": "HGOFiber > Attribute detail > b",
        "section": "Attribute detail > b",
        "text": "HGOFiber.b: float = 1.0\n\nFiber dispersion tensor parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#stimulation",
        "title": "Stimulation",
        "section": "Stimulation",
        "text": "Bases: Settings\nStimulation settings.\nStimulation\nStimulation\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#ansys.heart.core.settings.settings.Stimulation",
        "title": "Stimulation > Stimulation > Stimulation",
        "section": "Stimulation > Stimulation",
        "text": "class ansys.heart.core.settings.settings.Stimulation\n\nBases: Settings\n\nStimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#overview",
        "title": "Stimulation > Overview",
        "section": "Overview",
        "text": "node_ids\nt_start\nperiod\nduration\namplitude\n__setattr__\nSet attributes.\nOverview\nnode_ids\nt_start\nperiod\nduration\namplitude\n__setattr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#import-detail",
        "title": "Stimulation > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#attribute-detail",
        "title": "Stimulation > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#Stimulation.node_ids",
        "title": "Stimulation > Attribute detail > node_ids",
        "section": "Attribute detail > node_ids",
        "text": "Stimulation.node_ids: List[int] = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#Stimulation.t_start",
        "title": "Stimulation > Attribute detail > t_start",
        "section": "Attribute detail > t_start",
        "text": "Stimulation.t_start: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#Stimulation.period",
        "title": "Stimulation > Attribute detail > period",
        "section": "Attribute detail > period",
        "text": "Stimulation.period: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#Stimulation.duration",
        "title": "Stimulation > Attribute detail > duration",
        "section": "Attribute detail > duration",
        "text": "Stimulation.duration: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#Stimulation.amplitude",
        "title": "Stimulation > Attribute detail > amplitude",
        "section": "Attribute detail > amplitude",
        "text": "Stimulation.amplitude: pint.Quantity\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#method-detail",
        "title": "Stimulation > Method detail",
        "section": "Method detail",
        "text": "Set attributes.\nAttribute name.\nAttribute value.\nMethod detail\npython:str\n_type_"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Stimulation",
        "href": "api/ansys/heart/core/settings/settings/Stimulation.html#Stimulation.__setattr__",
        "title": "Stimulation > Method detail > __setattr__",
        "section": "Method detail > __setattr__",
        "text": "Stimulation.__setattr__(__name: str, __value) -> None\n\nSet attributes.\n\nParameters\n\n__name\n\npython:str\n\nAttribute name.\n\n__value\n\n_type_\n\nAttribute value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/SupportedDPFServerNotFoundError",
        "href": "api/ansys/heart/core/exceptions/SupportedDPFServerNotFoundError.html#supporteddpfservernotfounderror",
        "title": "SupportedDPFServerNotFoundError",
        "section": "SupportedDPFServerNotFoundError",
        "text": "Bases: Exception\nException raised when no supported DPF server is found.\nSupportedDPFServerNotFoundError\nSupportedDPFServerNotFoundError\nException"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/SupportedDPFServerNotFoundError",
        "href": "api/ansys/heart/core/exceptions/SupportedDPFServerNotFoundError.html#ansys.heart.core.exceptions.SupportedDPFServerNotFoundError",
        "title": "SupportedDPFServerNotFoundError > SupportedDPFServerNotFoundError > SupportedDPFServerNotFoundError",
        "section": "SupportedDPFServerNotFoundError > SupportedDPFServerNotFoundError",
        "text": "exception ansys.heart.core.exceptions.SupportedDPFServerNotFoundError\n\nBases: Exception\n\nException raised when no supported DPF server is found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/SupportedDPFServerNotFoundError",
        "href": "api/ansys/heart/core/exceptions/SupportedDPFServerNotFoundError.html#import-detail",
        "title": "SupportedDPFServerNotFoundError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "examples/preprocessor/index",
        "href": "examples/preprocessor/index.html#preprocessor-examples",
        "title": "Preprocessor examples",
        "section": "Preprocessor examples",
        "text": "These examples show you how you can use the preprocessor module\nto generate different kinds of heart models. For instance, a\nbiventricular, four chamber, or full heart model.\nsphx_glr_examples_preprocessor_doc_download_case.py\nsphx_glr_examples_preprocessor_doc_example_uhc.py\nsphx_glr_examples_preprocessor_doc_example_atrial_fiber.py\nsphx_glr_examples_preprocessor_doc_preprocess_fullheart_rodero_01.py\nsphx_glr_examples_preprocessor_doc_preprocess_fourchamber.py\nsphx_glr_examples_preprocessor_doc_example_stimulation.py\nsphx_glr_examples_preprocessor_doc_preprocess_truncated_LV.py\nsphx_glr_examples_preprocessor_doc_demo_material.py\nPreprocessor examples"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#surfacemesh",
        "title": "SurfaceMesh",
        "section": "SurfaceMesh",
        "text": "Bases: pyvista.PolyData\nSurface class.\nSurfaceMesh\nSurfaceMesh\npyvista.PolyData"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#ansys.heart.core.objects.SurfaceMesh",
        "title": "SurfaceMesh > SurfaceMesh > SurfaceMesh",
        "section": "SurfaceMesh > SurfaceMesh",
        "text": "class ansys.heart.core.objects.SurfaceMesh(var_inp: pyvista.PolyData | numpy.ndarray | list | str | pathlib.Path = None, name: str = None, triangles: numpy.ndarray = None, nodes: numpy.ndarray = None, id: int = None, **kwargs)\n\nBases: pyvista.PolyData\n\nSurface class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#overview",
        "title": "SurfaceMesh > Overview",
        "section": "Overview",
        "text": "force_normals_inwards\nForce the cell ordering of a the closed surface such that normals point inward.\nnodes\nNode coordinates.\ntriangles\nTriangular faces of the surface num_faces x 3.\ntriangles_global\nGlobal triangle ids.\nboundary_edges\nGet boundary edges of self.\nboundary_edges_global\nGlobal point ids of boundary edges.\nnode_ids_triangles\nLocal node ids - sorted by earliest occurrence.\nglobal_node_ids_triangles\nRetrieve the global node ids from point data.\nname\nName of the surface.\nid\nID of surface.\nOverview\nforce_normals_inwards\nnodes\ntriangles\ntriangles_global\nboundary_edges\nboundary_edges_global\nnode_ids_triangles\nglobal_node_ids_triangles\nname\nid"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#import-detail",
        "title": "SurfaceMesh > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#property-detail",
        "title": "SurfaceMesh > Property detail",
        "section": "Property detail",
        "text": "Node coordinates.\nTriangular faces of the surface num_faces x 3.\nGlobal triangle ids.\nGet boundary edges of self.\nGlobal point ids of boundary edges.\nLocal node ids - sorted by earliest occurrence.\nRetrieve the global node ids from point data.\nProperty detail\nTries\nto\nuse\npoint_data\nto\nretrieve\ntriangle\ndefinitions\nin\nglobal"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.nodes",
        "title": "SurfaceMesh > Property detail > nodes",
        "section": "Property detail > nodes",
        "text": "property SurfaceMesh.nodes\n\nNode coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.triangles",
        "title": "SurfaceMesh > Property detail > triangles",
        "section": "Property detail > triangles",
        "text": "property SurfaceMesh.triangles\n\nTriangular faces of the surface num_faces x 3.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.triangles_global",
        "title": "SurfaceMesh > Property detail > triangles_global",
        "section": "Property detail > triangles_global",
        "text": "property SurfaceMesh.triangles_global\n\nGlobal triangle ids.\n\nReturns\n\nTries to use point_data[“_global-point-ids”] to retrieve\n\n\n\ntriangle definitions in global ids.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.boundary_edges",
        "title": "SurfaceMesh > Property detail > boundary_edges",
        "section": "Property detail > boundary_edges",
        "text": "property SurfaceMesh.boundary_edges\n\nGet boundary edges of self.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.boundary_edges_global",
        "title": "SurfaceMesh > Property detail > boundary_edges_global",
        "section": "Property detail > boundary_edges_global",
        "text": "property SurfaceMesh.boundary_edges_global\n\nGlobal point ids of boundary edges.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.node_ids_triangles",
        "title": "SurfaceMesh > Property detail > node_ids_triangles",
        "section": "Property detail > node_ids_triangles",
        "text": "property SurfaceMesh.node_ids_triangles: numpy.ndarray\n\nLocal node ids - sorted by earliest occurrence.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.global_node_ids_triangles",
        "title": "SurfaceMesh > Property detail > global_node_ids_triangles",
        "section": "Property detail > global_node_ids_triangles",
        "text": "property SurfaceMesh.global_node_ids_triangles\n\nRetrieve the global node ids from point data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#attribute-detail",
        "title": "SurfaceMesh > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of the surface.\nID of surface.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.name",
        "title": "SurfaceMesh > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "SurfaceMesh.name = None\n\nName of the surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.id",
        "title": "SurfaceMesh > Attribute detail > id",
        "section": "Attribute detail > id",
        "text": "SurfaceMesh.id: int = None\n\nID of surface.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#method-detail",
        "title": "SurfaceMesh > Method detail",
        "section": "Method detail",
        "text": "Force the cell ordering of a the closed surface such that normals point inward.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/SurfaceMesh",
        "href": "api/ansys/heart/core/objects/SurfaceMesh.html#SurfaceMesh.force_normals_inwards",
        "title": "SurfaceMesh > Method detail > force_normals_inwards",
        "section": "Method detail > force_normals_inwards",
        "text": "SurfaceMesh.force_normals_inwards()\n\nForce the cell ordering of a the closed surface such that normals point inward.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#tentusscherendo",
        "title": "TentusscherEndo",
        "section": "TentusscherEndo",
        "text": "Bases: Tentusscher\nHold data for Tentusscher cell model in its endocardium version.\nTentusscherEndo\nTentusscherEndo\nTentusscher"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#ansys.heart.core.settings.material.ep_material.CellModel.TentusscherEndo",
        "title": "TentusscherEndo > TentusscherEndo > TentusscherEndo",
        "section": "TentusscherEndo > TentusscherEndo",
        "text": "class ansys.heart.core.settings.material.ep_material.CellModel.TentusscherEndo\n\nBases: Tentusscher\n\nHold data for Tentusscher cell model in its endocardium version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#overview",
        "title": "TentusscherEndo > Overview",
        "section": "Overview",
        "text": "gks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#import-detail",
        "title": "TentusscherEndo > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#attribute-detail",
        "title": "TentusscherEndo > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.gks",
        "title": "TentusscherEndo > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "TentusscherEndo.gks: float = 0.392\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.gto",
        "title": "TentusscherEndo > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "TentusscherEndo.gto: float = 0.073\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.v",
        "title": "TentusscherEndo > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "TentusscherEndo.v: float = -86.709\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.ki",
        "title": "TentusscherEndo > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "TentusscherEndo.ki: float = 138.4\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.nai",
        "title": "TentusscherEndo > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "TentusscherEndo.nai: float = 10.355\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.cai",
        "title": "TentusscherEndo > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "TentusscherEndo.cai: float = 0.00013\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.cass",
        "title": "TentusscherEndo > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "TentusscherEndo.cass: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.casr",
        "title": "TentusscherEndo > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "TentusscherEndo.casr: float = 3.715\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.rpri",
        "title": "TentusscherEndo > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "TentusscherEndo.rpri: float = 0.9068\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.xr1",
        "title": "TentusscherEndo > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "TentusscherEndo.xr1: float = 0.00448\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.xr2",
        "title": "TentusscherEndo > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "TentusscherEndo.xr2: float = 0.476\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.xs",
        "title": "TentusscherEndo > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "TentusscherEndo.xs: float = 0.0087\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.m",
        "title": "TentusscherEndo > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "TentusscherEndo.m: float = 0.00155\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.h",
        "title": "TentusscherEndo > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "TentusscherEndo.h: float = 0.7573\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.j",
        "title": "TentusscherEndo > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "TentusscherEndo.j: float = 0.7225\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.d",
        "title": "TentusscherEndo > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "TentusscherEndo.d: float = 3.164e-05\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.f",
        "title": "TentusscherEndo > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "TentusscherEndo.f: float = 0.8009\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.f2",
        "title": "TentusscherEndo > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "TentusscherEndo.f2: float = 0.9778\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.fcass",
        "title": "TentusscherEndo > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "TentusscherEndo.fcass: float = 0.9953\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.s",
        "title": "TentusscherEndo > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "TentusscherEndo.s: float = 0.3212\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEndo.html#TentusscherEndo.r",
        "title": "TentusscherEndo > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "TentusscherEndo.r: float = 2.235e-08\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model5",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model5.html#model5",
        "title": "Model5",
        "section": "Model5",
        "text": "Hold data for active model 5.\nModel5\nModel5"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model5",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model5.html#ansys.heart.core.settings.material.material.ActiveModel.Model5",
        "title": "Model5 > Model5 > Model5",
        "section": "Model5 > Model5",
        "text": "class ansys.heart.core.settings.material.material.ActiveModel.Model5\n\nHold data for active model 5.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model5",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model5.html#import-detail",
        "title": "Model5 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#the-connectivitypy-module",
        "title": "The connectivity.py module",
        "section": "The connectivity.py module",
        "text": "The connectivity.py module\nconnectivity.py"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#summary",
        "title": "The connectivity.py module > Summary",
        "section": "Summary",
        "text": "get_faces_tetra\nGet faces that make up the tetrahedrons.\nface_tetra_connectivity\nCompute the tetra-face connectivity tables.\nget_face_type\nEstablish face type. Either boundary faces or interior faces.\nget_edges_from_triangles\nGenerate an array of edges from a array of triangles.\nget_free_edges\nGet the boundary edges that are only referenced once.\nedge_connectivity\nGroup edges by connectivity.\nremove_triangle_layers_from_trimesh\nIdentify triangles connected to the boundary, and removes these from the array.\nSummary\nget_faces_tetra\nface_tetra_connectivity\nget_face_type\nget_edges_from_triangles\nget_free_edges\nedge_connectivity\nremove_triangle_layers_from_trimesh"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#description",
        "title": "The connectivity.py module > Description",
        "section": "Description",
        "text": "Module containing methods for mesh connectivity.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#module-detail",
        "title": "The connectivity.py module > Module detail",
        "section": "Module detail",
        "text": "Get faces that make up the tetrahedrons.\nCompute the tetra-face connectivity tables.\nEstablish face type. Either boundary faces or interior faces.\nArray with face definitions\nArray describing to which cells each of the faces is connected to, e.g. np.array([c0, c1])\nType of face. Either interior (face_type = 1) or boundary (face_type = 2)\nGenerate an array of edges from a array of triangles.\nGet the boundary edges that are only referenced once.\nArray of triangles\nFlag indicating whether to return the free triangles, by default False\nNumpy array with the free edges\nNumpy array with the triangles that use these free edges\nGroup edges by connectivity.\nNumEdges x 2 Numpy array with edge definitions\n“open”: edge group is open-ended\n“closed”: edge group forms closed edge loop\nFlag indicating whether to sort any closed edge loops, by default False\nGrouped edges by connectivity.\nType of edge group. ‘open’ ended or ‘closed’.\nUses an implementation of Dept-first search: https://en.wikipedia.org/wiki/Depth-first_search\nhttps://www.educative.io/answers/how-to-implement-depth-first-search-in-python\nPerformance is not tested so may not be suitable for large arrays of edges.\nIdentify triangles connected to the boundary, and removes these from the array.\nArray of triangles.\nNumber of iterations, by default 1.\nReduced set of triangles.\nModule detail\nnp.ndarray\nnp.ndarray\nnp.ndarray\nnp.ndarray\noptional\nnp.ndarray\nnp.ndarray\noptional\nnp.array\noptional\noptional\nnp.ndarray\npython:list\npython:str\noptional\nnp.ndarray\npython:int\noptional\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#connectivity.get_faces_tetra",
        "title": "The connectivity.py module > Module detail > get_faces_tetra",
        "section": "Module detail > get_faces_tetra",
        "text": "connectivity.get_faces_tetra(tetra: numpy.ndarray) -> numpy.ndarray\n\nGet faces that make up the tetrahedrons.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#connectivity.face_tetra_connectivity",
        "title": "The connectivity.py module > Module detail > face_tetra_connectivity",
        "section": "Module detail > face_tetra_connectivity",
        "text": "connectivity.face_tetra_connectivity(tetra: numpy.ndarray) -> Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nCompute the tetra-face connectivity tables.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#connectivity.get_face_type",
        "title": "The connectivity.py module > Module detail > get_face_type",
        "section": "Module detail > get_face_type",
        "text": "connectivity.get_face_type(faces: numpy.ndarray, face_cell_connectivity: numpy.ndarray) -> numpy.ndarray\n\nEstablish face type. Either boundary faces or interior faces.\n\nParameters\n\nfaces\n\nnp.ndarray\n\nArray with face definitions\n\nface_cell_connectivity\n\nnp.ndarray\n\nArray describing to which cells each of the faces is connected to, e.g. np.array([c0, c1])\n\nReturns\n\nnp.ndarray\n\nType of face. Either interior (face_type = 1) or boundary (face_type = 2)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#connectivity.get_edges_from_triangles",
        "title": "The connectivity.py module > Module detail > get_edges_from_triangles",
        "section": "Module detail > get_edges_from_triangles",
        "text": "connectivity.get_edges_from_triangles(triangles: numpy.ndarray) -> numpy.ndarray\n\nGenerate an array of edges from a array of triangles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#connectivity.get_free_edges",
        "title": "The connectivity.py module > Module detail > get_free_edges",
        "section": "Module detail > get_free_edges",
        "text": "connectivity.get_free_edges(triangles: numpy.ndarray, return_free_triangles: bool = False) -> numpy.ndarray | Tuple[numpy.ndarray, numpy.ndarray] | None\n\nGet the boundary edges that are only referenced once.\n\nParameters\n\ntriangles\n\nnp.ndarray\n\nArray of triangles\n\nreturn_free_triangles\n\nbool, optional\n\nFlag indicating whether to return the free triangles, by default False\n\nReturns\n\nfree_edges\n\nnp.ndarray\n\nNumpy array with the free edges\n\nfree_triangles: np.ndarray, optional\n\nNumpy array with the triangles that use these free edges\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#connectivity.edge_connectivity",
        "title": "The connectivity.py module > Module detail > edge_connectivity",
        "section": "Module detail > edge_connectivity",
        "text": "connectivity.edge_connectivity(edges: numpy.ndarray, return_type: bool = False, sort_closed: bool = False) -> numpy.ndarray\n\nGroup edges by connectivity.\n\nParameters\n\nedges\n\nnp.array\n\nNumEdges x 2 Numpy array with edge definitions\n\nreturn_type\n\nbool, optional\n\nFlag indicating whether to return the type of the edge group, by default False:\n\n“open”: edge group is open-ended\n“closed”: edge group forms closed edge loop\n\nsort_closed\n\nbool, optional\n\nFlag indicating whether to sort any closed edge loops, by default False\n\nReturns\n\nedge_groups\n\nnp.ndarray\n\nGrouped edges by connectivity.\n\ngroup_types\n\npython:list[python:str], optional\n\nType of edge group. ‘open’ ended or ‘closed’.\n\nNotes\n\nUses an implementation of Dept-first search: https://en.wikipedia.org/wiki/Depth-first_search\nhttps://www.educative.io/answers/how-to-implement-depth-first-search-in-python\nPerformance is not tested so may not be suitable for large arrays of edges.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/connectivity/index",
        "href": "api/ansys/heart/core/utils/connectivity/index.html#connectivity.remove_triangle_layers_from_trimesh",
        "title": "The connectivity.py module > Module detail > remove_triangle_layers_from_trimesh",
        "section": "Module detail > remove_triangle_layers_from_trimesh",
        "text": "connectivity.remove_triangle_layers_from_trimesh(triangles: numpy.ndarray, iters: int = 1) -> numpy.ndarray\n\nIdentify triangles connected to the boundary, and removes these from the array.\n\nParameters\n\ntriangles\n\nnp.ndarray\n\nArray of triangles.\n\niters\n\npython:int, optional\n\nNumber of iterations, by default 1.\n\nReturns\n\nnp.ndarray\n\nReduced set of triangles.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model4",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model4.html#model4",
        "title": "Model4",
        "section": "Model4",
        "text": "Hold data for active model 4.\nModel4\nModel4"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model4",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model4.html#ansys.heart.core.settings.material.material.ActiveModel.Model4",
        "title": "Model4 > Model4 > Model4",
        "section": "Model4 > Model4",
        "text": "class ansys.heart.core.settings.material.material.ActiveModel.Model4\n\nHold data for active model 4.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model4",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model4.html#import-detail",
        "title": "Model4 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#analysis",
        "title": "Analysis",
        "section": "Analysis",
        "text": "Bases: Settings\nClass for analysis settings.\nAnalysis\nAnalysis\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#ansys.heart.core.settings.settings.Analysis",
        "title": "Analysis > Analysis > Analysis",
        "section": "Analysis > Analysis",
        "text": "class ansys.heart.core.settings.settings.Analysis\n\nBases: Settings\n\nClass for analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#overview",
        "title": "Analysis > Overview",
        "section": "Overview",
        "text": "end_time\nEnd time of the simulation.\ndtmin\nMinimum time-step of simulation.\ndtmax\nMaximum time-step of simulation.\ndt_d3plot\nTime-step of d3plot export.\ndt_icvout\nTime-step of icvout export.\nglobal_damping\nGlobal damping constant.\nstiffness_damping\nStiffness damping constant.\nOverview\nend_time\ndtmin\ndtmax\ndt_d3plot\ndt_icvout\nglobal_damping\nstiffness_damping"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#import-detail",
        "title": "Analysis > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#attribute-detail",
        "title": "Analysis > Attribute detail",
        "section": "Attribute detail",
        "text": "End time of the simulation.\nMinimum time-step of simulation.\nMaximum time-step of simulation.\nTime-step of d3plot export.\nTime-step of icvout export.\nGlobal damping constant.\nStiffness damping constant.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#Analysis.end_time",
        "title": "Analysis > Attribute detail > end_time",
        "section": "Attribute detail > end_time",
        "text": "Analysis.end_time: pint.Quantity\n\nEnd time of the simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#Analysis.dtmin",
        "title": "Analysis > Attribute detail > dtmin",
        "section": "Attribute detail > dtmin",
        "text": "Analysis.dtmin: pint.Quantity\n\nMinimum time-step of simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#Analysis.dtmax",
        "title": "Analysis > Attribute detail > dtmax",
        "section": "Attribute detail > dtmax",
        "text": "Analysis.dtmax: pint.Quantity\n\nMaximum time-step of simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#Analysis.dt_d3plot",
        "title": "Analysis > Attribute detail > dt_d3plot",
        "section": "Attribute detail > dt_d3plot",
        "text": "Analysis.dt_d3plot: pint.Quantity\n\nTime-step of d3plot export.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#Analysis.dt_icvout",
        "title": "Analysis > Attribute detail > dt_icvout",
        "section": "Attribute detail > dt_icvout",
        "text": "Analysis.dt_icvout: pint.Quantity\n\nTime-step of icvout export.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#Analysis.global_damping",
        "title": "Analysis > Attribute detail > global_damping",
        "section": "Attribute detail > global_damping",
        "text": "Analysis.global_damping: pint.Quantity\n\nGlobal damping constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Analysis",
        "href": "api/ansys/heart/core/settings/settings/Analysis.html#Analysis.stiffness_damping",
        "title": "Analysis > Attribute detail > stiffness_damping",
        "section": "Attribute detail > stiffness_damping",
        "text": "Analysis.stiffness_damping: pint.Quantity\n\nStiffness damping constant.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#material",
        "title": "Material",
        "section": "Material",
        "text": "Bases: Settings\nClass for storing material settings.\nMaterial\nMaterial\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#ansys.heart.core.settings.settings.Material",
        "title": "Material > Material > Material",
        "section": "Material > Material",
        "text": "class ansys.heart.core.settings.settings.Material\n\nBases: Settings\n\nClass for storing material settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#overview",
        "title": "Material > Overview",
        "section": "Overview",
        "text": "myocardium\nMyocardium material.\npassive\nPassive material, e.g. vessel wall.\ncap\nCap material.\nOverview\nmyocardium\npassive\ncap"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#import-detail",
        "title": "Material > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#attribute-detail",
        "title": "Material > Attribute detail",
        "section": "Attribute detail",
        "text": "Myocardium material.\nPassive material, e.g. vessel wall.\nCap material.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#Material.myocardium",
        "title": "Material > Attribute detail > myocardium",
        "section": "Attribute detail > myocardium",
        "text": "Material.myocardium: AttrDict = None\n\nMyocardium material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#Material.passive",
        "title": "Material > Attribute detail > passive",
        "section": "Attribute detail > passive",
        "text": "Material.passive: AttrDict = None\n\nPassive material, e.g. vessel wall.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Material",
        "href": "api/ansys/heart/core/settings/settings/Material.html#Material.cap",
        "title": "Material > Attribute detail > cap",
        "section": "Attribute detail > cap",
        "text": "Material.cap: AttrDict = None\n\nCap material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/index",
        "href": "api/ansys/heart/core/post/dpf_utils/index.html#the-dpf_utilspy-module",
        "title": "The dpf_utils.py module",
        "section": "The dpf_utils.py module",
        "text": "The dpf_utils.py module\ndpf_utils.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/index",
        "href": "api/ansys/heart/core/post/dpf_utils/index.html#summary",
        "title": "The dpf_utils.py module > Summary",
        "section": "Summary",
        "text": "ICVoutReader\nRead control volume data from binout.\nD3plotReader\nUse DPF to parse d3plot.\nEPpostprocessor\nPostprocess Electrophysiology results.\nD3plotToVTKExporter\nRead d3plot and save deformed mesh.\nSummary\nICVoutReader\nD3plotReader\nEPpostprocessor\nD3plotToVTKExporter"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/index",
        "href": "api/ansys/heart/core/post/dpf_utils/index.html#description",
        "title": "The dpf_utils.py module > Description",
        "section": "Description",
        "text": "D3plot parser using Ansys-dpf.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/index",
        "href": "api/ansys/heart/core/simulator/index.html#the-simulatorpy-module",
        "title": "The simulator.py module",
        "section": "The simulator.py module",
        "text": "The simulator.py module\nsimulator.py"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/index",
        "href": "api/ansys/heart/core/simulator/index.html#summary",
        "title": "The simulator.py module > Summary",
        "section": "Summary",
        "text": "BaseSimulator\nBase class for the simulator.\nEPSimulator\nEP Simulator.\nMechanicsSimulator\nMechanics simulator with imposed active stress.\nEPMechanicsSimulator\nCoupled EP-mechanics simulator with computed Electrophysiology.\nrun_lsdyna\nStandalone function for running LS-DYNA.\nSummary\nBaseSimulator\nEPSimulator\nMechanicsSimulator\nEPMechanicsSimulator\nrun_lsdyna"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/index",
        "href": "api/ansys/heart/core/simulator/index.html#description",
        "title": "The simulator.py module > Description",
        "section": "Description",
        "text": "Simulator module.\nOptions for simulation:\nwith/without fbers.\nwith/without purkinje.\nsimplified EP (imposed activation).\ncoupled electro-mechanics.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/index",
        "href": "api/ansys/heart/core/simulator/index.html#module-detail",
        "title": "The simulator.py module > Module detail",
        "section": "Module detail",
        "text": "Standalone function for running LS-DYNA.\nInput file for LS-DYNA.\nLS-DYNA settings, such as path to executable, executable type,\nplatform, by default None.\nDirectory where to simulate, by default None.\nModule detail\nPath\nDynaSettings\noptional\nNone\nPath\noptional\nNone"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/index",
        "href": "api/ansys/heart/core/simulator/index.html#simulator.run_lsdyna",
        "title": "The simulator.py module > Module detail > run_lsdyna",
        "section": "Module detail > run_lsdyna",
        "text": "simulator.run_lsdyna(path_to_input: pathlib, settings: ansys.heart.core.settings.settings.DynaSettings = None, simulation_directory: pathlib = None)\n\nStandalone function for running LS-DYNA.\n\nParameters\n\npath_to_input\n\nPath\n\nInput file for LS-DYNA.\n\nsettings\n\nDynaSettings, optional\n\nLS-DYNA settings, such as path to executable, executable type,\nplatform, by default None.\n\nsimulation_directory\n\nPath, optional\n\nDirectory where to simulate, by default None.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.html#epmaterial",
        "title": "EPMaterial",
        "section": "EPMaterial",
        "text": "Bases: EPMaterialModel\nEP material module.\nEPMaterial\nEPMaterial\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.html#ansys.heart.core.settings.material.ep_material.EPMaterial",
        "title": "EPMaterial > EPMaterial > EPMaterial",
        "section": "EPMaterial > EPMaterial",
        "text": "class ansys.heart.core.settings.material.ep_material.EPMaterial\n\nBases: EPMaterialModel\n\nEP material module.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.html#import-detail",
        "title": "EPMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.html#classes",
        "title": "EPMaterial > Classes",
        "section": "Classes",
        "text": "Insulator\nInsulator material.\nActive\nHold data for EP material.\nActiveBeam\nHold data for beam active EP material.\nPassive\nHold data for EP passive material.\nDummyMaterial\nJust for initialization.\nClasses\nInsulator\nActive\nActiveBeam\nPassive\nDummyMaterial"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#the-curvepy-module",
        "title": "The curve.py module",
        "section": "The curve.py module",
        "text": "The curve.py module\ncurve.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#summary",
        "title": "The curve.py module > Summary",
        "section": "Summary",
        "text": "ActiveCurve\nActive stress or Ca2+ curve.\nstrocchi_active\nActive stress in doi.org/10.1371/journal.pone.0235145.\nkumaraswamy_active\nActive stress in  Gaëtan Desrues doi.org/10.1007/978-3-030-78710-3_43.\nconstant_ca2\nConstant ca2 curve for Active model 1.\na\nSummary\nActiveCurve\nstrocchi_active\nkumaraswamy_active\nconstant_ca2\na"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#description",
        "title": "The curve.py module > Description",
        "section": "Description",
        "text": "Module for active stress curve.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#module-detail",
        "title": "The curve.py module > Module detail",
        "section": "Module detail",
        "text": "Active stress in doi.org/10.1371/journal.pone.0235145.\nT_peak is described in MAT_295\nheart beat period, by default 800\nstart time, by default 0\n(time, stress) array\nActive stress in  Gaëtan Desrues doi.org/10.1007/978-3-030-78710-3_43.\nT_peak is described in MAT295\nheart beat duration, by default 1000\n(timen,stress) array\nConstant ca2 curve for Active model 1.\nheart beat period, by default 800\namplitude which equals ca2ionm in MAT_295\n(time, stress) array\nModule detail\npython:int\noptional\npython:int\noptional\npython:tuple\nnp.ndarray\nnp.ndarray\npython:int\noptional\npython:tuple\nnp.ndarray\nnp.ndarray\npython:float\noptional\npython:float\noptional\npython:tuple\nnp.ndarray\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#curve.strocchi_active",
        "title": "The curve.py module > Module detail > strocchi_active",
        "section": "Module detail > strocchi_active",
        "text": "curve.strocchi_active(t_end=800, t_act=0) -> tuple[numpy.ndarray, numpy.ndarray]\n\nActive stress in doi.org/10.1371/journal.pone.0235145.\n\nT_peak is described in MAT_295\n\nParameters\n\nt_end\n\npython:int, optional\n\nheart beat period, by default 800\n\nt_act\n\npython:int, optional\n\nstart time, by default 0\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\n(time, stress) array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#curve.kumaraswamy_active",
        "title": "The curve.py module > Module detail > kumaraswamy_active",
        "section": "Module detail > kumaraswamy_active",
        "text": "curve.kumaraswamy_active(t_end=1000) -> tuple[numpy.ndarray, numpy.ndarray]\n\nActive stress in  Gaëtan Desrues doi.org/10.1007/978-3-030-78710-3_43.\n\nT_peak is described in MAT295\n\nParameters\n\nt_end\n\npython:int, optional\n\nheart beat duration, by default 1000\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\n(timen,stress) array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#curve.constant_ca2",
        "title": "The curve.py module > Module detail > constant_ca2",
        "section": "Module detail > constant_ca2",
        "text": "curve.constant_ca2(tb: float = 800, ca2ionm: float = 4.35) -> tuple[numpy.ndarray, numpy.ndarray]\n\nConstant ca2 curve for Active model 1.\n\nParameters\n\ntb\n\npython:float, optional\n\nheart beat period, by default 800\n\nca2ionm\n\n: python:float, optional\n\namplitude which equals ca2ionm in MAT_295\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray]\n\n(time, stress) array\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/curve/index",
        "href": "api/ansys/heart/core/settings/material/curve/index.html#curve.a",
        "title": "The curve.py module > Module detail > a",
        "section": "Module detail > a",
        "text": "curve.a\n\n"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_zerop_simulation",
        "href": "examples/postprocessor/doc_autopost_zerop_simulation.html#post-process-zero-pressure-folder",
        "title": "Post process Zero pressure folder",
        "section": "Post process Zero pressure folder",
        "text": "This example shows you how to use post process script after Stress free configuration simulation,\nand visualize them in Paraview.\nPost process Zero pressure folder"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_zerop_simulation",
        "href": "examples/postprocessor/doc_autopost_zerop_simulation.html#perform-the-required-imports",
        "title": "Post process Zero pressure folder > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules\nPerform the required imports"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_zerop_simulation",
        "href": "examples/postprocessor/doc_autopost_zerop_simulation.html#set-relevant-paths",
        "title": "Post process Zero pressure folder > Set relevant paths",
        "section": "Set relevant paths",
        "text": "Set relevant paths"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_zerop_simulation",
        "href": "examples/postprocessor/doc_autopost_zerop_simulation.html#run-default-process-scripts",
        "title": "Post process Zero pressure folder > Run default process scripts",
        "section": "Run default process scripts",
        "text": "a folder “post” will be created with key simulation results (json, png, vtk…)\nIn this folder, you will be able to find\nRun default process scripts"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_zerop_simulation",
        "href": "examples/postprocessor/doc_autopost_zerop_simulation.html#klotz-curve",
        "title": "Post process Zero pressure folder > Klotz curve",
        "section": "Klotz curve",
        "text": "Klotz curve"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_zerop_simulation",
        "href": "examples/postprocessor/doc_autopost_zerop_simulation.html#iteration-info",
        "title": "Post process Zero pressure folder > Iteration info",
        "section": "Iteration info",
        "text": "Iteration info"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_zerop_simulation",
        "href": "examples/postprocessor/doc_autopost_zerop_simulation.html#visualization-in-paraview",
        "title": "Post process Zero pressure folder > Visualization in Paraview",
        "section": "Visualization in Paraview",
        "text": "Open Paraview and load the state file\npost_zerop2.pvsm,\nand specify the folder\nYou can compare the end-of-diastolic geometry between input and after inflation\nYou can show and export inflation animation\nDownload Jupyter notebook: doc_autopost_zerop_simulation.ipynb\nDownload Python source code: doc_autopost_zerop_simulation.py\nDownload zipped: doc_autopost_zerop_simulation.zip\nGallery generated by Sphinx-Gallery\nVisualization in Paraview\npost_zerop2.pvsm\nDownload Jupyter notebook: doc_autopost_zerop_simulation.ipynb\nDownload Python source code: doc_autopost_zerop_simulation.py\nDownload zipped: doc_autopost_zerop_simulation.zip"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/SupportedFluentVersionNotFoundError",
        "href": "api/ansys/heart/core/exceptions/SupportedFluentVersionNotFoundError.html#supportedfluentversionnotfounderror",
        "title": "SupportedFluentVersionNotFoundError",
        "section": "SupportedFluentVersionNotFoundError",
        "text": "Bases: Exception\nException raised when no supported Fluent version is found.\nSupportedFluentVersionNotFoundError\nSupportedFluentVersionNotFoundError\nException"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/SupportedFluentVersionNotFoundError",
        "href": "api/ansys/heart/core/exceptions/SupportedFluentVersionNotFoundError.html#ansys.heart.core.exceptions.SupportedFluentVersionNotFoundError",
        "title": "SupportedFluentVersionNotFoundError > SupportedFluentVersionNotFoundError > SupportedFluentVersionNotFoundError",
        "section": "SupportedFluentVersionNotFoundError > SupportedFluentVersionNotFoundError",
        "text": "exception ansys.heart.core.exceptions.SupportedFluentVersionNotFoundError\n\nBases: Exception\n\nException raised when no supported Fluent version is found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/SupportedFluentVersionNotFoundError",
        "href": "api/ansys/heart/core/exceptions/SupportedFluentVersionNotFoundError.html#import-detail",
        "title": "SupportedFluentVersionNotFoundError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#electrophysiology",
        "title": "Electrophysiology",
        "section": "Electrophysiology",
        "text": "Bases: Settings\nClass for keeping track of electrophysiology settings.\nElectrophysiology\nElectrophysiology\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#ansys.heart.core.settings.settings.Electrophysiology",
        "title": "Electrophysiology > Electrophysiology > Electrophysiology",
        "section": "Electrophysiology > Electrophysiology",
        "text": "class ansys.heart.core.settings.settings.Electrophysiology\n\nBases: Settings\n\nClass for keeping track of electrophysiology settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#overview",
        "title": "Electrophysiology > Overview",
        "section": "Overview",
        "text": "material\nMaterial settings/configuration.\nanalysis\nGeneric analysis settings.\nstimulation\nStimulation settings.\nOverview\nmaterial\nanalysis\nstimulation"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#import-detail",
        "title": "Electrophysiology > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#attribute-detail",
        "title": "Electrophysiology > Attribute detail",
        "section": "Attribute detail",
        "text": "Material settings/configuration.\nGeneric analysis settings.\nStimulation settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#Electrophysiology.material",
        "title": "Electrophysiology > Attribute detail > material",
        "section": "Attribute detail > material",
        "text": "Electrophysiology.material: EpMaterial\n\nMaterial settings/configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#Electrophysiology.analysis",
        "title": "Electrophysiology > Attribute detail > analysis",
        "section": "Attribute detail > analysis",
        "text": "Electrophysiology.analysis: EPAnalysis\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Electrophysiology",
        "href": "api/ansys/heart/core/settings/settings/Electrophysiology.html#Electrophysiology.stimulation",
        "title": "Electrophysiology > Attribute detail > stimulation",
        "section": "Attribute detail > stimulation",
        "text": "Electrophysiology.stimulation: AttrDict[str, Stimulation] = None\n\nStimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#the-electrophysiologypy-module",
        "title": "The electrophysiology.py module",
        "section": "The electrophysiology.py module",
        "text": "The electrophysiology.py module\nelectrophysiology.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#summary",
        "title": "The electrophysiology.py module > Summary",
        "section": "Summary",
        "text": "heart\nGeneric analysis settings.\nanalysis\nMaterial settings.\nmaterial\nStimulation settings.\nstimulation\nSummary\nheart\nanalysis\nmaterial\nstimulation"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#description",
        "title": "The electrophysiology.py module > Description",
        "section": "Description",
        "text": "Module contains default values for electrophysiology simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#module-detail",
        "title": "The electrophysiology.py module > Module detail",
        "section": "Module detail",
        "text": "Generic analysis settings.\nMaterial settings.\nStimulation settings.\nModule detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#electrophysiology.heart",
        "title": "The electrophysiology.py module > Module detail > heart",
        "section": "Module detail > heart",
        "text": "electrophysiology.heart\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#electrophysiology.analysis",
        "title": "The electrophysiology.py module > Module detail > analysis",
        "section": "Module detail > analysis",
        "text": "electrophysiology.analysis\n\nMaterial settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#electrophysiology.material",
        "title": "The electrophysiology.py module > Module detail > material",
        "section": "Module detail > material",
        "text": "electrophysiology.material\n\nStimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/electrophysiology/index",
        "href": "api/ansys/heart/core/settings/defaults/electrophysiology/index.html#electrophysiology.stimulation",
        "title": "The electrophysiology.py module > Module detail > stimulation",
        "section": "Module detail > stimulation",
        "text": "electrophysiology.stimulation\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#dynasettings",
        "title": "DynaSettings",
        "section": "DynaSettings",
        "text": "Class for collecting, managing and validating LS-DYNA settings.\nDynaSettings\nDynaSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#ansys.heart.core.settings.settings.DynaSettings",
        "title": "DynaSettings > DynaSettings > DynaSettings",
        "section": "DynaSettings > DynaSettings",
        "text": "class ansys.heart.core.settings.settings.DynaSettings(lsdyna_path: pathlib.Path = 'lsdyna.exe', dynatype: Literal['smp', 'intelmpi', 'platformmpi', 'msmpi'] = 'intelmpi', num_cpus: int = 1, platform: Literal['windows', 'wsl', 'linux'] = 'windows', dyna_options: str = '', mpi_options: str = '')\n\nClass for collecting, managing and validating LS-DYNA settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#overview",
        "title": "DynaSettings > Overview",
        "section": "Overview",
        "text": "get_commands\nGet command line arguments from the defined settings.\nlsdyna_path\nPath to LS-DYNA executable.\ndynatype\nType of dyna executable.\nnum_cpus\nNumber of CPU’s requested.\nplatform\nPlatform on which dyna is executed.\ndyna_options\nAdditional command line options for dyna.\n__repr__\nRepresent self as string.\nOverview\nget_commands\nlsdyna_path\ndynatype\nnum_cpus\nplatform\ndyna_options\n__repr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#import-detail",
        "title": "DynaSettings > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#attribute-detail",
        "title": "DynaSettings > Attribute detail",
        "section": "Attribute detail",
        "text": "Path to LS-DYNA executable.\nType of dyna executable.\nNumber of CPU’s requested.\nPlatform on which dyna is executed.\nAdditional command line options for dyna.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#DynaSettings.lsdyna_path",
        "title": "DynaSettings > Attribute detail > lsdyna_path",
        "section": "Attribute detail > lsdyna_path",
        "text": "DynaSettings.lsdyna_path: pathlib.Path = 'lsdyna.exe'\n\nPath to LS-DYNA executable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#DynaSettings.dynatype",
        "title": "DynaSettings > Attribute detail > dynatype",
        "section": "Attribute detail > dynatype",
        "text": "DynaSettings.dynatype: str = 'intelmpi'\n\nType of dyna executable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#DynaSettings.num_cpus",
        "title": "DynaSettings > Attribute detail > num_cpus",
        "section": "Attribute detail > num_cpus",
        "text": "DynaSettings.num_cpus: int = 1\n\nNumber of CPU’s requested.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#DynaSettings.platform",
        "title": "DynaSettings > Attribute detail > platform",
        "section": "Attribute detail > platform",
        "text": "DynaSettings.platform: str = 'windows'\n\nPlatform on which dyna is executed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#DynaSettings.dyna_options",
        "title": "DynaSettings > Attribute detail > dyna_options",
        "section": "Attribute detail > dyna_options",
        "text": "DynaSettings.dyna_options = ''\n\nAdditional command line options for dyna.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#method-detail",
        "title": "DynaSettings > Method detail",
        "section": "Method detail",
        "text": "Get command line arguments from the defined settings.\nPath to the LS-DYNA input file.\nList of strings of each of the commands.\nRepresent self as string.\nMethod detail\npathlib.Path\nList\npython:str"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#DynaSettings.get_commands",
        "title": "DynaSettings > Method detail > get_commands",
        "section": "Method detail > get_commands",
        "text": "DynaSettings.get_commands(path_to_input: pathlib.Path) -> List[str]\n\nGet command line arguments from the defined settings.\n\nParameters\n\npath_to_input\n\npathlib.Path\n\nPath to the LS-DYNA input file.\n\nReturns\n\nList[python:str]\n\nList of strings of each of the commands.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/DynaSettings",
        "href": "api/ansys/heart/core/settings/settings/DynaSettings.html#DynaSettings.__repr__",
        "title": "DynaSettings > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DynaSettings.__repr__()\n\nRepresent self as string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/preprocessor/sg_execution_times",
        "href": "examples/preprocessor/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 8 files from examplespreprocessor:\nExample\nTime\nMem (MB)\nsphx_glr_examples_preprocessor_doc_demo_material.py (doc_demo_material.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_download_case.py (doc_download_case.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_example_atrial_fiber.py (doc_example_atrial_fiber.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_example_stimulation.py (doc_example_stimulation.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_example_uhc.py (doc_example_uhc.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_preprocess_fourchamber.py (doc_preprocess_fourchamber.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_preprocess_fullheart_rodero_01.py (doc_preprocess_fullheart_rodero_01.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_preprocess_truncated_LV.py (doc_preprocess_truncated_LV.py)\n00:00.000\n0.0\nComputation times\ndoc_demo_material.py\ndoc_download_case.py\ndoc_example_atrial_fiber.py\ndoc_example_stimulation.py\ndoc_example_uhc.py\ndoc_preprocess_fourchamber.py\ndoc_preprocess_fullheart_rodero_01.py\ndoc_preprocess_truncated_LV.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/index",
        "href": "api/ansys/heart/core/settings/material/material/index.html#the-materialpy-module",
        "title": "The material.py module",
        "section": "The material.py module",
        "text": "The material.py module\nmaterial.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/index",
        "href": "api/ansys/heart/core/settings/material/material/index.html#summary",
        "title": "The material.py module > Summary",
        "section": "Summary",
        "text": "ISO\nIsotropic module of MAT_295.\nANISO\nAnisotropic module of MAT_295.\nActiveModel\nAbstract class for different active models.\nACTIVE\nActive module of MAT_295.\nMechanicalMaterialModel\nBase class for all mechanical material model.\nMat295\nHold data for MAT_ANISOTROPIC_HYPERELASTIC (MAT_295).\nNeoHookean\nPassive isotropic material with MAT_77H.\nSummary\nISO\nANISO\nActiveModel\nACTIVE\nMechanicalMaterialModel\nMat295\nNeoHookean"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/index",
        "href": "api/ansys/heart/core/settings/material/material/index.html#description",
        "title": "The material.py module > Description",
        "section": "Description",
        "text": "Material module.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/fibers/index",
        "href": "api/ansys/heart/core/settings/defaults/fibers/index.html#the-fiberspy-module",
        "title": "The fibers.py module",
        "section": "The fibers.py module",
        "text": "The fibers.py module\nfibers.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/fibers/index",
        "href": "api/ansys/heart/core/settings/defaults/fibers/index.html#summary",
        "title": "The fibers.py module > Summary",
        "section": "Summary",
        "text": "angles\nla_bundle\nra_bundle\nSummary\nangles\nla_bundle\nra_bundle"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/fibers/index",
        "href": "api/ansys/heart/core/settings/defaults/fibers/index.html#description",
        "title": "The fibers.py module > Description",
        "section": "Description",
        "text": "Module contains default values for fiber generation.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/fibers/index",
        "href": "api/ansys/heart/core/settings/defaults/fibers/index.html#module-detail",
        "title": "The fibers.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/fibers/index",
        "href": "api/ansys/heart/core/settings/defaults/fibers/index.html#fibers.angles",
        "title": "The fibers.py module > Module detail > angles",
        "section": "Module detail > angles",
        "text": "fibers.angles\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/fibers/index",
        "href": "api/ansys/heart/core/settings/defaults/fibers/index.html#fibers.la_bundle",
        "title": "The fibers.py module > Module detail > la_bundle",
        "section": "Module detail > la_bundle",
        "text": "fibers.la_bundle\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/fibers/index",
        "href": "api/ansys/heart/core/settings/defaults/fibers/index.html#fibers.ra_bundle",
        "title": "The fibers.py module > Module detail > ra_bundle",
        "section": "Module detail > ra_bundle",
        "text": "fibers.ra_bundle\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#neohookean",
        "title": "NeoHookean",
        "section": "NeoHookean",
        "text": "Bases: MechanicalMaterialModel\nPassive isotropic material with MAT_77H.\nNeoHookean\nNeoHookean\nMechanicalMaterialModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#ansys.heart.core.settings.material.material.NeoHookean",
        "title": "NeoHookean > NeoHookean > NeoHookean",
        "section": "NeoHookean > NeoHookean",
        "text": "class ansys.heart.core.settings.material.material.NeoHookean\n\nBases: MechanicalMaterialModel\n\nPassive isotropic material with MAT_77H.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#overview",
        "title": "NeoHookean > Overview",
        "section": "Overview",
        "text": "rho\nDensity of the material.\nc10\nc10.\nkappa\nBulk modulus.\nnu\nPoisson’s ratio.\n__post_init__\nDeduce Poisson’s ratio if not given.\nOverview\nrho\nc10\nkappa\nnu\n__post_init__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#import-detail",
        "title": "NeoHookean > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#attribute-detail",
        "title": "NeoHookean > Attribute detail",
        "section": "Attribute detail",
        "text": "Density of the material.\nc10.\nBulk modulus.\nPoisson’s ratio.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#NeoHookean.rho",
        "title": "NeoHookean > Attribute detail > rho",
        "section": "Attribute detail > rho",
        "text": "NeoHookean.rho: float\n\nDensity of the material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#NeoHookean.c10",
        "title": "NeoHookean > Attribute detail > c10",
        "section": "Attribute detail > c10",
        "text": "NeoHookean.c10: float\n\nc10.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#NeoHookean.kappa",
        "title": "NeoHookean > Attribute detail > kappa",
        "section": "Attribute detail > kappa",
        "text": "NeoHookean.kappa: float = None\n\nBulk modulus.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#NeoHookean.nu",
        "title": "NeoHookean > Attribute detail > nu",
        "section": "Attribute detail > nu",
        "text": "NeoHookean.nu: float = None\n\nPoisson’s ratio.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#method-detail",
        "title": "NeoHookean > Method detail",
        "section": "Method detail",
        "text": "Deduce Poisson’s ratio if not given.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/NeoHookean",
        "href": "api/ansys/heart/core/settings/material/material/NeoHookean.html#NeoHookean.__post_init__",
        "title": "NeoHookean > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "NeoHookean.__post_init__()\n\nDeduce Poisson’s ratio if not given.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user-guide/preprocessor",
        "href": "user-guide/preprocessor.html#preprocessor",
        "title": "User guide > Preprocessor",
        "section": "Preprocessor",
        "text": "This section provides an overview of the HeartModel module.\nPreprocessor\nHeartModel"
    },
    {
        "objectID": "examples/simulator/index",
        "href": "examples/simulator/index.html#simulator-examples",
        "title": "Simulator examples",
        "section": "Simulator examples",
        "text": "These examples show you how you can use the simulator module\nto consume preprocessed models and consequently use these to run various\nsimulations.\nsphx_glr_examples_simulator_doc_mechanics_simulator_fullheart_rodero_01.py\nsphx_glr_examples_simulator_doc_EP-mechanics_simulator_fullheart_rodero.py\nsphx_glr_examples_simulator_doc_EP_simulator_FullHeart_rodero.py\nsphx_glr_examples_simulator_doc_EP_simulator_fourchamber.py\nSimulator examples"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/purkinje/index",
        "href": "api/ansys/heart/core/settings/defaults/purkinje/index.html#the-purkinjepy-module",
        "title": "The purkinje.py module",
        "section": "The purkinje.py module",
        "text": "The purkinje.py module\npurkinje.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/purkinje/index",
        "href": "api/ansys/heart/core/settings/defaults/purkinje/index.html#summary",
        "title": "The purkinje.py module > Summary",
        "section": "Summary",
        "text": "build\nSummary\nbuild"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/purkinje/index",
        "href": "api/ansys/heart/core/settings/defaults/purkinje/index.html#description",
        "title": "The purkinje.py module > Description",
        "section": "Description",
        "text": "Module contains default values for Purkinje generation.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/purkinje/index",
        "href": "api/ansys/heart/core/settings/defaults/purkinje/index.html#module-detail",
        "title": "The purkinje.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/purkinje/index",
        "href": "api/ansys/heart/core/settings/defaults/purkinje/index.html#purkinje.build",
        "title": "The purkinje.py module > Module detail > build",
        "section": "Module detail > build",
        "text": "purkinje.build\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/index",
        "href": "api/ansys/heart/core/index.html#the-ansysheartcore-library",
        "title": "The ansys.heart.core library",
        "section": "The ansys.heart.core library",
        "text": "The ansys.heart.core library\nansys.heart.core"
    },
    {
        "objectID": "api/ansys/heart/core/index",
        "href": "api/ansys/heart/core/index.html#summary",
        "title": "The ansys.heart.core library > Summary",
        "section": "Summary",
        "text": "utils\nSubpackage containing various utils.\nexceptions\nCustom exceptions for the PyAnsys-Heart package.\nlogger\nLogging module.\nmodels\nModule containing classes for the various heart models.\nobjects\nModule that defines classes used in the heart model.\nsimulator\nSimulator module.\nLOG\nSummary\nutils\nexceptions\nlogger\nmodels\nobjects\nsimulator\nLOG"
    },
    {
        "objectID": "api/ansys/heart/core/index",
        "href": "api/ansys/heart/core/index.html#description",
        "title": "The ansys.heart.core library > Description",
        "section": "Description",
        "text": "Initialise core module.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/index",
        "href": "api/ansys/heart/core/index.html#module-detail",
        "title": "The ansys.heart.core library > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/heart/core/index",
        "href": "api/ansys/heart/core/index.html#core.LOG",
        "title": "The ansys.heart.core library > Module detail > LOG",
        "section": "Module detail > LOG",
        "text": "core.LOG\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#ahastraincalculator",
        "title": "AhaStrainCalculator",
        "section": "AhaStrainCalculator",
        "text": "Compute Longitudinal, Radial, Circumferential strain for left ventricle.\nAhaStrainCalculator\nAhaStrainCalculator"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#ansys.heart.core.post.strain_calculator.AhaStrainCalculator",
        "title": "AhaStrainCalculator > AhaStrainCalculator > AhaStrainCalculator",
        "section": "AhaStrainCalculator > AhaStrainCalculator",
        "text": "class ansys.heart.core.post.strain_calculator.AhaStrainCalculator(model: ansys.heart.core.models.HeartModel, d3plot_file)\n\nCompute Longitudinal, Radial, Circumferential strain for left ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#overview",
        "title": "AhaStrainCalculator > Overview",
        "section": "Overview",
        "text": "compute_aha_strain\nCompute AHA 17 segment strain values from deformation gradient.\ncompute_aha_strain_at\nExport AHA strain and/or save vtk file for a given frame.\nmodel\naha_labels\nd3plot\nbullseye_plot\nBullseye representation for the left ventricle.\nOverview\ncompute_aha_strain\ncompute_aha_strain_at\nmodel\naha_labels\nd3plot\nbullseye_plot"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#import-detail",
        "title": "AhaStrainCalculator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#attribute-detail",
        "title": "AhaStrainCalculator > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.model",
        "title": "AhaStrainCalculator > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "AhaStrainCalculator.model\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.aha_labels",
        "title": "AhaStrainCalculator > Attribute detail > aha_labels",
        "section": "Attribute detail > aha_labels",
        "text": "AhaStrainCalculator.aha_labels\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.d3plot",
        "title": "AhaStrainCalculator > Attribute detail > d3plot",
        "section": "Attribute detail > d3plot",
        "text": "AhaStrainCalculator.d3plot\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#method-detail",
        "title": "AhaStrainCalculator > Method detail",
        "section": "Method detail",
        "text": "Compute AHA 17 segment strain values from deformation gradient.\noutput folder, by default None\nwrite into vtk files, by default False\ntime to stop, by default 10e10\narray of N_time * (1+17*3), columns represent time and\nlongitudinal, radial, and circumferential strain averaged of each segment\nExport AHA strain and/or save vtk file for a given frame.\nat this frame, by default 0.\nfolder where vtk files are saved, by default not save.\nAHA LRC strain matrix (17 * 3)\nBullseye representation for the left ventricle.\nThe intensity values for each of the 17 segments\nA list with the segments to highlight\nOptional argument to set the desired colormap\nOptional argument to normalize data into the [0.0, 1.0] range\nThis function creates the 17 segment model for the left ventricle according\nto the American Heart Association (AHA) [1]\nBased on:\nhttps://matplotlib.org/stable/gallery/specialty_plots/leftventricle_bulleye.html\nM. D. Cerqueira, N. J. Weissman, V. Dilsizian, A. K. Jacobs,\nS. Kaul, W. K. Laskey, D. J. Pennell, J. A. Rumberger, T. Ryan,\nand M. S. Verani, “Standardized myocardial segmentation and\nnomenclature for tomographic imaging of the heart”,\nCirculation, vol. 105, no. 4, pp. 539-542, 2002.\n[1]\nMethod detail\npython:str\noptional\noptional\npython:float\noptional\nnp.ndarray\nnp.ndarry\naxes\npython:list\nof\npython:int\nand\npython:float\npython:list\nof\npython:int\noptional\nColorMap\npython:None\noptional\nNormalize\npython:None\noptional"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.compute_aha_strain",
        "title": "AhaStrainCalculator > Method detail > compute_aha_strain",
        "section": "Method detail > compute_aha_strain",
        "text": "AhaStrainCalculator.compute_aha_strain(out_dir: str = None, write_vtk: bool = False, t_to_keep: float = 100000000000.0) -> numpy.ndarray\n\nCompute AHA 17 segment strain values from deformation gradient.\n\nParameters\n\nout_dir\n\npython:str, optional\n\noutput folder, by default None\n\nwrite_vtk\n\nbool, optional\n\nwrite into vtk files, by default False\n\nt_to_keep\n\npython:float, optional\n\ntime to stop, by default 10e10\n\nReturns\n\nnp.ndarray\n\narray of N_time * (1+17*3), columns represent time and\nlongitudinal, radial, and circumferential strain averaged of each segment\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.compute_aha_strain_at",
        "title": "AhaStrainCalculator > Method detail > compute_aha_strain_at",
        "section": "Method detail > compute_aha_strain_at",
        "text": "AhaStrainCalculator.compute_aha_strain_at(frame: int = 0, out_dir: pathlib.Path = None) -> numpy.ndarray\n\nExport AHA strain and/or save vtk file for a given frame.\n\nParameters\n\nframe: int\n\nat this frame, by default 0.\n\nout_dir: pathlib.Path\n\nfolder where vtk files are saved, by default not save.\n\nReturns\n\nnp.ndarry\n\nAHA LRC strain matrix (17 * 3)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator",
        "href": "api/ansys/heart/core/post/strain_calculator/AhaStrainCalculator.html#AhaStrainCalculator.bullseye_plot",
        "title": "AhaStrainCalculator > Method detail > bullseye_plot",
        "section": "Method detail > bullseye_plot",
        "text": "static AhaStrainCalculator.bullseye_plot(ax, data, seg_bold=None, cmap=None, norm=None)\n\nBullseye representation for the left ventricle.\n\nParameters\n\nax\n\naxes\n\n\n\ndata\n\npython:list of python:int and python:float\n\nThe intensity values for each of the 17 segments\n\nseg_bold\n\npython:list of python:int, optional\n\nA list with the segments to highlight\n\ncmap\n\nColorMap or python:None, optional\n\nOptional argument to set the desired colormap\n\nnorm\n\nNormalize or python:None, optional\n\nOptional argument to normalize data into the [0.0, 1.0] range\n\nNotes\n\nThis function creates the 17 segment model for the left ventricle according\nto the American Heart Association (AHA) [1]\n\nBased on:\nhttps://matplotlib.org/stable/gallery/specialty_plots/leftventricle_bulleye.html\n\nReferences\n\n1\n\nM. D. Cerqueira, N. J. Weissman, V. Dilsizian, A. K. Jacobs,\nS. Kaul, W. K. Laskey, D. J. Pennell, J. A. Rumberger, T. Ryan,\nand M. S. Verani, “Standardized myocardial segmentation and\nnomenclature for tomographic imaging of the heart”,\nCirculation, vol. 105, no. 4, pp. 539-542, 2002.\n\n[1]\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#activebeam",
        "title": "ActiveBeam",
        "section": "ActiveBeam",
        "text": "Bases: Active\nHold data for beam active EP material.\nActiveBeam\nActiveBeam\nActive"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#ansys.heart.core.settings.material.ep_material.EPMaterial.ActiveBeam",
        "title": "ActiveBeam > ActiveBeam > ActiveBeam",
        "section": "ActiveBeam > ActiveBeam",
        "text": "class ansys.heart.core.settings.material.ep_material.EPMaterial.ActiveBeam\n\nBases: Active\n\nHold data for beam active EP material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#overview",
        "title": "ActiveBeam > Overview",
        "section": "Overview",
        "text": "sigma_fiber\ncell_model\npmjres\nOverview\nsigma_fiber\ncell_model\npmjres"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#import-detail",
        "title": "ActiveBeam > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#attribute-detail",
        "title": "ActiveBeam > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#ActiveBeam.sigma_fiber",
        "title": "ActiveBeam > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "ActiveBeam.sigma_fiber\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#ActiveBeam.cell_model",
        "title": "ActiveBeam > Attribute detail > cell_model",
        "section": "Attribute detail > cell_model",
        "text": "ActiveBeam.cell_model\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.ActiveBeam.html#ActiveBeam.pmjres",
        "title": "ActiveBeam > Attribute detail > pmjres",
        "section": "Attribute detail > pmjres",
        "text": "ActiveBeam.pmjres: float\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/zeropressure/index",
        "href": "api/ansys/heart/core/settings/defaults/zeropressure/index.html#the-zeropressurepy-module",
        "title": "The zeropressure.py module",
        "section": "The zeropressure.py module",
        "text": "The zeropressure.py module\nzeropressure.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/zeropressure/index",
        "href": "api/ansys/heart/core/settings/defaults/zeropressure/index.html#summary",
        "title": "The zeropressure.py module > Summary",
        "section": "Summary",
        "text": "analysis\nSummary\nanalysis"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/zeropressure/index",
        "href": "api/ansys/heart/core/settings/defaults/zeropressure/index.html#description",
        "title": "The zeropressure.py module > Description",
        "section": "Description",
        "text": "Module contains default values for zero-pressure/stress-free-configuration simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/zeropressure/index",
        "href": "api/ansys/heart/core/settings/defaults/zeropressure/index.html#module-detail",
        "title": "The zeropressure.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/zeropressure/index",
        "href": "api/ansys/heart/core/settings/defaults/zeropressure/index.html#zeropressure.analysis",
        "title": "The zeropressure.py module > Module detail > analysis",
        "section": "Module detail > analysis",
        "text": "zeropressure.analysis\n\n"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 15 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_postprocessor_doc_autopost_mechanical_simulation.py (..\\..\\examples\\postprocessor\\doc_autopost_mechanical_simulation.py)\n00:00.000\n0.0\nsphx_glr_examples_postprocessor_doc_autopost_zerop_simulation.py (..\\..\\examples\\postprocessor\\doc_autopost_zerop_simulation.py)\n00:00.000\n0.0\nsphx_glr_examples_postprocessor_doc_postproc_ep_simulation.py (..\\..\\examples\\postprocessor\\doc_postproc_ep_simulation.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_demo_material.py (..\\..\\examples\\preprocessor\\doc_demo_material.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_download_case.py (..\\..\\examples\\preprocessor\\doc_download_case.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_example_atrial_fiber.py (..\\..\\examples\\preprocessor\\doc_example_atrial_fiber.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_example_stimulation.py (..\\..\\examples\\preprocessor\\doc_example_stimulation.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_example_uhc.py (..\\..\\examples\\preprocessor\\doc_example_uhc.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_preprocess_fourchamber.py (..\\..\\examples\\preprocessor\\doc_preprocess_fourchamber.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_preprocess_fullheart_rodero_01.py (..\\..\\examples\\preprocessor\\doc_preprocess_fullheart_rodero_01.py)\n00:00.000\n0.0\nsphx_glr_examples_preprocessor_doc_preprocess_truncated_LV.py (..\\..\\examples\\preprocessor\\doc_preprocess_truncated_LV.py)\n00:00.000\n0.0\nsphx_glr_examples_simulator_doc_EP-mechanics_simulator_fullheart_rodero.py (..\\..\\examples\\simulator\\doc_EP-mechanics_simulator_fullheart_rodero.py)\n00:00.000\n0.0\nsphx_glr_examples_simulator_doc_EP_simulator_FullHeart_rodero.py (..\\..\\examples\\simulator\\doc_EP_simulator_FullHeart_rodero.py)\n00:00.000\n0.0\nsphx_glr_examples_simulator_doc_EP_simulator_fourchamber.py (..\\..\\examples\\simulator\\doc_EP_simulator_fourchamber.py)\n00:00.000\n0.0\nsphx_glr_examples_simulator_doc_mechanics_simulator_fullheart_rodero_01.py (..\\..\\examples\\simulator\\doc_mechanics_simulator_fullheart_rodero_01.py)\n00:00.000\n0.0\nComputation times\n..\\..\\examples\\postprocessor\\doc_autopost_mechanical_simulation.py\n..\\..\\examples\\postprocessor\\doc_autopost_zerop_simulation.py\n..\\..\\examples\\postprocessor\\doc_postproc_ep_simulation.py\n..\\..\\examples\\preprocessor\\doc_demo_material.py\n..\\..\\examples\\preprocessor\\doc_download_case.py\n..\\..\\examples\\preprocessor\\doc_example_atrial_fiber.py\n..\\..\\examples\\preprocessor\\doc_example_stimulation.py\n..\\..\\examples\\preprocessor\\doc_example_uhc.py\n..\\..\\examples\\preprocessor\\doc_preprocess_fourchamber.py\n..\\..\\examples\\preprocessor\\doc_preprocess_fullheart_rodero_01.py\n..\\..\\examples\\preprocessor\\doc_preprocess_truncated_LV.py\n..\\..\\examples\\simulator\\doc_EP-mechanics_simulator_fullheart_rodero.py\n..\\..\\examples\\simulator\\doc_EP_simulator_FullHeart_rodero.py\n..\\..\\examples\\simulator\\doc_EP_simulator_fourchamber.py\n..\\..\\examples\\simulator\\doc_mechanics_simulator_fullheart_rodero_01.py"
    },
    {
        "objectID": "examples/postprocessor/sg_execution_times",
        "href": "examples/postprocessor/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 3 files from examplespostprocessor:\nExample\nTime\nMem (MB)\nsphx_glr_examples_postprocessor_doc_autopost_mechanical_simulation.py (doc_autopost_mechanical_simulation.py)\n00:00.000\n0.0\nsphx_glr_examples_postprocessor_doc_autopost_zerop_simulation.py (doc_autopost_zerop_simulation.py)\n00:00.000\n0.0\nsphx_glr_examples_postprocessor_doc_postproc_ep_simulation.py (doc_postproc_ep_simulation.py)\n00:00.000\n0.0\nComputation times\ndoc_autopost_mechanical_simulation.py\ndoc_autopost_zerop_simulation.py\ndoc_postproc_ep_simulation.py"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/index",
        "href": "api/ansys/heart/core/exceptions/index.html#the-exceptionspy-module",
        "title": "The exceptions.py module",
        "section": "The exceptions.py module",
        "text": "The exceptions.py module\nexceptions.py"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/index",
        "href": "api/ansys/heart/core/exceptions/index.html#summary",
        "title": "The exceptions.py module > Summary",
        "section": "Summary",
        "text": "LSDYNATerminationError\nException raised when Normal Termination is not found in the LS-DYNA logs.\nDatabaseNotSupportedError\nException raised when the database is not supported.\nSupportedDPFServerNotFoundError\nException raised when no supported DPF server is found.\nSupportedFluentVersionNotFoundError\nException raised when no supported Fluent version is found.\nInvalidInputModelTypeError\nException raised when the input heart model type is invalid.\nInvalidHeartModelError\nException raised when the heart model is invalid.\nLSDYNANotFoundError\nLSDYNA executable not found.\nSummary\nLSDYNATerminationError\nDatabaseNotSupportedError\nSupportedDPFServerNotFoundError\nSupportedFluentVersionNotFoundError\nInvalidInputModelTypeError\nInvalidHeartModelError\nLSDYNANotFoundError"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/index",
        "href": "api/ansys/heart/core/exceptions/index.html#description",
        "title": "The exceptions.py module > Description",
        "section": "Description",
        "text": "Custom exceptions for the PyAnsys-Heart package.\nDescription"
    },
    {
        "objectID": "user-guide/writer",
        "href": "user-guide/writer.html#writer",
        "title": "User guide > Writer",
        "section": "Writer",
        "text": "DynaWriter is used to generate LS-DYNA input files for different simulations.\nBased on different applications, different Writers need to be created.\nPurkinjeGenerationDynaWriter, to generate a LS-DYNA input deck for creating Purkinje network.\nFiberGenerationDynaWriter, to generate a LS-DYNA input deck for creating fibers orientation vectors.\nMechanicsDynaWriter, to generate a LS-DYNA input deck for mechanical simulations\nZeroPressureMechanicsDynaWriter, to generate a LS-DYNA input deck for stress free configuration simulations\nElectrophysiologyDynaWriter, to generate a LS-DYNA input deck for electrophysiology simulations\nElectroMechanicsDynaWriter, to generate a LS-DYNA input deck for electrical-mecahnical coupled simulations\nA simple use example is given as the following:\nWriter\nDynaWriter\nPurkinjeGenerationDynaWriter\nFiberGenerationDynaWriter\nMechanicsDynaWriter\nZeroPressureMechanicsDynaWriter\nElectrophysiologyDynaWriter\nElectroMechanicsDynaWriter"
    },
    {
        "objectID": "examples/postprocessor/index",
        "href": "examples/postprocessor/index.html#postprocessor-examples",
        "title": "Postprocessor examples",
        "section": "Postprocessor examples",
        "text": "These examples show you how you can use the postprocessor module\nto handle simulation data generated by LS-DYNA.\nsphx_glr_examples_postprocessor_doc_postproc_ep_simulation.py\nsphx_glr_examples_postprocessor_doc_autopost_zerop_simulation.py\nsphx_glr_examples_postprocessor_doc_autopost_mechanical_simulation.py\nPostprocessor examples"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/index",
        "href": "api/ansys/heart/core/pre/conduction_beam/index.html#the-conduction_beampy-module",
        "title": "The conduction_beam.py module",
        "section": "The conduction_beam.py module",
        "text": "The conduction_beam.py module\nconduction_beam.py"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/index",
        "href": "api/ansys/heart/core/pre/conduction_beam/index.html#summary",
        "title": "The conduction_beam.py module > Summary",
        "section": "Summary",
        "text": "ConductionSystem\nMethods to generate conduction system.\nSummary\nConductionSystem"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/index",
        "href": "api/ansys/heart/core/pre/conduction_beam/index.html#description",
        "title": "The conduction_beam.py module > Description",
        "section": "Description",
        "text": "Module containing class for creating conduxtion system.\nDescription"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#contributing-as-a-user",
        "title": "Contributing as a user",
        "section": "Contributing as a user",
        "text": "Users can contribute in a variety of ways, such as reporting bugs, requesting\nnew features, testing in-development features, starting discussions, answering\nquestions, and sharing their work with the community.\nFound a bug? Report it here.\nGot an idea for a new feature? Share it!\nAnxious to try out a new feature? Here’s how you can do it.\nWant to discuss something? Start a discussion here.\nHelp others by answering their questions.\nShare your work with the community.\nView project documentation.\nContributing as a user"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#report-bugs",
        "title": "Contributing as a user > Report bugs",
        "section": "Report bugs",
        "text": "If you encounter a bug or an issue while using the project, please report it.\nYour feedback helps to identify problems.\nSearch the PyAnsys Heart issues to see if the issue has already been reported.\nCreate a new issue if it hasn’t been reported.\nInclude a clear description of the problem.\nProvide steps to reproduce the issue.\nMention the version of the project you’re using.\nInclude screenshots or logs if possible.\nReport bugs"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#request-a-new-feature",
        "title": "Contributing as a user > Request a new feature",
        "section": "Request a new feature",
        "text": "Do you have an idea for a new feature or an improvement? Your suggestions are\nwelcome. You can request a new feature by creating an issue in the PyAnsys Heart issues\nboard.\nRequest a new feature"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#test-a-new-feature",
        "title": "Contributing as a user > Test a new feature",
        "section": "Test a new feature",
        "text": "It is possible to test a new feature before it is officially released. To do\nso, you can install PyAnsys Heart from the source code by following the steps below.\nTest a new feature"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#clone-the-repository",
        "title": "Contributing as a user > Clone the repository",
        "section": "Clone the repository",
        "text": "Clone and install the latest version of PyAnsys Heart by running this code:\nClone the repository"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#install-for-users",
        "title": "Contributing as a user > Install for users",
        "section": "Install for users",
        "text": "Installing the latest version of PyAnsys Heart allows you to test latest features as\nthey are being developed without having to wait for releases.\nInstall for users"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#virtual-environment",
        "title": "Contributing as a user > Virtual environment",
        "section": "Virtual environment",
        "text": "Start by navigating to the project’s root directory by running:\nThen, create a new virtual environment named .venv to isolate your system’s\nPython environment by running:\nFinally, activate this environment by running:\nVirtual environment\n.venv"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#latest-version-installation",
        "title": "Contributing as a user > Latest version installation",
        "section": "Latest version installation",
        "text": "Now, install PyAnsys Heart in editable mode by running:\nVerify the installation by checking the version of the library:\nLatest version installation"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#start-a-discussion",
        "title": "Contributing as a user > Start a discussion",
        "section": "Start a discussion",
        "text": "Complex topics may require a discussion. Whether you want to know how to use\nPyAnsys Heart for solving your specific problem or you have a suggestion for a new\nfeature, a discussion is a good place to start. You can open a new discussion\nin the PyAnsys Heart discussions section.\nStart a discussion"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#answer-questions",
        "title": "Contributing as a user > Answer questions",
        "section": "Answer questions",
        "text": "Another great way to contribute is to help others by answering their questions.\nMaintain a positive and constructive attitude while answering questions. If you\ndon’t know the answer, you can still help by pointing the person in the right\ndirection.\nAnswer questions"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#share-your-work",
        "title": "Contributing as a user > Share your work",
        "section": "Share your work",
        "text": "If you have used PyAnsys Heart to create something interesting, share it with the rest\nof the community. You can share your work in the PyAnsys Heart discussions. Include\na brief description of your work and any relevant links that others may find\nuseful.\nShare your work"
    },
    {
        "objectID": "contribute/user",
        "href": "contribute/user.html#view-documentation",
        "title": "Contributing as a user > View documentation",
        "section": "View documentation",
        "text": "Documentation for the latest stable release of PyAnsys Heart is hosted at\nPyAnsys Heart documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView documentation"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#mechanicssimulator",
        "title": "MechanicsSimulator",
        "section": "MechanicsSimulator",
        "text": "Bases: BaseSimulator\nMechanics simulator with imposed active stress.\nMechanicsSimulator\nMechanicsSimulator\nBaseSimulator"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#ansys.heart.core.simulator.MechanicsSimulator",
        "title": "MechanicsSimulator > MechanicsSimulator > MechanicsSimulator",
        "section": "MechanicsSimulator > MechanicsSimulator",
        "text": "class ansys.heart.core.simulator.MechanicsSimulator(model: ansys.heart.core.models.HeartModel, dyna_settings: ansys.heart.core.settings.settings.DynaSettings, simulation_directory: pathlib = '', initial_stress: bool = True)\n\nBases: BaseSimulator\n\nMechanics simulator with imposed active stress.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#overview",
        "title": "MechanicsSimulator > Overview",
        "section": "Overview",
        "text": "simulate\nLaunch the main mechanical simulation.\ncompute_stress_free_configuration\nCompute the stress-free configuration of the model.\ninitial_stress\nIf stress free computation is taken into considered.\nOverview\nsimulate\ncompute_stress_free_configuration\ninitial_stress"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#import-detail",
        "title": "MechanicsSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#attribute-detail",
        "title": "MechanicsSimulator > Attribute detail",
        "section": "Attribute detail",
        "text": "If stress free computation is taken into considered.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#MechanicsSimulator.initial_stress",
        "title": "MechanicsSimulator > Attribute detail > initial_stress",
        "section": "Attribute detail > initial_stress",
        "text": "MechanicsSimulator.initial_stress = True\n\nIf stress free computation is taken into considered.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#method-detail",
        "title": "MechanicsSimulator > Method detail",
        "section": "Method detail",
        "text": "Launch the main mechanical simulation.\nsimulation folder name, by default “main-mechanics”\nfolder contains stress free simulation.\nUse “zeropressure” under root directory if None\nFlag indicating whether to run post-process scripts, by default True\nuser defined k files, by default []\nCompute the stress-free configuration of the model.\nsimulation folder name, by default “zeropressure”\nrun simulation and overwrite files, by default True\nuser defined k files, by default []\nMethod detail\npython:str\noptional\npython:str\npython:None\noptional\noptional\npython:list\npython:str\noptional\npython:str\noptional\noptional\npython:list\npython:str\noptional"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#MechanicsSimulator.simulate",
        "title": "MechanicsSimulator > Method detail > simulate",
        "section": "Method detail > simulate",
        "text": "MechanicsSimulator.simulate(folder_name: str = 'main-mechanics', zerop_folder: str | None = None, auto_post: bool = True, extra_k_files: list[str] = [])\n\nLaunch the main mechanical simulation.\n\nParameters\n\nfolder_name\n\npython:str, optional\n\nsimulation folder name, by default “main-mechanics”\n\nzerop_folder\n\npython:str | python:None, optional\n\nfolder contains stress free simulation.\nUse “zeropressure” under root directory if None\n\nauto_post\n\nbool, optional\n\nFlag indicating whether to run post-process scripts, by default True\n\nextra_k_files\n\npython:list[python:str], optional\n\nuser defined k files, by default []\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/MechanicsSimulator",
        "href": "api/ansys/heart/core/simulator/MechanicsSimulator.html#MechanicsSimulator.compute_stress_free_configuration",
        "title": "MechanicsSimulator > Method detail > compute_stress_free_configuration",
        "section": "Method detail > compute_stress_free_configuration",
        "text": "MechanicsSimulator.compute_stress_free_configuration(folder_name='zeropressure', overwrite: bool = True, extra_k_files: list[str] = [])\n\nCompute the stress-free configuration of the model.\n\nParameters\n\nfolder_name\n\npython:str, optional\n\nsimulation folder name, by default “zeropressure”\n\noverwrite\n\nbool, optional\n\nrun simulation and overwrite files, by default True\n\nextra_k_files\n\npython:list[python:str], optional\n\nuser defined k files, by default []\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/preprocessor/doc_example_stimulation",
        "href": "examples/preprocessor/doc_example_stimulation.html#stimulation-definition-example",
        "title": "Stimulation definition example",
        "section": "Stimulation definition example",
        "text": "This example shows you how to define an EP stimulation. It demonstrates how you\ncan load a pre-computed heart model, define a stimulation region based on a sphere\ncentered on the apex, and a sphere centered on a point chosen in Universal\nVentricular Coordinates (UVC).\nStimulation definition example"
    },
    {
        "objectID": "examples/preprocessor/doc_example_stimulation",
        "href": "examples/preprocessor/doc_example_stimulation.html#example-setup",
        "title": "Stimulation definition example > Example setup",
        "section": "Example setup",
        "text": "Loading required modules and heart model.\nExample setup"
    },
    {
        "objectID": "examples/preprocessor/doc_example_stimulation",
        "href": "examples/preprocessor/doc_example_stimulation.html#perform-the-required-imports",
        "title": "Stimulation definition example > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths.\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/doc_example_stimulation",
        "href": "examples/preprocessor/doc_example_stimulation.html#define-stimulation-at-the-apex",
        "title": "Stimulation definition example > Define stimulation at the apex",
        "section": "Define stimulation at the apex",
        "text": "Select points inside sphere centered at the left apex.\nDefine stimulation at the apex"
    },
    {
        "objectID": "examples/preprocessor/doc_example_stimulation",
        "href": "examples/preprocessor/doc_example_stimulation.html#define-stimulation-based-on-uvc",
        "title": "Stimulation definition example > Define stimulation based on UVC",
        "section": "Define stimulation based on UVC",
        "text": "Select points inside sphere centered at a chosen point based on UVC coordinates\n(if the model has UVC).\nDownload Jupyter notebook: doc_example_stimulation.ipynb\nDownload Python source code: doc_example_stimulation.py\nDownload zipped: doc_example_stimulation.zip\nGallery generated by Sphinx-Gallery\nDefine stimulation based on UVC\nDownload Jupyter notebook: doc_example_stimulation.ipynb\nDownload Python source code: doc_example_stimulation.py\nDownload zipped: doc_example_stimulation.zip"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#heartmodel",
        "title": "HeartModel",
        "section": "HeartModel",
        "text": "Parent class for heart models.\nHeartModel\nHeartModel"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#ansys.heart.core.models.HeartModel",
        "title": "HeartModel > HeartModel > HeartModel",
        "section": "HeartModel > HeartModel",
        "text": "class ansys.heart.core.models.HeartModel(working_directory: pathlib.Path | str = None)\n\nParent class for heart models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#overview",
        "title": "HeartModel > Overview",
        "section": "Overview",
        "text": "create_part_by_ids\nCreate a new part by element ids.\nadd_purkinje_from_kfile\nRead an LS-DYNA file containing purkinje beams and nodes.\nload_input\nLoad an input model.\nmesh_volume\nRemesh the input model and fill the volume.\nget_part\nGet specific part based on part name.\nadd_part\nDynamically add a part as an attribute to the object.\nremove_part\nRemove a part with a specific name from the model.\nsummary\nGet summary information of the model as a dictionary.\nplot_mesh\nPlot the volume mesh of the heart model.\nplot_part\nPlot a part in mesh.\nplot_fibers\nPlot the mesh and fibers as streamlines.\nplot_surfaces\nPlot all the surfaces in the model.\nplot_purkinje\nPlot the mesh and Purkinje network.\nsave_model\nSave the model and necessary info to reconstruct.\nload_model_from_mesh\nLoad model from an existing VTU file and part info dictionary.\nget_apex_node_set\nGet a node set around apex point.\ncreate_stiff_ventricle_base\nUse universal coordinates to generate a stiff base region.\ncreate_atrial_stiff_ring\nCreate a part for solids close to atrial caps.\nparts\nReturn list of parts.\npart_names\nReturn list of part names.\npart_ids\nReturn list of used part ids.\nsurfaces\nReturn list of all defined surfaces.\nsurface_names\nReturn list of all defined surface names.\nsurface_ids\nReturn list of all defined surface names.\ncavities\nReturn list of cavities in the model.\npart_name_to_part_id\nDictionary that maps the part name to the part id.\npart_id_to_part_name\nDictionary that maps part id to part name.\nsurface_name_to_surface_id\nDictionary that maps surface name to surface id.\nsurface_id_to_surface_name\nDictionary that maps surface name to surface id.\nl4cv_axis\nl4cv axis.\nl2cv_axis\nl2cv axis.\nshort_axis\nl2cv axis.\ncap_centroids\nReturn list of cap centroids.\nworkdir\nWorking directory.\nmesh\nComputational mesh.\nfluid_mesh\nGenerated fluid mesh.\nelectrodes\nElectrodes positions for ECG computing.\nconduction_system\nMesh defining the conduction system.\n__str__\nRepresent self as string.\nOverview\ncreate_part_by_ids\nadd_purkinje_from_kfile\nload_input\nmesh_volume\nget_part\nadd_part\nremove_part\nsummary\nplot_mesh\nplot_part\nplot_fibers\nplot_surfaces\nplot_purkinje\nsave_model\nload_model_from_mesh\nget_apex_node_set\ncreate_stiff_ventricle_base\ncreate_atrial_stiff_ring\nparts\npart_names\npart_ids\nsurfaces\nsurface_names\nsurface_ids\ncavities\npart_name_to_part_id\npart_id_to_part_name\nsurface_name_to_surface_id\nsurface_id_to_surface_name\nl4cv_axis\nl2cv_axis\nshort_axis\ncap_centroids\nworkdir\nmesh\nfluid_mesh\nelectrodes\nconduction_system\n__str__"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#import-detail",
        "title": "HeartModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#property-detail",
        "title": "HeartModel > Property detail",
        "section": "Property detail",
        "text": "Return list of parts.\nReturn list of part names.\nReturn list of used part ids.\nReturn list of all defined surfaces.\nReturn list of all defined surface names.\nReturn list of all defined surface names.\nReturn list of cavities in the model.\nDictionary that maps the part name to the part id.\nDictionary that maps part id to part name.\nDictionary that maps surface name to surface id.\nDictionary that maps surface name to surface id.\nl4cv axis.\nl2cv axis.\nl2cv axis.\nReturn list of cap centroids.\nProperty detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.parts",
        "title": "HeartModel > Property detail > parts",
        "section": "Property detail > parts",
        "text": "property HeartModel.parts: List[ansys.heart.core.objects.Part]\n\nReturn list of parts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.part_names",
        "title": "HeartModel > Property detail > part_names",
        "section": "Property detail > part_names",
        "text": "property HeartModel.part_names: List[str]\n\nReturn list of part names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.part_ids",
        "title": "HeartModel > Property detail > part_ids",
        "section": "Property detail > part_ids",
        "text": "property HeartModel.part_ids: List[int]\n\nReturn list of used part ids.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.surfaces",
        "title": "HeartModel > Property detail > surfaces",
        "section": "Property detail > surfaces",
        "text": "property HeartModel.surfaces: List[ansys.heart.core.objects.SurfaceMesh]\n\nReturn list of all defined surfaces.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.surface_names",
        "title": "HeartModel > Property detail > surface_names",
        "section": "Property detail > surface_names",
        "text": "property HeartModel.surface_names: List[str]\n\nReturn list of all defined surface names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.surface_ids",
        "title": "HeartModel > Property detail > surface_ids",
        "section": "Property detail > surface_ids",
        "text": "property HeartModel.surface_ids: List[str]\n\nReturn list of all defined surface names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.cavities",
        "title": "HeartModel > Property detail > cavities",
        "section": "Property detail > cavities",
        "text": "property HeartModel.cavities: List[ansys.heart.core.objects.Cavity]\n\nReturn list of cavities in the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.part_name_to_part_id",
        "title": "HeartModel > Property detail > part_name_to_part_id",
        "section": "Property detail > part_name_to_part_id",
        "text": "property HeartModel.part_name_to_part_id: dict\n\nDictionary that maps the part name to the part id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.part_id_to_part_name",
        "title": "HeartModel > Property detail > part_id_to_part_name",
        "section": "Property detail > part_id_to_part_name",
        "text": "property HeartModel.part_id_to_part_name: dict\n\nDictionary that maps part id to part name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.surface_name_to_surface_id",
        "title": "HeartModel > Property detail > surface_name_to_surface_id",
        "section": "Property detail > surface_name_to_surface_id",
        "text": "property HeartModel.surface_name_to_surface_id: dict\n\nDictionary that maps surface name to surface id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.surface_id_to_surface_name",
        "title": "HeartModel > Property detail > surface_id_to_surface_name",
        "section": "Property detail > surface_id_to_surface_name",
        "text": "property HeartModel.surface_id_to_surface_name: dict\n\nDictionary that maps surface name to surface id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.l4cv_axis",
        "title": "HeartModel > Property detail > l4cv_axis",
        "section": "Property detail > l4cv_axis",
        "text": "property HeartModel.l4cv_axis: dict\n\nl4cv axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.l2cv_axis",
        "title": "HeartModel > Property detail > l2cv_axis",
        "section": "Property detail > l2cv_axis",
        "text": "property HeartModel.l2cv_axis: dict\n\nl2cv axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.short_axis",
        "title": "HeartModel > Property detail > short_axis",
        "section": "Property detail > short_axis",
        "text": "property HeartModel.short_axis: dict\n\nl2cv axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.cap_centroids",
        "title": "HeartModel > Property detail > cap_centroids",
        "section": "Property detail > cap_centroids",
        "text": "property HeartModel.cap_centroids\n\nReturn list of cap centroids.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#attribute-detail",
        "title": "HeartModel > Attribute detail",
        "section": "Attribute detail",
        "text": "Working directory.\nComputational mesh.\nGenerated fluid mesh.\nElectrodes positions for ECG computing.\nMesh defining the conduction system.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.workdir",
        "title": "HeartModel > Attribute detail > workdir",
        "section": "Attribute detail > workdir",
        "text": "HeartModel.workdir\n\nWorking directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.mesh",
        "title": "HeartModel > Attribute detail > mesh",
        "section": "Attribute detail > mesh",
        "text": "HeartModel.mesh\n\nComputational mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.fluid_mesh",
        "title": "HeartModel > Attribute detail > fluid_mesh",
        "section": "Attribute detail > fluid_mesh",
        "text": "HeartModel.fluid_mesh\n\nGenerated fluid mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.electrodes",
        "title": "HeartModel > Attribute detail > electrodes",
        "section": "Attribute detail > electrodes",
        "text": "HeartModel.electrodes: List[ansys.heart.core.objects.Point] = []\n\nElectrodes positions for ECG computing.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.conduction_system",
        "title": "HeartModel > Attribute detail > conduction_system",
        "section": "Attribute detail > conduction_system",
        "text": "HeartModel.conduction_system: ansys.heart.core.objects._BeamsMesh\n\nMesh defining the conduction system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#method-detail",
        "title": "HeartModel > Method detail",
        "section": "Method detail",
        "text": "Represent self as string.\nCreate a new part by element ids.\nelement id list\npart name\nreturn the part if succeed\nRead an LS-DYNA file containing purkinje beams and nodes.\nbeamnet name\nLoad an input model.\nThe input surface mesh, represented by a VTK PolyData object.\nPart definitions of the input model. Each part is enclosed by N number of boundaries.\nScalar used to identify boundaries.\nRemesh the input model and fill the volume.\nFlag for switch to non-manifold mesher, by default False\nFlag indicating whether to overwrite the existing .msh.h5 mesh, by default True\nGlobal mesh size used for the generated mesh, by default 1.5\nPath to the generated Fluent .msh.h5 mesh, by default None\nDictionary specifying the target mesh size for each part, by default None.\nGlobal size used for setting up the size-field for the shrink-wrap algorithm,\nby default None\nPer part size used for setting up the size-field for the shrink-wrap algorithm,\nby default None\nWhen the input surfaces are non-manifold the wrapper tries\nto reconstruct the surface and parts. Inevitably this leads to\nreconstruction errors. Nevertheless, in many instances this approach is\nrobuster than meshing from a manifold surface. Moreover, any clear interface\nbetween parts is potentially lost.\nWhen mesh_size_per_part is incomplete, remaining part sizes default to the\nglobal mesh size. This is an experimental setting. Any wrap sizes given\nas input argument are ignored when the wrapper is not used.\nGet specific part based on part name.\nDynamically add a part as an attribute to the object.\nRemove a part with a specific name from the model.\nGet summary information of the model as a dictionary.\nPlot the volume mesh of the heart model.\nWhether to plot the edges, by default True\nColor by cell/point data, by default “_volume-id”\nPlot a part in mesh.\npart to highlight in mesh\nPlot the mesh and fibers as streamlines.\nFlag indicating whether to plot the streamlines on the raw mesh, by default False\nNumber of seed points. Recommended to use 5000, by default 1000\nPlot all the surfaces in the model.\nImport modules and load model.\n>>> import ansys.heart.core.models as models\n>>> model = models.HeartModel.load_model(“my_model.pickle”)\nPlot the model\n>>> model.plot(show_edges=True)\nPlot the mesh and Purkinje network.\nSave the model and necessary info to reconstruct.\nPath to the model\nThe mesh of the heart model will be saved as .vtu file, and\nan additional partinfo.json file will be written to reconstruct\nthe heart model from the VTU file.\nLoad model from an existing VTU file and part info dictionary.\nPath to the VTU file containing the mesh.\nPath to the JSON file that contains the part info to reconstruct the model.\nGet a node set around apex point.\non which part, by default “left”\non surface or in mesh, by default “epicardium”\nsearch in radius, by default 3\napex node set\nUse universal coordinates to generate a stiff base region.\nuvc_l larger than threshold will be set as stiff material, by default 0.9\na uvc_l value larger than this threshold in the right ventricle will be set to a stiff\nmaterial, by default 0.95\nmaterial to assign, by default MAT295(rho=0.001,\niso=ISO(itype=1, beta=2, kappa=10, mu1=0.1, alpha1=2)\nPart associated with the stiff base region.\nCreate a part for solids close to atrial caps.\nInfluence region, by default 2\nPart of atrial rings if created\nMethod detail\nList\npython:int\npython:str\nUnion\npython:None\nPart\npathlib.Path\npython:str\npv.PolyData\npython:dict\npython:str\noptional\noptional\npython:float\noptional\npython:str\noptional\npython:dict\noptional\npython:float\noptional\npython:dict\noptional\noptional\npython:str\noptional\nPart\noptional\npython:int\noptional\npython:str\npython:str\npython:str\noptional\noptional\npython:float\noptional\nnp.ndarray\npython:float\noptional\npython:float\noptional\nMechanicalMaterialModel\noptional\nPart\nfoat\noptional\nUnion\npython:None\nPart"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.__str__",
        "title": "HeartModel > Method detail > __str__",
        "section": "Method detail > __str__",
        "text": "HeartModel.__str__()\n\nRepresent self as string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.create_part_by_ids",
        "title": "HeartModel > Method detail > create_part_by_ids",
        "section": "Method detail > create_part_by_ids",
        "text": "HeartModel.create_part_by_ids(eids: List[int], name: str) -> None | ansys.heart.core.objects.Part\n\nCreate a new part by element ids.\n\nParameters\n\neids\n\nList[python:int]\n\nelement id list\n\nname\n\npython:str\n\npart name\n\nReturns\n\nUnion[python:None, Part]\n\nreturn the part if succeed\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.add_purkinje_from_kfile",
        "title": "HeartModel > Method detail > add_purkinje_from_kfile",
        "section": "Method detail > add_purkinje_from_kfile",
        "text": "HeartModel.add_purkinje_from_kfile(filename: pathlib.Path, name: str) -> None\n\nRead an LS-DYNA file containing purkinje beams and nodes.\n\nParameters\n\nfilename\n\npathlib.Path\n\n\n\nname\n\npython:str\n\nbeamnet name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.load_input",
        "title": "HeartModel > Method detail > load_input",
        "section": "Method detail > load_input",
        "text": "HeartModel.load_input(input_vtp: pyvista.PolyData, part_definitions: dict, scalar: str)\n\nLoad an input model.\n\nParameters\n\ninput_vtp\n\npv.PolyData\n\nThe input surface mesh, represented by a VTK PolyData object.\n\npart_definitions\n\npython:dict\n\nPart definitions of the input model. Each part is enclosed by N number of boundaries.\n\nscalar\n\npython:str\n\nScalar used to identify boundaries.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.mesh_volume",
        "title": "HeartModel > Method detail > mesh_volume",
        "section": "Method detail > mesh_volume",
        "text": "HeartModel.mesh_volume(use_wrapper: bool = False, overwrite_existing_mesh: bool = True, global_mesh_size: float = 1.5, path_to_fluent_mesh: str = None, mesh_size_per_part: dict = None, _global_wrap_size: float = 1.5, _wrap_size_per_part: dict = None) -> ansys.heart.core.objects.Mesh\n\nRemesh the input model and fill the volume.\n\nParameters\n\nuse_wrapper\n\nbool, optional\n\nFlag for switch to non-manifold mesher, by default False\n\noverwrite_existing_mesh\n\nbool, optional\n\nFlag indicating whether to overwrite the existing .msh.h5 mesh, by default True\n\nglobal_mesh_size\n\npython:float, optional\n\nGlobal mesh size used for the generated mesh, by default 1.5\n\npath_to_fluent_mesh\n\npython:str, optional\n\nPath to the generated Fluent .msh.h5 mesh, by default None\n\nmesh_size_per_part\n\npython:dict, optional\n\nDictionary specifying the target mesh size for each part, by default None.\n\n_global_wrap_size\n\npython:float, optional\n\nGlobal size used for setting up the size-field for the shrink-wrap algorithm,\nby default None\n\n_wrap_size_per_part\n\npython:dict, optional\n\nPer part size used for setting up the size-field for the shrink-wrap algorithm,\nby default None\n\nNotes\n\nWhen the input surfaces are non-manifold the wrapper tries\nto reconstruct the surface and parts. Inevitably this leads to\nreconstruction errors. Nevertheless, in many instances this approach is\nrobuster than meshing from a manifold surface. Moreover, any clear interface\nbetween parts is potentially lost.\nWhen mesh_size_per_part is incomplete, remaining part sizes default to the\nglobal mesh size. This is an experimental setting. Any wrap sizes given\nas input argument are ignored when the wrapper is not used.\n\nExamples\n\n>>> from ansys.heart.core.models import HeartModel\n>>> model = HeartModel()\n>>> model.load_input(geom, part_definitions, scalar)\n>>> # mesh the volume with a global size of 1.5 and size of 1 for the left ventricle.\n>>> model.mesh_volume(\n...     use_wrapper=True,\n...     global_mesh_size=1.5,\n...     path_to_fluent_mesh=\"simulation-mesh.msh.h5\",\n...     mesh_size_per_part={\"Left ventricle\": 1},\n... )\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.get_part",
        "title": "HeartModel > Method detail > get_part",
        "section": "Method detail > get_part",
        "text": "HeartModel.get_part(name: str, by_substring: bool = False) -> ansys.heart.core.objects.Part | None\n\nGet specific part based on part name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.add_part",
        "title": "HeartModel > Method detail > add_part",
        "section": "Method detail > add_part",
        "text": "HeartModel.add_part(part_name: str) -> None\n\nDynamically add a part as an attribute to the object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.remove_part",
        "title": "HeartModel > Method detail > remove_part",
        "section": "Method detail > remove_part",
        "text": "HeartModel.remove_part(part_name: str) -> None\n\nRemove a part with a specific name from the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.summary",
        "title": "HeartModel > Method detail > summary",
        "section": "Method detail > summary",
        "text": "HeartModel.summary() -> dict\n\nGet summary information of the model as a dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.plot_mesh",
        "title": "HeartModel > Method detail > plot_mesh",
        "section": "Method detail > plot_mesh",
        "text": "HeartModel.plot_mesh(show_edges: bool = True, color_by: str = '_volume-id')\n\nPlot the volume mesh of the heart model.\n\nParameters\n\nshow_edges\n\nbool, optional\n\nWhether to plot the edges, by default True\n\ncolor_by\n\npython:str, optional\n\nColor by cell/point data, by default “_volume-id”\n\nExamples\n\n>>> import ansys.heart.core.models as models\n>>> model = models.HeartModel.load_model(\"heart_model.pickle\")\n>>> model.plot_mesh(show_edges=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.plot_part",
        "title": "HeartModel > Method detail > plot_part",
        "section": "Method detail > plot_part",
        "text": "HeartModel.plot_part(part: ansys.heart.core.objects.Part)\n\nPlot a part in mesh.\n\nParameters\n\npart\n\nPart\n\npart to highlight in mesh\n\nExamples\n\n>>> import ansys.heart.core.models as models\n>>> model = models.HeartModel.load_model(\"my_model.pickle\")\n>>> model.part(model.left_ventricle)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.plot_fibers",
        "title": "HeartModel > Method detail > plot_fibers",
        "section": "Method detail > plot_fibers",
        "text": "HeartModel.plot_fibers(n_seed_points: int = 1000)\n\nPlot the mesh and fibers as streamlines.\n\nParameters\n\nplot_raw_mesh\n\nbool, optional\n\nFlag indicating whether to plot the streamlines on the raw mesh, by default False\n\nn_seed_points\n\npython:int, optional\n\nNumber of seed points. Recommended to use 5000, by default 1000\n\nExamples\n\n>>> import ansys.heart.core.models as models\n>>> model = models.HeartModel.load_model(\"my_model.pickle\")\n>>> model.plot_fibers(n_seed_points=5000)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.plot_surfaces",
        "title": "HeartModel > Method detail > plot_surfaces",
        "section": "Method detail > plot_surfaces",
        "text": "HeartModel.plot_surfaces(show_edges: bool = True)\n\nPlot all the surfaces in the model.\n\nExamples\n\nImport modules and load model.\n>>> import ansys.heart.core.models as models\n>>> model = models.HeartModel.load_model(“my_model.pickle”)\nPlot the model\n>>> model.plot(show_edges=True)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.plot_purkinje",
        "title": "HeartModel > Method detail > plot_purkinje",
        "section": "Method detail > plot_purkinje",
        "text": "HeartModel.plot_purkinje()\n\nPlot the mesh and Purkinje network.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.save_model",
        "title": "HeartModel > Method detail > save_model",
        "section": "Method detail > save_model",
        "text": "HeartModel.save_model(filename: str)\n\nSave the model and necessary info to reconstruct.\n\nParameters\n\nfilename\n\npython:str\n\nPath to the model\n\nNotes\n\nThe mesh of the heart model will be saved as .vtu file, and\nan additional partinfo.json file will be written to reconstruct\nthe heart model from the VTU file.\n\nExamples\n\n>>> model.save_model(\"my-heart-model.vtu\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.load_model_from_mesh",
        "title": "HeartModel > Method detail > load_model_from_mesh",
        "section": "Method detail > load_model_from_mesh",
        "text": "HeartModel.load_model_from_mesh(filename_mesh: str, filename_part_info: str)\n\nLoad model from an existing VTU file and part info dictionary.\n\nParameters\n\nfilename_mesh\n\npython:str\n\nPath to the VTU file containing the mesh.\n\nfilename_part_info\n\npython:str\n\nPath to the JSON file that contains the part info to reconstruct the model.\n\nExamples\n\n>>> from ansys.heart.core.models import FullHeart\n>>> model: FullHeart = FullHeart()\n>>> model.load_model_from_mesh(\"mesh.vtu\", \"mesh.partinfo.json\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.get_apex_node_set",
        "title": "HeartModel > Method detail > get_apex_node_set",
        "section": "Method detail > get_apex_node_set",
        "text": "HeartModel.get_apex_node_set(part: Literal['left', 'right'] = 'left', option: Literal['endocardium', 'epicardium', 'myocardium'] = 'epicardium', radius: float = 3) -> numpy.ndarray\n\nGet a node set around apex point.\n\nParameters\n\npart\n\nleft&quot;, &quot;right&quot;], optional\n\non which part, by default “left”\n\noption\n\nendocardium&quot;, &quot;epicardium&quot;, &quot;myocardium&quot;], optional\n\non surface or in mesh, by default “epicardium”\n\nradius\n\npython:float, optional\n\nsearch in radius, by default 3\n\nReturns\n\nnp.ndarray\n\napex node set\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.create_stiff_ventricle_base",
        "title": "HeartModel > Method detail > create_stiff_ventricle_base",
        "section": "Method detail > create_stiff_ventricle_base",
        "text": "HeartModel.create_stiff_ventricle_base(threshold_left_ventricle: float = 0.9, threshold_right_ventricle: float = 0.95, stiff_material: ansys.heart.core.settings.material.material.MechanicalMaterialModel = Mat295(rho=0.001, iso=ISO(itype=1, beta=2, kappa=10, mu1=0.1, alpha1=2))) -> None | ansys.heart.core.objects.Part\n\nUse universal coordinates to generate a stiff base region.\n\nParameters\n\nthreshold_left_ventricle\n\npython:float, optional\n\nuvc_l larger than threshold will be set as stiff material, by default 0.9\n\nthreshold_right_ventricle\n\npython:float, optional\n\na uvc_l value larger than this threshold in the right ventricle will be set to a stiff\nmaterial, by default 0.95\n\nstiff_material\n\nMechanicalMaterialModel, optional\n\nmaterial to assign, by default MAT295(rho=0.001,\niso=ISO(itype=1, beta=2, kappa=10, mu1=0.1, alpha1=2)\n\nReturns\n\nPart\n\nPart associated with the stiff base region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/HeartModel",
        "href": "api/ansys/heart/core/models/HeartModel.html#HeartModel.create_atrial_stiff_ring",
        "title": "HeartModel > Method detail > create_atrial_stiff_ring",
        "section": "Method detail > create_atrial_stiff_ring",
        "text": "HeartModel.create_atrial_stiff_ring(radius: float = 2) -> None | ansys.heart.core.objects.Part\n\nCreate a part for solids close to atrial caps.\n\nParameters\n\nradius\n\nfoat, optional\n\nInfluence region, by default 2\n\nReturns\n\nUnion[python:None, Part]\n\nPart of atrial rings if created\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#epsimulator",
        "title": "EPSimulator",
        "section": "EPSimulator",
        "text": "Bases: BaseSimulator\nEP Simulator.\nEPSimulator\nEPSimulator\nBaseSimulator"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#ansys.heart.core.simulator.EPSimulator",
        "title": "EPSimulator > EPSimulator > EPSimulator",
        "section": "EPSimulator > EPSimulator",
        "text": "class ansys.heart.core.simulator.EPSimulator(model: ansys.heart.core.models.HeartModel, dyna_settings: ansys.heart.core.settings.settings.DynaSettings, simulation_directory: pathlib = '')\n\nBases: BaseSimulator\n\nEP Simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#overview",
        "title": "EPSimulator > Overview",
        "section": "Overview",
        "text": "simulate\nLaunch the electrophysiology simulation.\ncompute_purkinje\nCompute the purkinje network.\ncompute_conduction_system\nCompute the conduction system.\nOverview\nsimulate\ncompute_purkinje\ncompute_conduction_system"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#import-detail",
        "title": "EPSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#method-detail",
        "title": "EPSimulator > Method detail",
        "section": "Method detail",
        "text": "Launch the electrophysiology simulation.\nsimulation folder name, by default “main-ep”\nuser defined k files, by default []\nCompute the purkinje network.\nCompute the conduction system.\nMethod detail\npython:str\noptional\npython:list\npython:str\noptional"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#EPSimulator.simulate",
        "title": "EPSimulator > Method detail > simulate",
        "section": "Method detail > simulate",
        "text": "EPSimulator.simulate(folder_name='main-ep', extra_k_files: list[str] = [])\n\nLaunch the electrophysiology simulation.\n\nParameters\n\nfolder_name\n\npython:str, optional\n\nsimulation folder name, by default “main-ep”\n\nextra_k_files\n\npython:list[python:str], optional\n\nuser defined k files, by default []\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#EPSimulator.compute_purkinje",
        "title": "EPSimulator > Method detail > compute_purkinje",
        "section": "Method detail > compute_purkinje",
        "text": "EPSimulator.compute_purkinje()\n\nCompute the purkinje network.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/EPSimulator",
        "href": "api/ansys/heart/core/simulator/EPSimulator.html#EPSimulator.compute_conduction_system",
        "title": "EPSimulator > Method detail > compute_conduction_system",
        "section": "Method detail > compute_conduction_system",
        "text": "EPSimulator.compute_conduction_system()\n\nCompute the conduction system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#insulator",
        "title": "Insulator",
        "section": "Insulator",
        "text": "Insulator material.\nInsulator\nInsulator"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#ansys.heart.core.settings.material.ep_material.EPMaterial.Insulator",
        "title": "Insulator > Insulator > Insulator",
        "section": "Insulator > Insulator",
        "text": "class ansys.heart.core.settings.material.ep_material.EPMaterial.Insulator\n\nInsulator material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#overview",
        "title": "Insulator > Overview",
        "section": "Overview",
        "text": "sigma_fiber\ncm\nbeta\n__repr__\nPrint a message.\nOverview\nsigma_fiber\ncm\nbeta\n__repr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#import-detail",
        "title": "Insulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#attribute-detail",
        "title": "Insulator > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.sigma_fiber",
        "title": "Insulator > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "Insulator.sigma_fiber = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.cm",
        "title": "Insulator > Attribute detail > cm",
        "section": "Attribute detail > cm",
        "text": "Insulator.cm = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.beta",
        "title": "Insulator > Attribute detail > beta",
        "section": "Attribute detail > beta",
        "text": "Insulator.beta = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#method-detail",
        "title": "Insulator > Method detail",
        "section": "Method detail",
        "text": "Print a message.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Insulator.html#Insulator.__repr__",
        "title": "Insulator > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Insulator.__repr__()\n\nPrint a message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.html#mechanicalmaterialmodel",
        "title": "MechanicalMaterialModel",
        "section": "MechanicalMaterialModel",
        "text": "Base class for all mechanical material model.\nMechanicalMaterialModel\nMechanicalMaterialModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.html#ansys.heart.core.settings.material.material.MechanicalMaterialModel",
        "title": "MechanicalMaterialModel > MechanicalMaterialModel > MechanicalMaterialModel",
        "section": "MechanicalMaterialModel > MechanicalMaterialModel",
        "text": "class ansys.heart.core.settings.material.material.MechanicalMaterialModel\n\nBase class for all mechanical material model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.html#import-detail",
        "title": "MechanicalMaterialModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.html#classes",
        "title": "MechanicalMaterialModel > Classes",
        "section": "Classes",
        "text": "DummyMaterial\nJust for initialization.\nClasses\nDummyMaterial"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_mechanical_simulation",
        "href": "examples/postprocessor/doc_autopost_mechanical_simulation.html#post-process-mechanical-simulation-folder",
        "title": "Post process mechanical simulation folder",
        "section": "Post process mechanical simulation folder",
        "text": "This example shows you how to use post process script after mechanical simulation.\nPost process mechanical simulation folder"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_mechanical_simulation",
        "href": "examples/postprocessor/doc_autopost_mechanical_simulation.html#perform-the-required-imports",
        "title": "Post process mechanical simulation folder > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules\nPerform the required imports"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_mechanical_simulation",
        "href": "examples/postprocessor/doc_autopost_mechanical_simulation.html#set-relevant-paths",
        "title": "Post process mechanical simulation folder > Set relevant paths",
        "section": "Set relevant paths",
        "text": "Set relevant paths"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_mechanical_simulation",
        "href": "examples/postprocessor/doc_autopost_mechanical_simulation.html#create-pv-loop",
        "title": "Post process mechanical simulation folder > Create PV loop",
        "section": "Create PV loop",
        "text": "Pressure-volume loop figure is an important metric for heart function\nAn animation  can be created by\nCreate PV loop"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_mechanical_simulation",
        "href": "examples/postprocessor/doc_autopost_mechanical_simulation.html#myocardium-wall-strain",
        "title": "Post process mechanical simulation folder > Myocardium wall strain",
        "section": "Myocardium wall strain",
        "text": "Compute left ventricle strain in longitudinal, radial, circumferential directions\nMyocardium wall strain"
    },
    {
        "objectID": "examples/postprocessor/doc_autopost_mechanical_simulation",
        "href": "examples/postprocessor/doc_autopost_mechanical_simulation.html#run-with-default-process-scripts",
        "title": "Post process mechanical simulation folder > Run with default process scripts",
        "section": "Run with default process scripts",
        "text": "All above steps are encapsulated in one script:\nYou can open Paraview and load the state file\npost_main2.pvsm,\nand specify the folder.\nDownload Jupyter notebook: doc_autopost_mechanical_simulation.ipynb\nDownload Python source code: doc_autopost_mechanical_simulation.py\nDownload zipped: doc_autopost_mechanical_simulation.zip\nGallery generated by Sphinx-Gallery\nRun with default process scripts\npost_main2.pvsm\nDownload Jupyter notebook: doc_autopost_mechanical_simulation.ipynb\nDownload Python source code: doc_autopost_mechanical_simulation.py\nDownload zipped: doc_autopost_mechanical_simulation.zip"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#active",
        "title": "ACTIVE",
        "section": "ACTIVE",
        "text": "Active module of MAT_295.\nACTIVE\nACTIVE"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ansys.heart.core.settings.material.material.ACTIVE",
        "title": "ACTIVE > ACTIVE > ACTIVE",
        "section": "ACTIVE > ACTIVE",
        "text": "class ansys.heart.core.settings.material.material.ACTIVE\n\nActive module of MAT_295.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#overview",
        "title": "ACTIVE > Overview",
        "section": "Overview",
        "text": "acid\nDo not define it, it will be assigned with an ID of Ca2+ curve\nactype\nType of active model, will be deduced in __post_init__.\nacthr\nCa2+ threshold for active stress, need to be defined for ep-coupled,\nacdir\nDirection of active stress, don’t change it.\nsf\nScaling factor on fiber direction.\nss\nScaling factor on sheet direction.\nsn\nScaling factor on normal direction.\nmodel\nActive model.\nca2_curve\nCa2+ curve for mechanical problem.\n__post_init__\nDeduce actype.\nOverview\nacid\nactype\nacthr\nacdir\nsf\nss\nsn\nmodel\nca2_curve\n__post_init__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#import-detail",
        "title": "ACTIVE > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#attribute-detail",
        "title": "ACTIVE > Attribute detail",
        "section": "Attribute detail",
        "text": "Do not define it, it will be assigned with an ID of Ca2+ curve\nfor mechanical problem or empty for ep-coupled problem.\nType of active model, will be deduced in __post_init__.\nCa2+ threshold for active stress, need to be defined for ep-coupled,\nfor mechanics it’s defined in ActiveCurve.\nDirection of active stress, don’t change it.\nScaling factor on fiber direction.\nScaling factor on sheet direction.\nScaling factor on normal direction.\nActive model.\nCa2+ curve for mechanical problem.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.acid",
        "title": "ACTIVE > Attribute detail > acid",
        "section": "Attribute detail > acid",
        "text": "ACTIVE.acid: int = None\n\nDo not define it, it will be assigned with an ID of Ca2+ curve\nfor mechanical problem or empty for ep-coupled problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.actype",
        "title": "ACTIVE > Attribute detail > actype",
        "section": "Attribute detail > actype",
        "text": "ACTIVE.actype: int = None\n\nType of active model, will be deduced in __post_init__.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.acthr",
        "title": "ACTIVE > Attribute detail > acthr",
        "section": "Attribute detail > acthr",
        "text": "ACTIVE.acthr: float = None\n\nCa2+ threshold for active stress, need to be defined for ep-coupled,\nfor mechanics it’s defined in ActiveCurve.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.acdir",
        "title": "ACTIVE > Attribute detail > acdir",
        "section": "Attribute detail > acdir",
        "text": "ACTIVE.acdir: int = 1\n\nDirection of active stress, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.sf",
        "title": "ACTIVE > Attribute detail > sf",
        "section": "Attribute detail > sf",
        "text": "ACTIVE.sf: float = 1.0\n\nScaling factor on fiber direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.ss",
        "title": "ACTIVE > Attribute detail > ss",
        "section": "Attribute detail > ss",
        "text": "ACTIVE.ss: float = 0.0\n\nScaling factor on sheet direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.sn",
        "title": "ACTIVE > Attribute detail > sn",
        "section": "Attribute detail > sn",
        "text": "ACTIVE.sn: float = 0.0\n\nScaling factor on normal direction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.model",
        "title": "ACTIVE > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "ACTIVE.model: ActiveModel\n\nActive model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.ca2_curve",
        "title": "ACTIVE > Attribute detail > ca2_curve",
        "section": "Attribute detail > ca2_curve",
        "text": "ACTIVE.ca2_curve: ansys.heart.core.settings.material.curve.ActiveCurve\n\nCa2+ curve for mechanical problem.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#method-detail",
        "title": "ACTIVE > Method detail",
        "section": "Method detail",
        "text": "Deduce actype.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ACTIVE",
        "href": "api/ansys/heart/core/settings/material/material/ACTIVE.html#ACTIVE.__post_init__",
        "title": "ACTIVE > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "ACTIVE.__post_init__()\n\nDeduce actype.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#pyansysheartcustomadapter",
        "title": "PyAnsysHeartCustomAdapter",
        "section": "PyAnsysHeartCustomAdapter",
        "text": "Bases: logging.LoggerAdapter\nCustom logging adapter for PyAnsys Heart.\nThis is key to keep the reference to the PyAnsys Heart instance name dynamic.\nIf we use the standard approach which is supplying extra input\nto the logger, we would need to keep inputting PyAnsys Heart instances\nevery time we do a log.\nUsing adapters we just need to specify the PyAnsys Heart instance we refer\nto once.\nPyAnsysHeartCustomAdapter\nPyAnsysHeartCustomAdapter\nlogging.LoggerAdapter\nextra"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#ansys.heart.core.logger.PyAnsysHeartCustomAdapter",
        "title": "PyAnsysHeartCustomAdapter > PyAnsysHeartCustomAdapter > PyAnsysHeartCustomAdapter",
        "section": "PyAnsysHeartCustomAdapter > PyAnsysHeartCustomAdapter",
        "text": "class ansys.heart.core.logger.PyAnsysHeartCustomAdapter(logger: logging.Logger)\n\nBases: logging.LoggerAdapter\n\nCustom logging adapter for PyAnsys Heart.\n\nNotes\n\nThis is key to keep the reference to the PyAnsys Heart instance name dynamic.\n\nIf we use the standard approach which is supplying extra input\nto the logger, we would need to keep inputting PyAnsys Heart instances\nevery time we do a log.\n\nUsing adapters we just need to specify the PyAnsys Heart instance we refer\nto once.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#overview",
        "title": "PyAnsysHeartCustomAdapter > Overview",
        "section": "Overview",
        "text": "process\nProcess extra arguments.\nlog_to_file\nAdd file handler to logger.\nlog_to_stdout\nAdd standard output handler to the logger.\nsetLevel\nChange the log level of the object and the attached handlers.\nlevel\nfile_handler\nstd_out_handler\nlogger\nOverview\nprocess\nlog_to_file\nlog_to_stdout\nsetLevel\nlevel\nfile_handler\nstd_out_handler\nlogger"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#import-detail",
        "title": "PyAnsysHeartCustomAdapter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#attribute-detail",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.level",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > level",
        "section": "Attribute detail > level",
        "text": "PyAnsysHeartCustomAdapter.level = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.file_handler",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > file_handler",
        "section": "Attribute detail > file_handler",
        "text": "PyAnsysHeartCustomAdapter.file_handler: logging.FileHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.std_out_handler",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > std_out_handler",
        "section": "Attribute detail > std_out_handler",
        "text": "PyAnsysHeartCustomAdapter.std_out_handler: logging.StreamHandler | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.logger",
        "title": "PyAnsysHeartCustomAdapter > Attribute detail > logger",
        "section": "Attribute detail > logger",
        "text": "PyAnsysHeartCustomAdapter.logger\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#method-detail",
        "title": "PyAnsysHeartCustomAdapter > Method detail",
        "section": "Method detail",
        "text": "Process extra arguments.\nAdd file handler to logger.\nName of the file where the logs are recorded. By default FILE_NAME\nLevel of logging. E.x. ‘DEBUG’. By default LOG_LEVEL\nAdd standard output handler to the logger.\nLevel of logging record. By default LOG_LEVEL\nChange the log level of the object and the attached handlers.\nMethod detail\npython:str\noptional\npython:str\npython:int\noptional\npython:str\npython:int\noptional"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.process",
        "title": "PyAnsysHeartCustomAdapter > Method detail > process",
        "section": "Method detail > process",
        "text": "PyAnsysHeartCustomAdapter.process(msg: str, kwargs: MutableMapping[str, Dict[str, str]])\n\nProcess extra arguments.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.log_to_file",
        "title": "PyAnsysHeartCustomAdapter > Method detail > log_to_file",
        "section": "Method detail > log_to_file",
        "text": "PyAnsysHeartCustomAdapter.log_to_file(filename: str = FILE_NAME, level: LOG_LEVEL_TYPE = LOG_LEVEL_FILE) -> None\n\nAdd file handler to logger.\n\nParameters\n\nfilename\n\npython:str, optional\n\nName of the file where the logs are recorded. By default FILE_NAME\n\nlevel\n\npython:str or python:int, optional\n\nLevel of logging. E.x. ‘DEBUG’. By default LOG_LEVEL\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.log_to_stdout",
        "title": "PyAnsysHeartCustomAdapter > Method detail > log_to_stdout",
        "section": "Method detail > log_to_stdout",
        "text": "PyAnsysHeartCustomAdapter.log_to_stdout(level: LOG_LEVEL_TYPE = LOG_LEVEL_STDOUT) -> None\n\nAdd standard output handler to the logger.\n\nParameters\n\nlevel\n\npython:str or python:int, optional\n\nLevel of logging record. By default LOG_LEVEL\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter",
        "href": "api/ansys/heart/core/logger/PyAnsysHeartCustomAdapter.html#PyAnsysHeartCustomAdapter.setLevel",
        "title": "PyAnsysHeartCustomAdapter > Method detail > setLevel",
        "section": "Method detail > setLevel",
        "text": "PyAnsysHeartCustomAdapter.setLevel(level: int | str = 'DEBUG')\n\nChange the log level of the object and the attached handlers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "This guide helps you install PyAnsys Heart. It provides information on how to install\nthe package from PyPI, from a wheel file, or from the source code.\nIf you do not have access to PyAnsys Heart you can follow the instructions under Install from a wheel file. You may need to request the wheel files from your Ansys contact.\nConsider installing using a virtual environment to avoid conflicts with other packages.\nInstallation"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#pypi",
        "title": "Getting started > Installation > PyPI",
        "section": "PyPI",
        "text": "Before installing PyAnsys Heart ensure that you have the latest version\nof the pip\npackage manager, run the following command:\nThen, to install PyAnsys Heart, run the following command:\nPyPI"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#github",
        "title": "Getting started > Installation > GitHub",
        "section": "GitHub",
        "text": "To install the latest version of PyAnsys Heart from the source code,\nclone the repository:\nto verify the installation, run the following command:\nGitHub"
    },
    {
        "objectID": "getting-started/installation",
        "href": "getting-started/installation.html#install-from-a-wheel-file",
        "title": "Getting started > Installation > Install from a wheel file",
        "section": "Install from a wheel file",
        "text": "if you lack the internet connection, you can install PyAnsys Heart from a wheel file.\nYou should install PyAnsys Heart by downloading the wheelhouse archive for your\ncorresponding machine architecture from the repository’s\nPyAnsys Heart release page.\nEach release contains a wheel file for the corresponding Python version and\nmachine architecture. For example, to install the wheel file for\nPython 3.10 on a Windows machine, run the following command:\nIf you are on Windows with Python 3.12, unzip the wheelhouse archive to a wheelhouse\ndirectory and then install using the same pip install command as in the preceding example.\nConsider installing using a virtual environment to avoid conflicts with other packages. For more information,\nrefer to the Python documentation.\nInstall from a wheel file"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#systemmodel",
        "title": "SystemModel",
        "section": "SystemModel",
        "text": "Bases: Settings\nStores settings/parameters for system model.\nSystemModel\nSystemModel\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#ansys.heart.core.settings.settings.SystemModel",
        "title": "SystemModel > SystemModel > SystemModel",
        "section": "SystemModel > SystemModel",
        "text": "class ansys.heart.core.settings.settings.SystemModel\n\nBases: Settings\n\nStores settings/parameters for system model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#overview",
        "title": "SystemModel > Overview",
        "section": "Overview",
        "text": "name\nName of the system model.\nleft_ventricle\nParameters for left ventricle.\nright_ventricle\nParameters for right ventricle.\nOverview\nname\nleft_ventricle\nright_ventricle"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#import-detail",
        "title": "SystemModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#attribute-detail",
        "title": "SystemModel > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of the system model.\nParameters for left ventricle.\nParameters for right ventricle.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#SystemModel.name",
        "title": "SystemModel > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "SystemModel.name: str = 'ConstantPreloadWindkesselAfterload'\n\nName of the system model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#SystemModel.left_ventricle",
        "title": "SystemModel > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "SystemModel.left_ventricle: AttrDict = None\n\nParameters for left ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SystemModel",
        "href": "api/ansys/heart/core/settings/settings/SystemModel.html#SystemModel.right_ventricle",
        "title": "SystemModel > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "SystemModel.right_ventricle: AttrDict = None\n\nParameters for right ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#d3plotreader",
        "title": "D3plotReader",
        "section": "D3plotReader",
        "text": "Use DPF to parse d3plot.\nD3plotReader\nD3plotReader"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#ansys.heart.core.post.dpf_utils.D3plotReader",
        "title": "D3plotReader > D3plotReader > D3plotReader",
        "section": "D3plotReader > D3plotReader",
        "text": "class ansys.heart.core.post.dpf_utils.D3plotReader(path: pathlib.Path)\n\nUse DPF to parse d3plot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#overview",
        "title": "D3plotReader > Overview",
        "section": "Overview",
        "text": "get_initial_coordinates\nGet initial coordinates.\nget_ep_fields\nGet EP fields container.\nprint_lsdyna_ms_results\nPrint available ms results.\nget_displacement_at\nGet displacement field.\nget_material_ids\nGet list of material id.\nget_history_variable\nGet history variables in d3plot.\nget_heatflux\nGet nodal heat flux vector from d3plot.\nds\nmodel\nmeshgrid\ntime\nOverview\nget_initial_coordinates\nget_ep_fields\nprint_lsdyna_ms_results\nget_displacement_at\nget_material_ids\nget_history_variable\nget_heatflux\nds\nmodel\nmeshgrid\ntime"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#import-detail",
        "title": "D3plotReader > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#attribute-detail",
        "title": "D3plotReader > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.ds",
        "title": "D3plotReader > Attribute detail > ds",
        "section": "Attribute detail > ds",
        "text": "D3plotReader.ds\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.model",
        "title": "D3plotReader > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "D3plotReader.model\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.meshgrid",
        "title": "D3plotReader > Attribute detail > meshgrid",
        "section": "Attribute detail > meshgrid",
        "text": "D3plotReader.meshgrid: pyvista.UnstructuredGrid\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.time",
        "title": "D3plotReader > Attribute detail > time",
        "section": "Attribute detail > time",
        "text": "D3plotReader.time\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#method-detail",
        "title": "D3plotReader > Method detail",
        "section": "Method detail",
        "text": "Get initial coordinates.\nGet EP fields container.\nPrint available ms results.\nGet displacement field.\nat which time\ndisplacement\nGet list of material id.\nGet history variables in d3plot.\nHistory variables index.\nAt this frame, by default 0.\nHistory variables data.\nd3plot.get_history_variable(hv_index=list(range(9)), at_frame=at_frame) to\nget Deformation gradient (column-wise storage),see MAT_295 in LS-DYNA manual.\nGet nodal heat flux vector from d3plot.\ntime step, by default 2\nheat flux\nMethod detail\npython:float\nnp.ndarray\nnp.ndarray\npython:int\noptional\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.get_initial_coordinates",
        "title": "D3plotReader > Method detail > get_initial_coordinates",
        "section": "Method detail > get_initial_coordinates",
        "text": "D3plotReader.get_initial_coordinates()\n\nGet initial coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.get_ep_fields",
        "title": "D3plotReader > Method detail > get_ep_fields",
        "section": "Method detail > get_ep_fields",
        "text": "D3plotReader.get_ep_fields(at_step: int = None) -> ansys.dpf.core.FieldsContainer\n\nGet EP fields container.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.print_lsdyna_ms_results",
        "title": "D3plotReader > Method detail > print_lsdyna_ms_results",
        "section": "Method detail > print_lsdyna_ms_results",
        "text": "D3plotReader.print_lsdyna_ms_results()\n\nPrint available ms results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.get_displacement_at",
        "title": "D3plotReader > Method detail > get_displacement_at",
        "section": "Method detail > get_displacement_at",
        "text": "D3plotReader.get_displacement_at(time: float) -> numpy.ndarray\n\nGet displacement field.\n\nParameters\n\ntime\n\npython:float\n\nat which time\n\nReturns\n\nnp.ndarray\n\ndisplacement\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.get_material_ids",
        "title": "D3plotReader > Method detail > get_material_ids",
        "section": "Method detail > get_material_ids",
        "text": "D3plotReader.get_material_ids()\n\nGet list of material id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.get_history_variable",
        "title": "D3plotReader > Method detail > get_history_variable",
        "section": "Method detail > get_history_variable",
        "text": "D3plotReader.get_history_variable(hv_index: List[int], at_step: int = 0)\n\nGet history variables in d3plot.\n\nParameters\n\nhv_index: List[int]\n\nHistory variables index.\n\nat_step: int, optional\n\nAt this frame, by default 0.\n\nReturns\n\nnp.ndarray\n\nHistory variables data.\n\nNotes\n\nd3plot.get_history_variable(hv_index=list(range(9)), at_frame=at_frame) to\nget Deformation gradient (column-wise storage),see MAT_295 in LS-DYNA manual.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotReader",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotReader.html#D3plotReader.get_heatflux",
        "title": "D3plotReader > Method detail > get_heatflux",
        "section": "Method detail > get_heatflux",
        "text": "D3plotReader.get_heatflux(step: int = 2) -> numpy.ndarray\n\nGet nodal heat flux vector from d3plot.\n\nParameters\n\nstep\n\npython:int, optional\n\ntime step, by default 2\n\nReturns\n\nnp.ndarray\n\nheat flux\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#passive",
        "title": "Passive",
        "section": "Passive",
        "text": "Bases: EPMaterialModel\nHold data for EP passive material.\nPassive\nPassive\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#ansys.heart.core.settings.material.ep_material.EPMaterial.Passive",
        "title": "Passive > Passive > Passive",
        "section": "Passive > Passive",
        "text": "class ansys.heart.core.settings.material.ep_material.EPMaterial.Passive\n\nBases: EPMaterialModel\n\nHold data for EP passive material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#overview",
        "title": "Passive > Overview",
        "section": "Overview",
        "text": "sigma_fiber\nsigma_sheet\nsigma_sheet_normal\nOverview\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#import-detail",
        "title": "Passive > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#attribute-detail",
        "title": "Passive > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#Passive.sigma_fiber",
        "title": "Passive > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "Passive.sigma_fiber: float\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#Passive.sigma_sheet",
        "title": "Passive > Attribute detail > sigma_sheet",
        "section": "Attribute detail > sigma_sheet",
        "text": "Passive.sigma_sheet: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Passive.html#Passive.sigma_sheet_normal",
        "title": "Passive > Attribute detail > sigma_sheet_normal",
        "section": "Attribute detail > sigma_sheet_normal",
        "text": "Passive.sigma_sheet_normal: float | None = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#cap",
        "title": "Cap",
        "section": "Cap",
        "text": "Bases: Feature\nCap class.\nCap\nCap\nFeature"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#ansys.heart.core.objects.Cap",
        "title": "Cap > Cap > Cap",
        "section": "Cap > Cap",
        "text": "class ansys.heart.core.objects.Cap(name: str = None, cap_type: CapType = None)\n\nBases: Feature\n\nCap class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#overview",
        "title": "Cap > Overview",
        "section": "Overview",
        "text": "global_node_ids_edge\nGlobal node ids of the edge of the cap.\nglobal_centroid_id\nGlobal centroid id.\ncentroid\nCentroid of cap.\ncap_normal\nCompute mean normal of cap.\nOverview\nglobal_node_ids_edge\nglobal_centroid_id\ncentroid\ncap_normal"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#import-detail",
        "title": "Cap > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#property-detail",
        "title": "Cap > Property detail",
        "section": "Property detail",
        "text": "Global node ids of the edge of the cap.\nGlobal centroid id.\nCentroid of cap.\nCompute mean normal of cap.\nProperty detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#Cap.global_node_ids_edge",
        "title": "Cap > Property detail > global_node_ids_edge",
        "section": "Property detail > global_node_ids_edge",
        "text": "property Cap.global_node_ids_edge\n\nGlobal node ids of the edge of the cap.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#Cap.global_centroid_id",
        "title": "Cap > Property detail > global_centroid_id",
        "section": "Property detail > global_centroid_id",
        "text": "property Cap.global_centroid_id\n\nGlobal centroid id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#Cap.centroid",
        "title": "Cap > Property detail > centroid",
        "section": "Property detail > centroid",
        "text": "property Cap.centroid\n\nCentroid of cap.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cap",
        "href": "api/ansys/heart/core/objects/Cap.html#Cap.cap_normal",
        "title": "Cap > Property detail > cap_normal",
        "section": "Property detail > cap_normal",
        "text": "property Cap.cap_normal\n\nCompute mean normal of cap.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#boundaryconditions",
        "title": "BoundaryConditions",
        "section": "BoundaryConditions",
        "text": "Bases: Settings\nStores settings/parameters for boundary conditions.\nBoundaryConditions\nBoundaryConditions\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#ansys.heart.core.settings.settings.BoundaryConditions",
        "title": "BoundaryConditions > BoundaryConditions > BoundaryConditions",
        "section": "BoundaryConditions > BoundaryConditions",
        "text": "class ansys.heart.core.settings.settings.BoundaryConditions\n\nBases: Settings\n\nStores settings/parameters for boundary conditions.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#overview",
        "title": "BoundaryConditions > Overview",
        "section": "Overview",
        "text": "robin\nParameters for pericardium spring/damper b.c.\nvalve\nParameters for valve spring b.c.\nend_diastolic_cavity_pressure\nEnd-diastolic pressure.\nOverview\nrobin\nvalve\nend_diastolic_cavity_pressure"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#import-detail",
        "title": "BoundaryConditions > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#attribute-detail",
        "title": "BoundaryConditions > Attribute detail",
        "section": "Attribute detail",
        "text": "Parameters for pericardium spring/damper b.c.\nParameters for valve spring b.c.\nEnd-diastolic pressure.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#BoundaryConditions.robin",
        "title": "BoundaryConditions > Attribute detail > robin",
        "section": "Attribute detail > robin",
        "text": "BoundaryConditions.robin: AttrDict = None\n\nParameters for pericardium spring/damper b.c.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#BoundaryConditions.valve",
        "title": "BoundaryConditions > Attribute detail > valve",
        "section": "Attribute detail > valve",
        "text": "BoundaryConditions.valve: AttrDict = None\n\nParameters for valve spring b.c.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/BoundaryConditions",
        "href": "api/ansys/heart/core/settings/settings/BoundaryConditions.html#BoundaryConditions.end_diastolic_cavity_pressure",
        "title": "BoundaryConditions > Attribute detail > end_diastolic_cavity_pressure",
        "section": "Attribute detail > end_diastolic_cavity_pressure",
        "text": "BoundaryConditions.end_diastolic_cavity_pressure: AttrDict = None\n\nEnd-diastolic pressure.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#simulationsettings",
        "title": "SimulationSettings",
        "section": "SimulationSettings",
        "text": "Class for keeping track of settings.\nSimulationSettings\nSimulationSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#ansys.heart.core.settings.settings.SimulationSettings",
        "title": "SimulationSettings > SimulationSettings > SimulationSettings",
        "section": "SimulationSettings > SimulationSettings",
        "text": "class ansys.heart.core.settings.settings.SimulationSettings(mechanics: bool = True, electrophysiology: bool = True, fiber: bool = True, purkinje: bool = True, stress_free: bool = True)\n\nClass for keeping track of settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#overview",
        "title": "SimulationSettings > Overview",
        "section": "Overview",
        "text": "save\nSave simulation settings to disk.\nload\nLoad simulation settings.\nload_defaults\nLoad the default simulation settings.\nto_consistent_unit_system\nConvert all settings to consistent unit-system [“MPa”, “mm”, “N”, “ms”, “g”].\nget_mechanical_material\nLoad mechanical materials from settings.\nget_ventricle_fiber_rotation\nGet rotation angles from settings.\n__repr__\nRepresent object as list of relevant attribute names.\nOverview\nsave\nload\nload_defaults\nto_consistent_unit_system\nget_mechanical_material\nget_ventricle_fiber_rotation\n__repr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#import-detail",
        "title": "SimulationSettings > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#method-detail",
        "title": "SimulationSettings > Method detail",
        "section": "Method detail",
        "text": "Represent object as list of relevant attribute names.\nSave simulation settings to disk.\nPath to target .json or .yml file\nFlag indicating whether to remove units before writing, by default False\nCreate examples settings with default values.\nLoad simulation settings.\nPath to yaml or json file.\nCreate examples settings with default values.\nLoad settings in second SimulationSettings object.\nLoad the default simulation settings.\nCreate examples settings with default values.\nLoad module\n>>> from ansys.heart.core.settings.settings import SimulationSettings\nInstantiate settings object.\nConvert all settings to consistent unit-system [“MPa”, “mm”, “N”, “ms”, “g”].\nConvert to the consistent unit system [“MPa”, “mm”, “N”, “ms”, “g”].\nImport necessary modules\n>>> from ansys.heart.core.settings.settings import SimulationSettings\n>>> from pint import Quantity\nInstantiate settings\n>>> settings = SimulationSettings()\n>>> settings.mechanics.analysis.end_time = Quantity(1, “s”)\n>>> settings.to_consistent_unit_system()\n>>> settings.mechanics.analysis.end_time\n<Quantity(1000.0, ‘millisecond’)>\nLoad mechanical materials from settings.\nType of required maerial\nIf MAT295 is coupled with EP simulation, by default False\nmaterial with parameters in settings\nGet rotation angles from settings.\nFiber rule based methods\nrotation angles alpha and beta\nMethod detail\npathlib.Path\noptional\npathlib.Path\nLiteral\noptional\nMAT295\nLiteral\npython:dict"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#SimulationSettings.__repr__",
        "title": "SimulationSettings > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "SimulationSettings.__repr__()\n\nRepresent object as list of relevant attribute names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#SimulationSettings.save",
        "title": "SimulationSettings > Method detail > save",
        "section": "Method detail > save",
        "text": "SimulationSettings.save(filename: pathlib.Path, remove_units: bool = False)\n\nSave simulation settings to disk.\n\nParameters\n\nfilename\n\npathlib.Path\n\nPath to target .json or .yml file\n\nremove_units\n\nbool, optional\n\nFlag indicating whether to remove units before writing, by default False\n\nExamples\n\nCreate examples settings with default values.\n\n>>> from ansys.heart.core.settings.settings import SimulationSettings\n>>> settings = SimulationSettings()\n>>> settings.load_defaults()\n>>> settings.save(\"my_settings.yml\")\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#SimulationSettings.load",
        "title": "SimulationSettings > Method detail > load",
        "section": "Method detail > load",
        "text": "SimulationSettings.load(filename: pathlib.Path)\n\nLoad simulation settings.\n\nParameters\n\nfilename\n\npathlib.Path\n\nPath to yaml or json file.\n\nExamples\n\nCreate examples settings with default values.\n\n>>> from ansys.heart.core.settings.settings import SimulationSettings\n>>> settings = SimulationSettings()\n>>> settings.load_defaults()\n>>> settings.save(\"my_settings.yml\")\n\nLoad settings in second SimulationSettings object.\n\n>>> settings1 = SimulationSettings()\n>>> settings1.load(\"my_settings.yml\")\n>>> assert settings.mechanics.analysis == settings1.mechanics.analysis\nTrue\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#SimulationSettings.load_defaults",
        "title": "SimulationSettings > Method detail > load_defaults",
        "section": "Method detail > load_defaults",
        "text": "SimulationSettings.load_defaults()\n\nLoad the default simulation settings.\n\nExamples\n\nCreate examples settings with default values.\n\nLoad module\n>>> from ansys.heart.core.settings.settings import SimulationSettings\n\nInstantiate settings object.\n\n>>> settings = SimulationSettings()\n>>> settings.load_defaults()\n>>> settings.mechanics.analysis\nAnalysis:\n  end_time: 3000.0 millisecond\n  dtmin: 10.0 millisecond\n  dtmax: 10.0 millisecond\n  dt_d3plot: 50.0 millisecond\n  dt_icvout: 1.0 millisecond\n  global_damping: 0.5 / millisecond\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#SimulationSettings.to_consistent_unit_system",
        "title": "SimulationSettings > Method detail > to_consistent_unit_system",
        "section": "Method detail > to_consistent_unit_system",
        "text": "SimulationSettings.to_consistent_unit_system()\n\nConvert all settings to consistent unit-system [“MPa”, “mm”, “N”, “ms”, “g”].\n\nExamples\n\nConvert to the consistent unit system [“MPa”, “mm”, “N”, “ms”, “g”].\n\nImport necessary modules\n>>> from ansys.heart.core.settings.settings import SimulationSettings\n>>> from pint import Quantity\n\nInstantiate settings\n>>> settings = SimulationSettings()\n>>> settings.mechanics.analysis.end_time = Quantity(1, “s”)\n>>> settings.to_consistent_unit_system()\n>>> settings.mechanics.analysis.end_time\n<Quantity(1000.0, ‘millisecond’)>\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#SimulationSettings.get_mechanical_material",
        "title": "SimulationSettings > Method detail > get_mechanical_material",
        "section": "Method detail > get_mechanical_material",
        "text": "SimulationSettings.get_mechanical_material(required_type: Literal['isotropic', 'anisotropic'], ep_coupled=False) -> ansys.heart.core.settings.material.material.Mat295\n\nLoad mechanical materials from settings.\n\nParameters\n\nrequired_type\n\nLiteral['isotropic','anisotropic']\n\nType of required maerial\n\nep_coupled\n\nbool, optional\n\nIf MAT295 is coupled with EP simulation, by default False\n\nReturns\n\nMAT295\n\nmaterial with parameters in settings\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/SimulationSettings",
        "href": "api/ansys/heart/core/settings/settings/SimulationSettings.html#SimulationSettings.get_ventricle_fiber_rotation",
        "title": "SimulationSettings > Method detail > get_ventricle_fiber_rotation",
        "section": "Method detail > get_ventricle_fiber_rotation",
        "text": "SimulationSettings.get_ventricle_fiber_rotation(method: Literal['LSDYNA', 'D-RBM']) -> dict\n\nGet rotation angles from settings.\n\nParameters\n\nmethod\n\nLiteral[&quot;LSDYNA&quot;, &quot;D\n\nFiber rule based methods\n\nReturns\n\npython:dict\n\nrotation angles alpha and beta\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#edpvr",
        "title": "EDPVR",
        "section": "EDPVR",
        "text": "End diastolic pressure-volume relation.\nRef: Klotz, et al. Nature protocols 2.9 (2007): 2152-2158.\nEDPVR\nEDPVR"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#ansys.heart.core.post.klotz_curve.EDPVR",
        "title": "EDPVR > EDPVR > EDPVR",
        "section": "EDPVR > EDPVR",
        "text": "class ansys.heart.core.post.klotz_curve.EDPVR(vm: float, pm: float)\n\nEnd diastolic pressure-volume relation.\n\nNotes\n\nRef: Klotz, et al. Nature protocols 2.9 (2007): 2152-2158.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#overview",
        "title": "EDPVR > Overview",
        "section": "Overview",
        "text": "get_pressure\nCompute pressure from volume.\nget_volume\nCompute volume from pressure.\nplot_EDPVR\nPlot klotz curve,  with simulation data if exists.\nAn\nBn\nvm\npm\nv0\nv30\nOverview\nget_pressure\nget_volume\nplot_EDPVR\nAn\nBn\nvm\npm\nv0\nv30"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#import-detail",
        "title": "EDPVR > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#attribute-detail",
        "title": "EDPVR > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.An",
        "title": "EDPVR > Attribute detail > An",
        "section": "Attribute detail > An",
        "text": "EDPVR.An = 27.78\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.Bn",
        "title": "EDPVR > Attribute detail > Bn",
        "section": "Attribute detail > Bn",
        "text": "EDPVR.Bn = 2.76\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.vm",
        "title": "EDPVR > Attribute detail > vm",
        "section": "Attribute detail > vm",
        "text": "EDPVR.vm\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.pm",
        "title": "EDPVR > Attribute detail > pm",
        "section": "Attribute detail > pm",
        "text": "EDPVR.pm\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.v0",
        "title": "EDPVR > Attribute detail > v0",
        "section": "Attribute detail > v0",
        "text": "EDPVR.v0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.v30",
        "title": "EDPVR > Attribute detail > v30",
        "section": "Attribute detail > v30",
        "text": "EDPVR.v30\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#method-detail",
        "title": "EDPVR > Method detail",
        "section": "Method detail",
        "text": "Compute pressure from volume.\nvolume in mL\npressure in mmHg\nCompute volume from pressure.\npressure in mmHg\nvolume in mmL\nPlot klotz curve,  with simulation data if exists.\n[volume, pressure] from simulation, by default None\nfigure\nMethod detail\npython:float\nnp.ndarray\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:list\noptional\nmatplotlib.figure.Figure"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.get_pressure",
        "title": "EDPVR > Method detail > get_pressure",
        "section": "Method detail > get_pressure",
        "text": "EDPVR.get_pressure(volume: float | numpy.ndarray) -> float | numpy.ndarray\n\nCompute pressure from volume.\n\nParameters\n\nvolume\n\npython:float | np.ndarray\n\nvolume in mL\n\nReturns\n\nfloat| np.ndarray\n\npressure in mmHg\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.get_volume",
        "title": "EDPVR > Method detail > get_volume",
        "section": "Method detail > get_volume",
        "text": "EDPVR.get_volume(pressure: numpy.ndarray) -> numpy.ndarray\n\nCompute volume from pressure.\n\nParameters\n\npressure\n\nnp.ndarray\n\npressure in mmHg\n\nReturns\n\nnp.ndarray\n\nvolume in mmL\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/EDPVR",
        "href": "api/ansys/heart/core/post/klotz_curve/EDPVR.html#EDPVR.plot_EDPVR",
        "title": "EDPVR > Method detail > plot_EDPVR",
        "section": "Method detail > plot_EDPVR",
        "text": "EDPVR.plot_EDPVR(simulation_data: list = None) -> matplotlib.figure.Figure\n\nPlot klotz curve,  with simulation data if exists.\n\nParameters\n\nsimulation_data\n\npython:list, optional\n\n[volume, pressure] from simulation, by default None\n\nReturns\n\nmatplotlib.figure.Figure\n\nfigure\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#the-loggerpy-module",
        "title": "The logger.py module",
        "section": "The logger.py module",
        "text": "The logger.py module\nlogger.py"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#summary",
        "title": "The logger.py module > Summary",
        "section": "Summary",
        "text": "PyAnsysHeartCustomAdapter\nCustom logging adapter for PyAnsys Heart.\nInstanceFilter\nEnsure that instance_name record always exists.\nLogger\nLogger used for each PyAnsys Heart session.\naddfile_handler\nAdd a file handler to the input.\nadd_stdout_handler\nAdd a standout handler to the logger.\nstring_to_loglevel\nLOG_LEVEL_STDOUT\nLOG_LEVEL_FILE\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nDATEFORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG_LEVEL_STRING_TYPE\nLOG_LEVEL_TYPE\nSummary\nPyAnsysHeartCustomAdapter\nInstanceFilter\nLogger\naddfile_handler\nadd_stdout_handler\nstring_to_loglevel\nLOG_LEVEL_STDOUT\nLOG_LEVEL_FILE\nFILE_NAME\nDEBUG\nINFO\nWARN\nERROR\nCRITICAL\nSTDOUT_MSG_FORMAT\nDATEFORMAT\nFILE_MSG_FORMAT\nDEFAULT_STDOUT_HEADER\nDEFAULT_FILE_HEADER\nNEW_SESSION_HEADER\nLOG_LEVEL_STRING_TYPE\nLOG_LEVEL_TYPE"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#description",
        "title": "The logger.py module > Description",
        "section": "Description",
        "text": "Logging module.\nThe logging module supplies a general framework for logging in PyAnsys Heart-lib.\nThis module is built upon logging library\nand it does not intend to replace it rather provide a way to interact between\nlogging and PyAnsys Heart.\nThe loggers used in the module include the name of the instance which\nis intended to be unique. This name is printed in all the active\noutputs and it is used to track the different PyAnsys Heart modules.\nDescription\nlogging"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#usage",
        "title": "The logger.py module > Usage",
        "section": "Usage",
        "text": "Usage"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#global-logger",
        "title": "The logger.py module > Global logger",
        "section": "Global logger",
        "text": "There is a global logger named PyAnsys Heart_global which is created at\nansys.PyAnsys Heart.core.__init__.  If you want to use this global logger,\nyou must call at the top of your module:\nYou could also rename it to avoid conflicts with other loggers (if any):\nIt should be noticed that the default logging level of LOG is ERROR.\nTo change this and output lower level messages you can use the next snippet:\nAlternatively:\nThis way ensures all the handlers are set to the input log level.\nBy default, this logger does not log to a file. If you wish to do so,\nyou can add a file handler using:\nThis sets the logger to be redirected also to that file.  If you wish\nto change the characteristics of this global logger from the beginning\nof the execution, you must edit the file __init__ in the directory\nansys.heart.core.\nTo log using this logger, just call the desired method as a normal logger.\nGlobal logger\nPyAnsys Heart_global\nansys.PyAnsys Heart.core.__init__\nLOG\nERROR\n__init__\nansys.heart.core"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#other-loggers",
        "title": "The logger.py module > Other loggers",
        "section": "Other loggers",
        "text": "You can create your own loggers using python logging library as\nyou would do in any other script.  There shall no be conflicts between\nthese loggers.\nOther loggers\nlogging"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#module-detail",
        "title": "The logger.py module > Module detail",
        "section": "Module detail",
        "text": "Add a file handler to the input.\nLogger to add the file handler to.\nName of the output file.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWhether to write the headers to the file.\nLogger or logging.Logger object.\nAdd a standout handler to the logger.\nLogger to add the file handler to.\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\nWhether to write headers to the file.\nLogger or logging.Logger object.\nModule detail\nlogging.Logger\npython:str\npython:int\n10\nlogging.DEBUG\npython:False\nLogger\nLogger\nlogging.Logger\nlogging.Logger\npython:int\n10\nlogging.DEBUG\npython:False\nLogger\nLogger\nlogging.Logger"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.addfile_handler",
        "title": "The logger.py module > Module detail > addfile_handler",
        "section": "Module detail > addfile_handler",
        "text": "logger.addfile_handler(logger, filename=FILE_NAME, level=LOG_LEVEL_STDOUT, write_headers=False)\n\nAdd a file handler to the input.\n\nParameters\n\nlogger\n\nlogging.Logger\n\nLogger to add the file handler to.\n\nfilename\n\npython:str, default: “pyconv-de.log”\n\nName of the output file.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, default: python:False\n\nWhether to write the headers to the file.\n\nReturns\n\nLogger\n\nLogger or logging.Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.add_stdout_handler",
        "title": "The logger.py module > Module detail > add_stdout_handler",
        "section": "Module detail > add_stdout_handler",
        "text": "logger.add_stdout_handler(logger, level=LOG_LEVEL_STDOUT, write_headers=False)\n\nAdd a standout handler to the logger.\n\nParameters\n\nlogger\n\nlogging.Logger\n\nLogger to add the file handler to.\n\nlevel\n\npython:int, default: 10\n\nLevel of logging. The default is 10, in which case the\nlogging.DEBUG level is used.\n\nwrite_headers\n\nbool, default: python:False\n\nWhether to write headers to the file.\n\nReturns\n\nLogger\n\nLogger or logging.Logger object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.LOG_LEVEL_STDOUT",
        "title": "The logger.py module > Module detail > LOG_LEVEL_STDOUT",
        "section": "Module detail > LOG_LEVEL_STDOUT",
        "text": "logger.LOG_LEVEL_STDOUT = 20\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.LOG_LEVEL_FILE",
        "title": "The logger.py module > Module detail > LOG_LEVEL_FILE",
        "section": "Module detail > LOG_LEVEL_FILE",
        "text": "logger.LOG_LEVEL_FILE = 10\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.FILE_NAME",
        "title": "The logger.py module > Module detail > FILE_NAME",
        "section": "Module detail > FILE_NAME",
        "text": "logger.FILE_NAME = 'PyAnsys Heart.log'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.DEBUG",
        "title": "The logger.py module > Module detail > DEBUG",
        "section": "Module detail > DEBUG",
        "text": "logger.DEBUG = 10\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.INFO",
        "title": "The logger.py module > Module detail > INFO",
        "section": "Module detail > INFO",
        "text": "logger.INFO = 20\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.WARN",
        "title": "The logger.py module > Module detail > WARN",
        "section": "Module detail > WARN",
        "text": "logger.WARN = 30\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.ERROR",
        "title": "The logger.py module > Module detail > ERROR",
        "section": "Module detail > ERROR",
        "text": "logger.ERROR = 40\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.CRITICAL",
        "title": "The logger.py module > Module detail > CRITICAL",
        "section": "Module detail > CRITICAL",
        "text": "logger.CRITICAL = 50\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.STDOUT_MSG_FORMAT",
        "title": "The logger.py module > Module detail > STDOUT_MSG_FORMAT",
        "section": "Module detail > STDOUT_MSG_FORMAT",
        "text": "logger.STDOUT_MSG_FORMAT = '%(asctime)s - %(levelname)s - %(instance_name)s - %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.DATEFORMAT",
        "title": "The logger.py module > Module detail > DATEFORMAT",
        "section": "Module detail > DATEFORMAT",
        "text": "logger.DATEFORMAT = '%Y/%m/%d %H:%M:%S'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.FILE_MSG_FORMAT",
        "title": "The logger.py module > Module detail > FILE_MSG_FORMAT",
        "section": "Module detail > FILE_MSG_FORMAT",
        "text": "logger.FILE_MSG_FORMAT = '%(asctime)s - %(levelname)s - %(instance_name)s - %(module)s - %(funcName)s - %(message)s'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.DEFAULT_STDOUT_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_STDOUT_HEADER",
        "section": "Module detail > DEFAULT_STDOUT_HEADER",
        "text": "logger.DEFAULT_STDOUT_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.DEFAULT_FILE_HEADER",
        "title": "The logger.py module > Module detail > DEFAULT_FILE_HEADER",
        "section": "Module detail > DEFAULT_FILE_HEADER",
        "text": "logger.DEFAULT_FILE_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\nLEVEL - INSTANCE NAME - MODULE - FUNCTION - MESSAGE\n\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.NEW_SESSION_HEADER",
        "title": "The logger.py module > Module detail > NEW_SESSION_HEADER",
        "section": "Module detail > NEW_SESSION_HEADER",
        "text": "logger.NEW_SESSION_HEADER = Multiline-String\n\n<details><summary>Show Value</summary>\n\n\"\"\"\n===============================================================================\n       NEW SESSION - Uninferable\n===============================================================================\"\"\"\n\n</details>"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.LOG_LEVEL_STRING_TYPE",
        "title": "The logger.py module > Module detail > LOG_LEVEL_STRING_TYPE",
        "section": "Module detail > LOG_LEVEL_STRING_TYPE",
        "text": "logger.LOG_LEVEL_STRING_TYPE\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.LOG_LEVEL_TYPE",
        "title": "The logger.py module > Module detail > LOG_LEVEL_TYPE",
        "section": "Module detail > LOG_LEVEL_TYPE",
        "text": "logger.LOG_LEVEL_TYPE\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/index",
        "href": "api/ansys/heart/core/logger/index.html#logger.string_to_loglevel",
        "title": "The logger.py module > Module detail > string_to_loglevel",
        "section": "Module detail > string_to_loglevel",
        "text": "logger.string_to_loglevel: Dict[LOG_LEVEL_STRING_TYPE, int]\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/index",
        "href": "api/ansys/heart/core/settings/material/ep_material/index.html#the-ep_materialpy-module",
        "title": "The ep_material.py module",
        "section": "The ep_material.py module",
        "text": "The ep_material.py module\nep_material.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/index",
        "href": "api/ansys/heart/core/settings/material/ep_material/index.html#summary",
        "title": "The ep_material.py module > Summary",
        "section": "Summary",
        "text": "CellModel\nAbstract class for different cell models.\nEPMaterialModel\nBase class for all EP material models.\nEPMaterial\nEP material module.\nm1\nSummary\nCellModel\nEPMaterialModel\nEPMaterial\nm1"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/index",
        "href": "api/ansys/heart/core/settings/material/ep_material/index.html#description",
        "title": "The ep_material.py module > Description",
        "section": "Description",
        "text": "Material module.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/index",
        "href": "api/ansys/heart/core/settings/material/ep_material/index.html#module-detail",
        "title": "The ep_material.py module > Module detail",
        "section": "Module detail",
        "text": "Module detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/index",
        "href": "api/ansys/heart/core/settings/material/ep_material/index.html#ep_material.m1",
        "title": "The ep_material.py module > Module detail > m1",
        "section": "Module detail > m1",
        "text": "ep_material.m1\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#dummymaterial",
        "title": "DummyMaterial",
        "section": "DummyMaterial",
        "text": "Just for initialization.\nDummyMaterial\nDummyMaterial"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#ansys.heart.core.settings.material.material.MechanicalMaterialModel.DummyMaterial",
        "title": "DummyMaterial > DummyMaterial > DummyMaterial",
        "section": "DummyMaterial > DummyMaterial",
        "text": "class ansys.heart.core.settings.material.material.MechanicalMaterialModel.DummyMaterial\n\nJust for initialization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#overview",
        "title": "DummyMaterial > Overview",
        "section": "Overview",
        "text": "__repr__\nPrint a message.\nOverview\n__repr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#import-detail",
        "title": "DummyMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#method-detail",
        "title": "DummyMaterial > Method detail",
        "section": "Method detail",
        "text": "Print a message.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/material/MechanicalMaterialModel.DummyMaterial.html#DummyMaterial.__repr__",
        "title": "DummyMaterial > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DummyMaterial.__repr__()\n\nPrint a message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/simulator/sg_execution_times",
        "href": "examples/simulator/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 4 files from examplessimulator:\nExample\nTime\nMem (MB)\nsphx_glr_examples_simulator_doc_EP-mechanics_simulator_fullheart_rodero.py (doc_EP-mechanics_simulator_fullheart_rodero.py)\n00:00.000\n0.0\nsphx_glr_examples_simulator_doc_EP_simulator_FullHeart_rodero.py (doc_EP_simulator_FullHeart_rodero.py)\n00:00.000\n0.0\nsphx_glr_examples_simulator_doc_EP_simulator_fourchamber.py (doc_EP_simulator_fourchamber.py)\n00:00.000\n0.0\nsphx_glr_examples_simulator_doc_mechanics_simulator_fullheart_rodero_01.py (doc_mechanics_simulator_fullheart_rodero_01.py)\n00:00.000\n0.0\nComputation times\ndoc_EP-mechanics_simulator_fullheart_rodero.py\ndoc_EP_simulator_FullHeart_rodero.py\ndoc_EP_simulator_fourchamber.py\ndoc_mechanics_simulator_fullheart_rodero_01.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/index",
        "href": "api/ansys/heart/core/post/strain_calculator/index.html#the-strain_calculatorpy-module",
        "title": "The strain_calculator.py module",
        "section": "The strain_calculator.py module",
        "text": "The strain_calculator.py module\nstrain_calculator.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/index",
        "href": "api/ansys/heart/core/post/strain_calculator/index.html#summary",
        "title": "The strain_calculator.py module > Summary",
        "section": "Summary",
        "text": "AhaStrainCalculator\nCompute Longitudinal, Radial, Circumferential strain for left ventricle.\nSummary\nAhaStrainCalculator"
    },
    {
        "objectID": "api/ansys/heart/core/post/strain_calculator/index",
        "href": "api/ansys/heart/core/post/strain_calculator/index.html#description",
        "title": "The strain_calculator.py module > Description",
        "section": "Description",
        "text": "Compute myocardial strain.\nDescription"
    },
    {
        "objectID": "user-guide/postprocessor",
        "href": "user-guide/postprocessor.html#postprocessor",
        "title": "User guide > Postprocessor",
        "section": "Postprocessor",
        "text": "This section is under development.\nPostprocessor"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/LSDYNANotFoundError",
        "href": "api/ansys/heart/core/exceptions/LSDYNANotFoundError.html#lsdynanotfounderror",
        "title": "LSDYNANotFoundError",
        "section": "LSDYNANotFoundError",
        "text": "Bases: FileNotFoundError\nLSDYNA executable not found.\nLSDYNANotFoundError\nLSDYNANotFoundError\nFileNotFoundError"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/LSDYNANotFoundError",
        "href": "api/ansys/heart/core/exceptions/LSDYNANotFoundError.html#ansys.heart.core.exceptions.LSDYNANotFoundError",
        "title": "LSDYNANotFoundError > LSDYNANotFoundError > LSDYNANotFoundError",
        "section": "LSDYNANotFoundError > LSDYNANotFoundError",
        "text": "exception ansys.heart.core.exceptions.LSDYNANotFoundError\n\nBases: FileNotFoundError\n\nLSDYNA executable not found.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/LSDYNANotFoundError",
        "href": "api/ansys/heart/core/exceptions/LSDYNANotFoundError.html#import-detail",
        "title": "LSDYNANotFoundError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#d3plottovtkexporter",
        "title": "D3plotToVTKExporter",
        "section": "D3plotToVTKExporter",
        "text": "Read d3plot and save deformed mesh.\nD3plotToVTKExporter\nD3plotToVTKExporter"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#ansys.heart.core.post.dpf_utils.D3plotToVTKExporter",
        "title": "D3plotToVTKExporter > D3plotToVTKExporter > D3plotToVTKExporter",
        "section": "D3plotToVTKExporter > D3plotToVTKExporter",
        "text": "class ansys.heart.core.post.dpf_utils.D3plotToVTKExporter(d3plot_file: str, t_to_keep: float = 100000000000.0)\n\nRead d3plot and save deformed mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#overview",
        "title": "D3plotToVTKExporter > Overview",
        "section": "Overview",
        "text": "convert_to_pvgrid_at_t\nConvert d3plot data into pyvista UnstructuredGrid.\ndata\nsave_time\nOverview\nconvert_to_pvgrid_at_t\ndata\nsave_time"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#import-detail",
        "title": "D3plotToVTKExporter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#attribute-detail",
        "title": "D3plotToVTKExporter > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#D3plotToVTKExporter.data",
        "title": "D3plotToVTKExporter > Attribute detail > data",
        "section": "Attribute detail > data",
        "text": "D3plotToVTKExporter.data\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#D3plotToVTKExporter.save_time",
        "title": "D3plotToVTKExporter > Attribute detail > save_time",
        "section": "Attribute detail > save_time",
        "text": "D3plotToVTKExporter.save_time\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#method-detail",
        "title": "D3plotToVTKExporter > Method detail",
        "section": "Method detail",
        "text": "Convert d3plot data into pyvista UnstructuredGrid.\ntime to convert\nfilename to be save save data, default is None\nresult in pyvista object\nMethod detail\npython:float\npython:str\npv.UnstructuredGrid"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter",
        "href": "api/ansys/heart/core/post/dpf_utils/D3plotToVTKExporter.html#D3plotToVTKExporter.convert_to_pvgrid_at_t",
        "title": "D3plotToVTKExporter > Method detail > convert_to_pvgrid_at_t",
        "section": "Method detail > convert_to_pvgrid_at_t",
        "text": "D3plotToVTKExporter.convert_to_pvgrid_at_t(time: float, fname: str = None) -> pyvista.UnstructuredGrid\n\nConvert d3plot data into pyvista UnstructuredGrid.\n\nParameters\n\ntime\n\npython:float\n\ntime to convert\n\nfname\n\npython:str\n\nfilename to be save save data, default is None\n\nReturns\n\npv.UnstructuredGrid\n\nresult in pyvista object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/auto_process/index",
        "href": "api/ansys/heart/core/post/auto_process/index.html#the-auto_processpy-module",
        "title": "The auto_process.py module",
        "section": "The auto_process.py module",
        "text": "The auto_process.py module\nauto_process.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/auto_process/index",
        "href": "api/ansys/heart/core/post/auto_process/index.html#summary",
        "title": "The auto_process.py module > Summary",
        "section": "Summary",
        "text": "zerop_post\nPost-process zeropressure folder.\nmech_post\nPost-process mechanical simulation folder.\nSummary\nzerop_post\nmech_post"
    },
    {
        "objectID": "api/ansys/heart/core/post/auto_process/index",
        "href": "api/ansys/heart/core/post/auto_process/index.html#description",
        "title": "The auto_process.py module > Description",
        "section": "Description",
        "text": "Script used to post process simulations automatically.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/post/auto_process/index",
        "href": "api/ansys/heart/core/post/auto_process/index.html#module-detail",
        "title": "The auto_process.py module > Module detail",
        "section": "Module detail",
        "text": "Post-process zeropressure folder.\nPath to simulation folder\nmodel to post-process\ndictionary with convergence information\nstress free configuration\ncomputed end-of-diastolic configuration\nPost-process mechanical simulation folder.\nd3plot folder\nheart model\nModule detail\npython:str\nHeartModel\npython:tuple\npython:dict\nnp.ndarray\nnp.ndarray\npython:str\nHeartModel"
    },
    {
        "objectID": "api/ansys/heart/core/post/auto_process/index",
        "href": "api/ansys/heart/core/post/auto_process/index.html#auto_process.zerop_post",
        "title": "The auto_process.py module > Module detail > zerop_post",
        "section": "Module detail > zerop_post",
        "text": "auto_process.zerop_post(directory: str, model: ansys.heart.core.models.HeartModel) -> tuple[dict, numpy.ndarray, numpy.ndarray]\n\nPost-process zeropressure folder.\n\nParameters\n\ndirectory\n\npython:str\n\nPath to simulation folder\n\nmodel\n\nHeartModel\n\nmodel to post-process\n\nReturns\n\npython:tuple[python:dict, np.ndarray, np.ndarray]\n\ndictionary with convergence information\nstress free configuration\ncomputed end-of-diastolic configuration\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/auto_process/index",
        "href": "api/ansys/heart/core/post/auto_process/index.html#auto_process.mech_post",
        "title": "The auto_process.py module > Module detail > mech_post",
        "section": "Module detail > mech_post",
        "text": "auto_process.mech_post(directory: str, model: ansys.heart.core.models.HeartModel)\n\nPost-process mechanical simulation folder.\n\nParameters\n\ndirectory\n\npython:str\n\nd3plot folder\n\nmodel\n\nHeartModel\n\nheart model\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.html#activemodel",
        "title": "ActiveModel",
        "section": "ActiveModel",
        "text": "Abstract class for different active models.\nActiveModel\nActiveModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.html#ansys.heart.core.settings.material.material.ActiveModel",
        "title": "ActiveModel > ActiveModel > ActiveModel",
        "section": "ActiveModel > ActiveModel",
        "text": "class ansys.heart.core.settings.material.material.ActiveModel\n\nAbstract class for different active models.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.html#import-detail",
        "title": "ActiveModel > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.html#classes",
        "title": "ActiveModel > Classes",
        "section": "Classes",
        "text": "Model1\nHold data for active model 1, check manual for details.\nModel3\nHold data for active model 3, check manual for details.\nModel4\nHold data for active model 4.\nModel2\nHold data for active model 2.\nModel5\nHold data for active model 5.\nClasses\nModel1\nModel3\nModel4\nModel2\nModel5"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/index",
        "href": "api/ansys/heart/core/settings/settings/index.html#the-settingspy-module",
        "title": "The settings.py module",
        "section": "The settings.py module",
        "text": "The settings.py module\nsettings.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/index",
        "href": "api/ansys/heart/core/settings/settings/index.html#summary",
        "title": "The settings.py module > Summary",
        "section": "Summary",
        "text": "AttrDict\nDict subclass whose entries can be accessed by attributes as well as normally.\nSettings\nGeneric settings class.\nAnalysis\nClass for analysis settings.\nEPAnalysis\nClass for EP analysis settings.\nMaterial\nClass for storing material settings.\nEpMaterial\nClass for storing ep material settings.\nBoundaryConditions\nStores settings/parameters for boundary conditions.\nSystemModel\nStores settings/parameters for system model.\nMechanics\nClass for keeping track of settings.\nAnalysisZeroPressure\nClass for keeping track of zero pressure analysis settings.\nZeroPressure\nClass for keeping track of settings for stress-free-configuration computation.\nStimulation\nStimulation settings.\nElectrophysiology\nClass for keeping track of electrophysiology settings.\nFibers\nClass for keeping track of fiber settings.\nAtrialFiber\nClass for keeping track of atrial fiber settings.\nPurkinje\nClass for keeping track of purkinje settings.\nSimulationSettings\nClass for keeping track of settings.\nDynaSettings\nClass for collecting, managing and validating LS-DYNA settings.\nSummary\nAttrDict\nSettings\nAnalysis\nEPAnalysis\nMaterial\nEpMaterial\nBoundaryConditions\nSystemModel\nMechanics\nAnalysisZeroPressure\nZeroPressure\nStimulation\nElectrophysiology\nFibers\nAtrialFiber\nPurkinje\nSimulationSettings\nDynaSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/index",
        "href": "api/ansys/heart/core/settings/settings/index.html#description",
        "title": "The settings.py module > Description",
        "section": "Description",
        "text": "Module that defines some classes for settings.\nDescription"
    },
    {
        "objectID": "examples/preprocessor/doc_download_case",
        "href": "examples/preprocessor/doc_download_case.html#download-a-pyansys---heart-compatible-case-from-zenodo",
        "title": "Download a PyAnsys - Heart compatible case from Zenodo.",
        "section": "Download a PyAnsys - Heart compatible case from Zenodo.",
        "text": "This example shows you how to download a Strocchi 2020 or Rodero 2021 case from the Zenodo\ndatabase.\nYou can also manually download the .case or .vtk files from the Strocchi2020\nand Rodero2021 databases first. See:\nhttps://zenodo.org/records/3890034\nhttps://zenodo.org/records/4590294\nAlternatively you can make use of the download\nmodule instead. See the example below.\nDownload Jupyter notebook: doc_download_case.ipynb\nDownload Python source code: doc_download_case.py\nDownload zipped: doc_download_case.zip\nGallery generated by Sphinx-Gallery\nDownload a PyAnsys - Heart compatible case from Zenodo.\nDownload Jupyter notebook: doc_download_case.ipynb\nDownload Python source code: doc_download_case.py\nDownload zipped: doc_download_case.zip"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fullheart_rodero_01",
        "href": "examples/preprocessor/doc_preprocess_fullheart_rodero_01.html#create-a-full-heart-model",
        "title": "Create a full heart model",
        "section": "Create a full heart model",
        "text": "This example shows you how to process a case from Rodero et al (2021) into\na simulation-ready heart model.\nCreate a full heart model"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fullheart_rodero_01",
        "href": "examples/preprocessor/doc_preprocess_fullheart_rodero_01.html#example-setup",
        "title": "Create a full heart model > Example setup",
        "section": "Example setup",
        "text": "Example setup"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fullheart_rodero_01",
        "href": "examples/preprocessor/doc_preprocess_fullheart_rodero_01.html#perform-the-required-imports",
        "title": "Create a full heart model > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory and generated model\nYou may need to (manually) download the .case or .vtk files from the Strocchi2020\nand Rodero2021 databases first. See:\nhttps://zenodo.org/records/3890034\nhttps://zenodo.org/records/4590294\nAlternatively you can make use of the download\nmodule instead. See the download example.\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fullheart_rodero_01",
        "href": "examples/preprocessor/doc_preprocess_fullheart_rodero_01.html#convert-the-vtk-file-into-compatible-input-format",
        "title": "Create a full heart model > Convert the .vtk file into compatible input format",
        "section": "Convert the .vtk file into compatible input format",
        "text": "Convert the .vtk file into compatible input format"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fullheart_rodero_01",
        "href": "examples/preprocessor/doc_preprocess_fullheart_rodero_01.html#create-a-heart-model",
        "title": "Create a full heart model > Create a heart model",
        "section": "Create a heart model",
        "text": "initialize a full heart model\nCreate a heart model"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fullheart_rodero_01",
        "href": "examples/preprocessor/doc_preprocess_fullheart_rodero_01.html#visualize-results",
        "title": "Create a full heart model > Visualize results",
        "section": "Visualize results",
        "text": "You can visualize and inspect the components of the model by accessing\nvarious properties/attributes and invoke methods.\nDownload Jupyter notebook: doc_preprocess_fullheart_rodero_01.ipynb\nDownload Python source code: doc_preprocess_fullheart_rodero_01.py\nDownload zipped: doc_preprocess_fullheart_rodero_01.zip\nGallery generated by Sphinx-Gallery\nVisualize results\nDownload Jupyter notebook: doc_preprocess_fullheart_rodero_01.ipynb\nDownload Python source code: doc_preprocess_fullheart_rodero_01.py\nDownload zipped: doc_preprocess_fullheart_rodero_01.zip"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#tentusscher",
        "title": "Tentusscher",
        "section": "Tentusscher",
        "text": "Hold data for Tentusscher cell model.\nTentusscher\nTentusscher"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#ansys.heart.core.settings.material.ep_material.CellModel.Tentusscher",
        "title": "Tentusscher > Tentusscher > Tentusscher",
        "section": "Tentusscher > Tentusscher",
        "text": "class ansys.heart.core.settings.material.ep_material.CellModel.Tentusscher\n\nHold data for Tentusscher cell model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#overview",
        "title": "Tentusscher > Overview",
        "section": "Overview",
        "text": "to_dictionary\nConvert to dictionary.\ngas_constant\nt\nfaraday_constant\ncm\nvc\nvsr\nvss\npkna\nko\nnao\ncao\ngk1\ngkr\ngna\ngbna\ngcal\ngbca\ngpca\ngpk\npnak\nkm\nkmna\nknaca\nksat\nalpha\ngamma\nkmca\nkmnai\nkpca\nk1\nk2\nk3\nk4\nec\nmaxsr\nminsr\nvrel\nvleak\nvxfer\nvmaxup\nkup\nbufc\nkbufc\nbufsr\nkbufsf\nbufss\nkbufss\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\nto_dictionary\ngas_constant\nt\nfaraday_constant\ncm\nvc\nvsr\nvss\npkna\nko\nnao\ncao\ngk1\ngkr\ngna\ngbna\ngcal\ngbca\ngpca\ngpk\npnak\nkm\nkmna\nknaca\nksat\nalpha\ngamma\nkmca\nkmnai\nkpca\nk1\nk2\nk3\nk4\nec\nmaxsr\nminsr\nvrel\nvleak\nvxfer\nvmaxup\nkup\nbufc\nkbufc\nbufsr\nkbufsf\nbufss\nkbufss\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#import-detail",
        "title": "Tentusscher > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#attribute-detail",
        "title": "Tentusscher > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gas_constant",
        "title": "Tentusscher > Attribute detail > gas_constant",
        "section": "Attribute detail > gas_constant",
        "text": "Tentusscher.gas_constant: float = 8314.472\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.t",
        "title": "Tentusscher > Attribute detail > t",
        "section": "Attribute detail > t",
        "text": "Tentusscher.t: float = 310\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.faraday_constant",
        "title": "Tentusscher > Attribute detail > faraday_constant",
        "section": "Attribute detail > faraday_constant",
        "text": "Tentusscher.faraday_constant: float = 96485.3415\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cm",
        "title": "Tentusscher > Attribute detail > cm",
        "section": "Attribute detail > cm",
        "text": "Tentusscher.cm: float = 0.185\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vc",
        "title": "Tentusscher > Attribute detail > vc",
        "section": "Attribute detail > vc",
        "text": "Tentusscher.vc: float = 0.016404\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vsr",
        "title": "Tentusscher > Attribute detail > vsr",
        "section": "Attribute detail > vsr",
        "text": "Tentusscher.vsr: float = 0.001094\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vss",
        "title": "Tentusscher > Attribute detail > vss",
        "section": "Attribute detail > vss",
        "text": "Tentusscher.vss: float = 5.468e-05\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.pkna",
        "title": "Tentusscher > Attribute detail > pkna",
        "section": "Attribute detail > pkna",
        "text": "Tentusscher.pkna: float = 0.03\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ko",
        "title": "Tentusscher > Attribute detail > ko",
        "section": "Attribute detail > ko",
        "text": "Tentusscher.ko: float = 5.4\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.nao",
        "title": "Tentusscher > Attribute detail > nao",
        "section": "Attribute detail > nao",
        "text": "Tentusscher.nao: float = 140.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cao",
        "title": "Tentusscher > Attribute detail > cao",
        "section": "Attribute detail > cao",
        "text": "Tentusscher.cao: float = 2.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gk1",
        "title": "Tentusscher > Attribute detail > gk1",
        "section": "Attribute detail > gk1",
        "text": "Tentusscher.gk1: float = 5.405\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gkr",
        "title": "Tentusscher > Attribute detail > gkr",
        "section": "Attribute detail > gkr",
        "text": "Tentusscher.gkr: float = 0.153\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gna",
        "title": "Tentusscher > Attribute detail > gna",
        "section": "Attribute detail > gna",
        "text": "Tentusscher.gna: float = 14.838\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gbna",
        "title": "Tentusscher > Attribute detail > gbna",
        "section": "Attribute detail > gbna",
        "text": "Tentusscher.gbna: float = 0.0002\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gcal",
        "title": "Tentusscher > Attribute detail > gcal",
        "section": "Attribute detail > gcal",
        "text": "Tentusscher.gcal: float = 3.98e-05\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gbca",
        "title": "Tentusscher > Attribute detail > gbca",
        "section": "Attribute detail > gbca",
        "text": "Tentusscher.gbca: float = 0.000592\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gpca",
        "title": "Tentusscher > Attribute detail > gpca",
        "section": "Attribute detail > gpca",
        "text": "Tentusscher.gpca: float = 0.1238\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gpk",
        "title": "Tentusscher > Attribute detail > gpk",
        "section": "Attribute detail > gpk",
        "text": "Tentusscher.gpk: float = 0.0146\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.pnak",
        "title": "Tentusscher > Attribute detail > pnak",
        "section": "Attribute detail > pnak",
        "text": "Tentusscher.pnak: float = 2.724\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.km",
        "title": "Tentusscher > Attribute detail > km",
        "section": "Attribute detail > km",
        "text": "Tentusscher.km: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kmna",
        "title": "Tentusscher > Attribute detail > kmna",
        "section": "Attribute detail > kmna",
        "text": "Tentusscher.kmna: float = 40.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.knaca",
        "title": "Tentusscher > Attribute detail > knaca",
        "section": "Attribute detail > knaca",
        "text": "Tentusscher.knaca: float = 1000.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ksat",
        "title": "Tentusscher > Attribute detail > ksat",
        "section": "Attribute detail > ksat",
        "text": "Tentusscher.ksat: float = 0.1\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.alpha",
        "title": "Tentusscher > Attribute detail > alpha",
        "section": "Attribute detail > alpha",
        "text": "Tentusscher.alpha: float = 2.5\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gamma",
        "title": "Tentusscher > Attribute detail > gamma",
        "section": "Attribute detail > gamma",
        "text": "Tentusscher.gamma: float = 0.35\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kmca",
        "title": "Tentusscher > Attribute detail > kmca",
        "section": "Attribute detail > kmca",
        "text": "Tentusscher.kmca: float = 1.38\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kmnai",
        "title": "Tentusscher > Attribute detail > kmnai",
        "section": "Attribute detail > kmnai",
        "text": "Tentusscher.kmnai: float = 87.5\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kpca",
        "title": "Tentusscher > Attribute detail > kpca",
        "section": "Attribute detail > kpca",
        "text": "Tentusscher.kpca: float = 0.0005\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k1",
        "title": "Tentusscher > Attribute detail > k1",
        "section": "Attribute detail > k1",
        "text": "Tentusscher.k1: float = 0.15\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k2",
        "title": "Tentusscher > Attribute detail > k2",
        "section": "Attribute detail > k2",
        "text": "Tentusscher.k2: float = 0.045\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k3",
        "title": "Tentusscher > Attribute detail > k3",
        "section": "Attribute detail > k3",
        "text": "Tentusscher.k3: float = 0.06\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.k4",
        "title": "Tentusscher > Attribute detail > k4",
        "section": "Attribute detail > k4",
        "text": "Tentusscher.k4: float = 0.005\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ec",
        "title": "Tentusscher > Attribute detail > ec",
        "section": "Attribute detail > ec",
        "text": "Tentusscher.ec: float = 1.5\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.maxsr",
        "title": "Tentusscher > Attribute detail > maxsr",
        "section": "Attribute detail > maxsr",
        "text": "Tentusscher.maxsr: float = 2.5\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.minsr",
        "title": "Tentusscher > Attribute detail > minsr",
        "section": "Attribute detail > minsr",
        "text": "Tentusscher.minsr: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vrel",
        "title": "Tentusscher > Attribute detail > vrel",
        "section": "Attribute detail > vrel",
        "text": "Tentusscher.vrel: float = 0.102\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vleak",
        "title": "Tentusscher > Attribute detail > vleak",
        "section": "Attribute detail > vleak",
        "text": "Tentusscher.vleak: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vxfer",
        "title": "Tentusscher > Attribute detail > vxfer",
        "section": "Attribute detail > vxfer",
        "text": "Tentusscher.vxfer: float = 0.0038\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.vmaxup",
        "title": "Tentusscher > Attribute detail > vmaxup",
        "section": "Attribute detail > vmaxup",
        "text": "Tentusscher.vmaxup: float = 0.006375\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kup",
        "title": "Tentusscher > Attribute detail > kup",
        "section": "Attribute detail > kup",
        "text": "Tentusscher.kup: float = 0.00025\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.bufc",
        "title": "Tentusscher > Attribute detail > bufc",
        "section": "Attribute detail > bufc",
        "text": "Tentusscher.bufc: float = 0.2\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kbufc",
        "title": "Tentusscher > Attribute detail > kbufc",
        "section": "Attribute detail > kbufc",
        "text": "Tentusscher.kbufc: float = 0.001\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.bufsr",
        "title": "Tentusscher > Attribute detail > bufsr",
        "section": "Attribute detail > bufsr",
        "text": "Tentusscher.bufsr: float = 10.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kbufsf",
        "title": "Tentusscher > Attribute detail > kbufsf",
        "section": "Attribute detail > kbufsf",
        "text": "Tentusscher.kbufsf: float = 0.3\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.bufss",
        "title": "Tentusscher > Attribute detail > bufss",
        "section": "Attribute detail > bufss",
        "text": "Tentusscher.bufss: float = 0.4\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.kbufss",
        "title": "Tentusscher > Attribute detail > kbufss",
        "section": "Attribute detail > kbufss",
        "text": "Tentusscher.kbufss: float = 0.00025\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gks",
        "title": "Tentusscher > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "Tentusscher.gks: float = 0.392\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.gto",
        "title": "Tentusscher > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "Tentusscher.gto: float = 0.294\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.v",
        "title": "Tentusscher > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "Tentusscher.v: float = -85.23\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.ki",
        "title": "Tentusscher > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "Tentusscher.ki: float = 136.89\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.nai",
        "title": "Tentusscher > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "Tentusscher.nai: float = 8.604\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cai",
        "title": "Tentusscher > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "Tentusscher.cai: float = 0.000126\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.cass",
        "title": "Tentusscher > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "Tentusscher.cass: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.casr",
        "title": "Tentusscher > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "Tentusscher.casr: float = 3.64\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.rpri",
        "title": "Tentusscher > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "Tentusscher.rpri: float = 0.9073\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.xr1",
        "title": "Tentusscher > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "Tentusscher.xr1: float = 0.00621\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.xr2",
        "title": "Tentusscher > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "Tentusscher.xr2: float = 0.4712\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.xs",
        "title": "Tentusscher > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "Tentusscher.xs: float = 0.0095\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.m",
        "title": "Tentusscher > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "Tentusscher.m: float = 0.00172\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.h",
        "title": "Tentusscher > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "Tentusscher.h: float = 0.7444\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.j",
        "title": "Tentusscher > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "Tentusscher.j: float = 0.7045\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.d",
        "title": "Tentusscher > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "Tentusscher.d: float = 3.373e-05\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.f",
        "title": "Tentusscher > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "Tentusscher.f: float = 0.7888\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.f2",
        "title": "Tentusscher > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "Tentusscher.f2: float = 0.9755\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.fcass",
        "title": "Tentusscher > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "Tentusscher.fcass: float = 0.9953\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.s",
        "title": "Tentusscher > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "Tentusscher.s: float = 0.999998\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.r",
        "title": "Tentusscher > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "Tentusscher.r: float = 2.42e-08\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#method-detail",
        "title": "Tentusscher > Method detail",
        "section": "Method detail",
        "text": "Convert to dictionary.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.Tentusscher.html#Tentusscher.to_dictionary",
        "title": "Tentusscher > Method detail > to_dictionary",
        "section": "Method detail > to_dictionary",
        "text": "Tentusscher.to_dictionary()\n\nConvert to dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#biventricle",
        "title": "BiVentricle",
        "section": "BiVentricle",
        "text": "Bases: HeartModel\nModel of the left and right ventricle.\nBiVentricle\nBiVentricle\nHeartModel"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#ansys.heart.core.models.BiVentricle",
        "title": "BiVentricle > BiVentricle > BiVentricle",
        "section": "BiVentricle > BiVentricle",
        "text": "class ansys.heart.core.models.BiVentricle(working_directory: pathlib.Path | str = None)\n\nBases: HeartModel\n\nModel of the left and right ventricle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#overview",
        "title": "BiVentricle > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nright_ventricle\nRight ventricle part.\nseptum\nSeptum.\nOverview\nleft_ventricle\nright_ventricle\nseptum"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#import-detail",
        "title": "BiVentricle > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#attribute-detail",
        "title": "BiVentricle > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nRight ventricle part.\nSeptum.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#BiVentricle.left_ventricle",
        "title": "BiVentricle > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "BiVentricle.left_ventricle: ansys.heart.core.objects.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#BiVentricle.right_ventricle",
        "title": "BiVentricle > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "BiVentricle.right_ventricle: ansys.heart.core.objects.Part\n\nRight ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/BiVentricle",
        "href": "api/ansys/heart/core/models/BiVentricle.html#BiVentricle.septum",
        "title": "BiVentricle > Attribute detail > septum",
        "section": "Attribute detail > septum",
        "text": "BiVentricle.septum: ansys.heart.core.objects.Part\n\nSeptum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#eppostprocessor",
        "title": "EPpostprocessor",
        "section": "EPpostprocessor",
        "text": "Postprocess Electrophysiology results.\nEPpostprocessor\nEPpostprocessor"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#ansys.heart.core.post.dpf_utils.EPpostprocessor",
        "title": "EPpostprocessor > EPpostprocessor > EPpostprocessor",
        "section": "EPpostprocessor > EPpostprocessor",
        "text": "class ansys.heart.core.post.dpf_utils.EPpostprocessor(results_path: pathlib.Path, model: ansys.heart.core.models.HeartModel = None)\n\nPostprocess Electrophysiology results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#overview",
        "title": "EPpostprocessor > Overview",
        "section": "Overview",
        "text": "load_ep_fields\nLoad all EP fields.\nget_activation_times\nGet activation times field.\nget_transmembrane_potential\nGet transmembrane potential.\nget_extracellular_potential\nGet extracellular potential.\nget_intracellular_potential\nGet intracellular potential.\nget_calcium\nGet calcium concentration.\nread_ep_nodout\nRead Electrophysiology results.\ncreate_post_folder\nCreate Postprocessing folder.\nanimate_transmembrane\nAnimate transmembrane potentials and export to vtk.\nexport_transmembrane_to_vtk\nExport transmembrane potentials to vtk.\ncompute_ECGs\nCompute ECGs.\nread_ECGs\nRead ECG text file produced by LS-DYNA simulation.\ncompute_12_lead_ECGs\nCompute 12-Lead ECGs from 10 electrodes.\nreader\nfields\nmodel\nOverview\nload_ep_fields\nget_activation_times\nget_transmembrane_potential\nget_extracellular_potential\nget_intracellular_potential\nget_calcium\nread_ep_nodout\ncreate_post_folder\nanimate_transmembrane\nexport_transmembrane_to_vtk\ncompute_ECGs\nread_ECGs\ncompute_12_lead_ECGs\nreader\nfields\nmodel"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#import-detail",
        "title": "EPpostprocessor > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#attribute-detail",
        "title": "EPpostprocessor > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.reader",
        "title": "EPpostprocessor > Attribute detail > reader",
        "section": "Attribute detail > reader",
        "text": "EPpostprocessor.reader\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.fields",
        "title": "EPpostprocessor > Attribute detail > fields",
        "section": "Attribute detail > fields",
        "text": "EPpostprocessor.fields = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.model",
        "title": "EPpostprocessor > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "EPpostprocessor.model = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#method-detail",
        "title": "EPpostprocessor > Method detail",
        "section": "Method detail",
        "text": "Load all EP fields.\nGet activation times field.\nGet transmembrane potential.\nGet extracellular potential.\nGet intracellular potential.\nGet calcium concentration.\nRead Electrophysiology results.\nCreate Postprocessing folder.\nAnimate transmembrane potentials and export to vtk.\nExport transmembrane potentials to vtk.\nCompute ECGs.\nRead ECG text file produced by LS-DYNA simulation.\nCompute 12-Lead ECGs from 10 electrodes.\nmxn array containing ECGs, where m is the number of time steps\nand n the 10 electrodes in this order:\n“V1” “V2” “V3” “V4” “V5” “V6” “RA” “LA” “RL” “LL”\nplot option, by default True\n12-Lead ECGs in this order:\n“I” “II” “III” “aVR” “aVL” “aVF” “V1” “V2” “V3” “V4” “V5” “V6”\nMethod detail\nnp.ndarray\noptional\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.load_ep_fields",
        "title": "EPpostprocessor > Method detail > load_ep_fields",
        "section": "Method detail > load_ep_fields",
        "text": "EPpostprocessor.load_ep_fields()\n\nLoad all EP fields.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_activation_times",
        "title": "EPpostprocessor > Method detail > get_activation_times",
        "section": "Method detail > get_activation_times",
        "text": "EPpostprocessor.get_activation_times(at_step: int = None)\n\nGet activation times field.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_transmembrane_potential",
        "title": "EPpostprocessor > Method detail > get_transmembrane_potential",
        "section": "Method detail > get_transmembrane_potential",
        "text": "EPpostprocessor.get_transmembrane_potential(node_id=None, plot: bool = False)\n\nGet transmembrane potential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_extracellular_potential",
        "title": "EPpostprocessor > Method detail > get_extracellular_potential",
        "section": "Method detail > get_extracellular_potential",
        "text": "EPpostprocessor.get_extracellular_potential(node_id=None, plot: bool = False)\n\nGet extracellular potential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_intracellular_potential",
        "title": "EPpostprocessor > Method detail > get_intracellular_potential",
        "section": "Method detail > get_intracellular_potential",
        "text": "EPpostprocessor.get_intracellular_potential(node_id=None, plot: bool = False)\n\nGet intracellular potential.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.get_calcium",
        "title": "EPpostprocessor > Method detail > get_calcium",
        "section": "Method detail > get_calcium",
        "text": "EPpostprocessor.get_calcium(node_id=None, plot: bool = False)\n\nGet calcium concentration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.read_ep_nodout",
        "title": "EPpostprocessor > Method detail > read_ep_nodout",
        "section": "Method detail > read_ep_nodout",
        "text": "EPpostprocessor.read_ep_nodout()\n\nRead Electrophysiology results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.create_post_folder",
        "title": "EPpostprocessor > Method detail > create_post_folder",
        "section": "Method detail > create_post_folder",
        "text": "EPpostprocessor.create_post_folder(path: pathlib.Path = None)\n\nCreate Postprocessing folder.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.animate_transmembrane",
        "title": "EPpostprocessor > Method detail > animate_transmembrane",
        "section": "Method detail > animate_transmembrane",
        "text": "EPpostprocessor.animate_transmembrane()\n\nAnimate transmembrane potentials and export to vtk.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.export_transmembrane_to_vtk",
        "title": "EPpostprocessor > Method detail > export_transmembrane_to_vtk",
        "section": "Method detail > export_transmembrane_to_vtk",
        "text": "EPpostprocessor.export_transmembrane_to_vtk()\n\nExport transmembrane potentials to vtk.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.compute_ECGs",
        "title": "EPpostprocessor > Method detail > compute_ECGs",
        "section": "Method detail > compute_ECGs",
        "text": "EPpostprocessor.compute_ECGs(electrodes: numpy.ndarray)\n\nCompute ECGs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.read_ECGs",
        "title": "EPpostprocessor > Method detail > read_ECGs",
        "section": "Method detail > read_ECGs",
        "text": "EPpostprocessor.read_ECGs(path: pathlib.Path)\n\nRead ECG text file produced by LS-DYNA simulation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor",
        "href": "api/ansys/heart/core/post/dpf_utils/EPpostprocessor.html#EPpostprocessor.compute_12_lead_ECGs",
        "title": "EPpostprocessor > Method detail > compute_12_lead_ECGs",
        "section": "Method detail > compute_12_lead_ECGs",
        "text": "EPpostprocessor.compute_12_lead_ECGs(ECGs: numpy.ndarray, times: numpy.ndarray, plot: bool = True) -> numpy.ndarray\n\nCompute 12-Lead ECGs from 10 electrodes.\n\nParameters\n\nECGs\n\nnp.ndarray\n\nmxn array containing ECGs, where m is the number of time steps\nand n the 10 electrodes in this order:\n“V1” “V2” “V3” “V4” “V5” “V6” “RA” “LA” “RL” “LL”\n\nplot\n\nbool, optional\n\nplot option, by default True\n\nReturns\n\nnp.ndarray\n\n12-Lead ECGs in this order:\n“I” “II” “III” “aVR” “aVL” “aVF” “V1” “V2” “V3” “V4” “V5” “V6”\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#tentusscherepi",
        "title": "TentusscherEpi",
        "section": "TentusscherEpi",
        "text": "Bases: Tentusscher\nHold data for Tentusscher cell model in its epicardium version.\nTentusscherEpi\nTentusscherEpi\nTentusscher"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#ansys.heart.core.settings.material.ep_material.CellModel.TentusscherEpi",
        "title": "TentusscherEpi > TentusscherEpi > TentusscherEpi",
        "section": "TentusscherEpi > TentusscherEpi",
        "text": "class ansys.heart.core.settings.material.ep_material.CellModel.TentusscherEpi\n\nBases: Tentusscher\n\nHold data for Tentusscher cell model in its epicardium version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#overview",
        "title": "TentusscherEpi > Overview",
        "section": "Overview",
        "text": "gks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#import-detail",
        "title": "TentusscherEpi > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#attribute-detail",
        "title": "TentusscherEpi > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.gks",
        "title": "TentusscherEpi > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "TentusscherEpi.gks: float = 0.392\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.gto",
        "title": "TentusscherEpi > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "TentusscherEpi.gto: float = 0.294\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.v",
        "title": "TentusscherEpi > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "TentusscherEpi.v: float = -85.23\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.ki",
        "title": "TentusscherEpi > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "TentusscherEpi.ki: float = 136.89\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.nai",
        "title": "TentusscherEpi > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "TentusscherEpi.nai: float = 8.604\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.cai",
        "title": "TentusscherEpi > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "TentusscherEpi.cai: float = 0.000126\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.cass",
        "title": "TentusscherEpi > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "TentusscherEpi.cass: float = 0.00036\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.casr",
        "title": "TentusscherEpi > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "TentusscherEpi.casr: float = 3.64\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.rpri",
        "title": "TentusscherEpi > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "TentusscherEpi.rpri: float = 0.9073\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.xr1",
        "title": "TentusscherEpi > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "TentusscherEpi.xr1: float = 0.00621\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.xr2",
        "title": "TentusscherEpi > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "TentusscherEpi.xr2: float = 0.4712\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.xs",
        "title": "TentusscherEpi > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "TentusscherEpi.xs: float = 0.0095\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.m",
        "title": "TentusscherEpi > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "TentusscherEpi.m: float = 0.00172\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.h",
        "title": "TentusscherEpi > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "TentusscherEpi.h: float = 0.7444\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.j",
        "title": "TentusscherEpi > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "TentusscherEpi.j: float = 0.7045\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.d",
        "title": "TentusscherEpi > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "TentusscherEpi.d: float = 3.373e-05\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.f",
        "title": "TentusscherEpi > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "TentusscherEpi.f: float = 0.7888\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.f2",
        "title": "TentusscherEpi > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "TentusscherEpi.f2: float = 0.9755\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.fcass",
        "title": "TentusscherEpi > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "TentusscherEpi.fcass: float = 0.9953\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.s",
        "title": "TentusscherEpi > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "TentusscherEpi.s: float = 0.999998\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherEpi.html#TentusscherEpi.r",
        "title": "TentusscherEpi > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "TentusscherEpi.r: float = 2.42e-08\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/logger/InstanceFilter",
        "href": "api/ansys/heart/core/logger/InstanceFilter.html#instancefilter",
        "title": "InstanceFilter",
        "section": "InstanceFilter",
        "text": "Bases: logging.Filter\nEnsure that instance_name record always exists.\nInstanceFilter\nInstanceFilter\nlogging.Filter"
    },
    {
        "objectID": "api/ansys/heart/core/logger/InstanceFilter",
        "href": "api/ansys/heart/core/logger/InstanceFilter.html#ansys.heart.core.logger.InstanceFilter",
        "title": "InstanceFilter > InstanceFilter > InstanceFilter",
        "section": "InstanceFilter > InstanceFilter",
        "text": "class ansys.heart.core.logger.InstanceFilter(name='')\n\nBases: logging.Filter\n\nEnsure that instance_name record always exists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/logger/InstanceFilter",
        "href": "api/ansys/heart/core/logger/InstanceFilter.html#overview",
        "title": "InstanceFilter > Overview",
        "section": "Overview",
        "text": "filter\nFilter record.\nOverview\nfilter"
    },
    {
        "objectID": "api/ansys/heart/core/logger/InstanceFilter",
        "href": "api/ansys/heart/core/logger/InstanceFilter.html#import-detail",
        "title": "InstanceFilter > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/logger/InstanceFilter",
        "href": "api/ansys/heart/core/logger/InstanceFilter.html#method-detail",
        "title": "InstanceFilter > Method detail",
        "section": "Method detail",
        "text": "Filter record.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/logger/InstanceFilter",
        "href": "api/ansys/heart/core/logger/InstanceFilter.html#InstanceFilter.filter",
        "title": "InstanceFilter > Method detail > filter",
        "section": "Method detail > filter",
        "text": "InstanceFilter.filter(record: logging.LogRecord)\n\nFilter record.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#purkinje",
        "title": "Purkinje",
        "section": "Purkinje",
        "text": "Bases: Settings\nClass for keeping track of purkinje settings.\nPurkinje\nPurkinje\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#ansys.heart.core.settings.settings.Purkinje",
        "title": "Purkinje > Purkinje > Purkinje",
        "section": "Purkinje > Purkinje",
        "text": "class ansys.heart.core.settings.settings.Purkinje\n\nBases: Settings\n\nClass for keeping track of purkinje settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#overview",
        "title": "Purkinje > Overview",
        "section": "Overview",
        "text": "node_id_origin_left\nLeft Purkinje origin id.\nnode_id_origin_right\nRight Purkinje origin id.\nedgelen\nEdge length.\nngen\nNumber of generations.\nnbrinit\nNumber of beams from origin point.\nnsplit\nNumber of splits at each leaf.\npmjtype\nPurkinje muscle junction type.\npmjradius\nPurkinje muscle junction radius.\nOverview\nnode_id_origin_left\nnode_id_origin_right\nedgelen\nngen\nnbrinit\nnsplit\npmjtype\npmjradius"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#import-detail",
        "title": "Purkinje > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#attribute-detail",
        "title": "Purkinje > Attribute detail",
        "section": "Attribute detail",
        "text": "Left Purkinje origin id.\nRight Purkinje origin id.\nEdge length.\nNumber of generations.\nNumber of beams from origin point.\nNumber of splits at each leaf.\nPurkinje muscle junction type.\nPurkinje muscle junction radius.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.node_id_origin_left",
        "title": "Purkinje > Attribute detail > node_id_origin_left",
        "section": "Attribute detail > node_id_origin_left",
        "text": "Purkinje.node_id_origin_left: int = None\n\nLeft Purkinje origin id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.node_id_origin_right",
        "title": "Purkinje > Attribute detail > node_id_origin_right",
        "section": "Attribute detail > node_id_origin_right",
        "text": "Purkinje.node_id_origin_right: int = None\n\nRight Purkinje origin id.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.edgelen",
        "title": "Purkinje > Attribute detail > edgelen",
        "section": "Attribute detail > edgelen",
        "text": "Purkinje.edgelen: pint.Quantity = 0\n\nEdge length.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.ngen",
        "title": "Purkinje > Attribute detail > ngen",
        "section": "Attribute detail > ngen",
        "text": "Purkinje.ngen: pint.Quantity = 0\n\nNumber of generations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.nbrinit",
        "title": "Purkinje > Attribute detail > nbrinit",
        "section": "Attribute detail > nbrinit",
        "text": "Purkinje.nbrinit: pint.Quantity = 0\n\nNumber of beams from origin point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.nsplit",
        "title": "Purkinje > Attribute detail > nsplit",
        "section": "Attribute detail > nsplit",
        "text": "Purkinje.nsplit: pint.Quantity = 0\n\nNumber of splits at each leaf.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.pmjtype",
        "title": "Purkinje > Attribute detail > pmjtype",
        "section": "Attribute detail > pmjtype",
        "text": "Purkinje.pmjtype: pint.Quantity = 0\n\nPurkinje muscle junction type.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Purkinje",
        "href": "api/ansys/heart/core/settings/settings/Purkinje.html#Purkinje.pmjradius",
        "title": "Purkinje > Attribute detail > pmjradius",
        "section": "Attribute detail > pmjradius",
        "text": "Purkinje.pmjradius: pint.Quantity = 0\n\nPurkinje muscle junction radius.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#tentusschermid",
        "title": "TentusscherMid",
        "section": "TentusscherMid",
        "text": "Bases: Tentusscher\nHold data for Tentusscher cell model in its mid-myocardium version.\nTentusscherMid\nTentusscherMid\nTentusscher"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#ansys.heart.core.settings.material.ep_material.CellModel.TentusscherMid",
        "title": "TentusscherMid > TentusscherMid > TentusscherMid",
        "section": "TentusscherMid > TentusscherMid",
        "text": "class ansys.heart.core.settings.material.ep_material.CellModel.TentusscherMid\n\nBases: Tentusscher\n\nHold data for Tentusscher cell model in its mid-myocardium version.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#overview",
        "title": "TentusscherMid > Overview",
        "section": "Overview",
        "text": "gks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr\nOverview\ngks\ngto\nv\nki\nnai\ncai\ncass\ncasr\nrpri\nxr1\nxr2\nxs\nm\nh\nj\nd\nf\nf2\nfcass\ns\nr"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#import-detail",
        "title": "TentusscherMid > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#attribute-detail",
        "title": "TentusscherMid > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.gks",
        "title": "TentusscherMid > Attribute detail > gks",
        "section": "Attribute detail > gks",
        "text": "TentusscherMid.gks: float = 0.098\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.gto",
        "title": "TentusscherMid > Attribute detail > gto",
        "section": "Attribute detail > gto",
        "text": "TentusscherMid.gto: float = 0.294\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.v",
        "title": "TentusscherMid > Attribute detail > v",
        "section": "Attribute detail > v",
        "text": "TentusscherMid.v: float = -85.423\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.ki",
        "title": "TentusscherMid > Attribute detail > ki",
        "section": "Attribute detail > ki",
        "text": "TentusscherMid.ki: float = 138.52\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.nai",
        "title": "TentusscherMid > Attribute detail > nai",
        "section": "Attribute detail > nai",
        "text": "TentusscherMid.nai: float = 10.132\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.cai",
        "title": "TentusscherMid > Attribute detail > cai",
        "section": "Attribute detail > cai",
        "text": "TentusscherMid.cai: float = 0.000153\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.cass",
        "title": "TentusscherMid > Attribute detail > cass",
        "section": "Attribute detail > cass",
        "text": "TentusscherMid.cass: float = 0.00042\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.casr",
        "title": "TentusscherMid > Attribute detail > casr",
        "section": "Attribute detail > casr",
        "text": "TentusscherMid.casr: float = 4.272\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.rpri",
        "title": "TentusscherMid > Attribute detail > rpri",
        "section": "Attribute detail > rpri",
        "text": "TentusscherMid.rpri: float = 0.8978\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.xr1",
        "title": "TentusscherMid > Attribute detail > xr1",
        "section": "Attribute detail > xr1",
        "text": "TentusscherMid.xr1: float = 0.0165\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.xr2",
        "title": "TentusscherMid > Attribute detail > xr2",
        "section": "Attribute detail > xr2",
        "text": "TentusscherMid.xr2: float = 0.473\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.xs",
        "title": "TentusscherMid > Attribute detail > xs",
        "section": "Attribute detail > xs",
        "text": "TentusscherMid.xs: float = 0.0174\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.m",
        "title": "TentusscherMid > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "TentusscherMid.m: float = 0.00165\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.h",
        "title": "TentusscherMid > Attribute detail > h",
        "section": "Attribute detail > h",
        "text": "TentusscherMid.h: float = 0.749\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.j",
        "title": "TentusscherMid > Attribute detail > j",
        "section": "Attribute detail > j",
        "text": "TentusscherMid.j: float = 0.6788\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.d",
        "title": "TentusscherMid > Attribute detail > d",
        "section": "Attribute detail > d",
        "text": "TentusscherMid.d: float = 3.288e-05\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.f",
        "title": "TentusscherMid > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "TentusscherMid.f: float = 0.7026\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.f2",
        "title": "TentusscherMid > Attribute detail > f2",
        "section": "Attribute detail > f2",
        "text": "TentusscherMid.f2: float = 0.9526\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.fcass",
        "title": "TentusscherMid > Attribute detail > fcass",
        "section": "Attribute detail > fcass",
        "text": "TentusscherMid.fcass: float = 0.9942\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.s",
        "title": "TentusscherMid > Attribute detail > s",
        "section": "Attribute detail > s",
        "text": "TentusscherMid.s: float = 0.999998\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid",
        "href": "api/ansys/heart/core/settings/material/ep_material/CellModel.TentusscherMid.html#TentusscherMid.r",
        "title": "TentusscherMid > Attribute detail > r",
        "section": "Attribute detail > r",
        "text": "TentusscherMid.r: float = 2.347e-08\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#conductionsystem",
        "title": "ConductionSystem",
        "section": "ConductionSystem",
        "text": "Methods to generate conduction system.\nConductionSystem\nConductionSystem"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ansys.heart.core.pre.conduction_beam.ConductionSystem",
        "title": "ConductionSystem > ConductionSystem > ConductionSystem",
        "section": "ConductionSystem > ConductionSystem",
        "text": "class ansys.heart.core.pre.conduction_beam.ConductionSystem(model: ansys.heart.core.models.FourChamber)\n\nMethods to generate conduction system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#overview",
        "title": "ConductionSystem > Overview",
        "section": "Overview",
        "text": "compute_sa_node\nCompute SinoAtrial node.\ncompute_av_node\nCompute Atrio-Ventricular node.\ncompute_av_conduction\nCompute Atrio-Ventricular conduction by means of beams following a geodesic path.\ncompute_his_conduction\nCompute His bundle conduction.\ncompute_left_right_bundle\nBundle branch.\nm\nfind_path\nFind shortest path between two nodes.\nOverview\ncompute_sa_node\ncompute_av_node\ncompute_av_conduction\ncompute_his_conduction\ncompute_left_right_bundle\nm\nfind_path"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#import-detail",
        "title": "ConductionSystem > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#attribute-detail",
        "title": "ConductionSystem > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ConductionSystem.m",
        "title": "ConductionSystem > Attribute detail > m",
        "section": "Attribute detail > m",
        "text": "ConductionSystem.m\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#method-detail",
        "title": "ConductionSystem > Method detail",
        "section": "Method detail",
        "text": "Compute SinoAtrial node.\nSinoAtrial node is defined on the endocardium of the right atrium and\nbetween sup vena cava and inf vena cave.\nCompute Atrio-Ventricular node.\nAtrioVentricular node is on right artrium endocardium surface and closest to septum.\nreturns the AV node.\nCompute Atrio-Ventricular conduction by means of beams following a geodesic path.\nCompute His bundle conduction.\nFind shortest path between two nodes.\nMust be with tetra cells.\nStart point coordinates.\nEnd point coordinates\nReturn a segment set (list of triangles) on which the path relies, by default True\nUnlike geodesic, this method searches a path inside of a 3D mesh.\nBundle branch.\nMethod detail\nPoint\npv.UnstructuredGrid\nnp.ndarray\nnp.ndarray\noptional"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ConductionSystem.compute_sa_node",
        "title": "ConductionSystem > Method detail > compute_sa_node",
        "section": "Method detail > compute_sa_node",
        "text": "ConductionSystem.compute_sa_node(target_coord=None) -> ansys.heart.core.objects.Point\n\nCompute SinoAtrial node.\n\nSinoAtrial node is defined on the endocardium of the right atrium and\nbetween sup vena cava and inf vena cave.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ConductionSystem.compute_av_node",
        "title": "ConductionSystem > Method detail > compute_av_node",
        "section": "Method detail > compute_av_node",
        "text": "ConductionSystem.compute_av_node(target_coord=None) -> ansys.heart.core.objects.Point\n\nCompute Atrio-Ventricular node.\n\nAtrioVentricular node is on right artrium endocardium surface and closest to septum.\n\nReturns\n\nPoint\n\nreturns the AV node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ConductionSystem.compute_av_conduction",
        "title": "ConductionSystem > Method detail > compute_av_conduction",
        "section": "Method detail > compute_av_conduction",
        "text": "ConductionSystem.compute_av_conduction() -> ansys.heart.core.objects._BeamsMesh\n\nCompute Atrio-Ventricular conduction by means of beams following a geodesic path.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ConductionSystem.compute_his_conduction",
        "title": "ConductionSystem > Method detail > compute_his_conduction",
        "section": "Method detail > compute_his_conduction",
        "text": "ConductionSystem.compute_his_conduction(beam_length: float = 1.5) -> tuple[ansys.heart.core.objects._BeamsMesh, ansys.heart.core.objects.Point, ansys.heart.core.objects.Point]\n\nCompute His bundle conduction.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ConductionSystem.find_path",
        "title": "ConductionSystem > Method detail > find_path",
        "section": "Method detail > find_path",
        "text": "static ConductionSystem.find_path(mesh: pyvista.UnstructuredGrid, start: numpy.ndarray, end: numpy.ndarray, return_segment=True)\n\nFind shortest path between two nodes.\n\nParameters\n\nmesh\n\npv.UnstructuredGrid\n\nMust be with tetra cells.\n\nstart\n\nnp.ndarray\n\nStart point coordinates.\n\nend\n\nnp.ndarray\n\nEnd point coordinates\n\nreturn_segment\n\nbool, optional\n\nReturn a segment set (list of triangles) on which the path relies, by default True\n\nNotes\n\nUnlike geodesic, this method searches a path inside of a 3D mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem",
        "href": "api/ansys/heart/core/pre/conduction_beam/ConductionSystem.html#ConductionSystem.compute_left_right_bundle",
        "title": "ConductionSystem > Method detail > compute_left_right_bundle",
        "section": "Method detail > compute_left_right_bundle",
        "text": "ConductionSystem.compute_left_right_bundle(start_coord, end_coord, side: str)\n\nBundle branch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#basesimulator",
        "title": "BaseSimulator",
        "section": "BaseSimulator",
        "text": "Base class for the simulator.\nBaseSimulator\nBaseSimulator"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#ansys.heart.core.simulator.BaseSimulator",
        "title": "BaseSimulator > BaseSimulator > BaseSimulator",
        "section": "BaseSimulator > BaseSimulator",
        "text": "class ansys.heart.core.simulator.BaseSimulator(model: ansys.heart.core.models.HeartModel, dyna_settings: ansys.heart.core.settings.settings.DynaSettings = None, simulation_directory: pathlib = '')\n\nBase class for the simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#overview",
        "title": "BaseSimulator > Overview",
        "section": "Overview",
        "text": "load_default_settings\nLoad default simulation settings.\ncompute_fibers\nCompute the fiber-sheet directions on ventricle(s).\ncompute_uhc\nCompute universal ‘heart’ coordinates system.\ncompute_right_atrial_fiber\nCompute right atrium fiber with LDRBD method.\ncompute_left_atrial_fiber\nCompute left atrium fiber with LDRBD method.\nrun_laplace_problem\nRun Laplace-Dirichlet (thermal) problem in LSDYNA.\nmodel\nHeartModel to simulate.\nroot_directory\nRoot simulation directory.\nsettings\nSimulation settings.\nOverview\nload_default_settings\ncompute_fibers\ncompute_uhc\ncompute_right_atrial_fiber\ncompute_left_atrial_fiber\nrun_laplace_problem\nmodel\nroot_directory\nsettings"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#import-detail",
        "title": "BaseSimulator > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#attribute-detail",
        "title": "BaseSimulator > Attribute detail",
        "section": "Attribute detail",
        "text": "HeartModel to simulate.\nRoot simulation directory.\nSimulation settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.model",
        "title": "BaseSimulator > Attribute detail > model",
        "section": "Attribute detail > model",
        "text": "BaseSimulator.model: ansys.heart.core.models.HeartModel\n\nHeartModel to simulate.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.root_directory",
        "title": "BaseSimulator > Attribute detail > root_directory",
        "section": "Attribute detail > root_directory",
        "text": "BaseSimulator.root_directory = ''\n\nRoot simulation directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.settings",
        "title": "BaseSimulator > Attribute detail > settings",
        "section": "Attribute detail > settings",
        "text": "BaseSimulator.settings: ansys.heart.core.settings.settings.SimulationSettings\n\nSimulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#method-detail",
        "title": "BaseSimulator > Method detail",
        "section": "Method detail",
        "text": "Load default simulation settings.\nCompute the fiber-sheet directions on ventricle(s).\nmethod, by default “LSDYNA”\nrotation angle alpha and beta, by default None\nCompute universal ‘heart’ coordinates system.\nCompute right atrium fiber with LDRBD method.\nCoordinates of appendage.\nLeft atrium with fiber coordinates system ‘e_l’, ‘e_t’ and ‘e_n’.\nthe method is described in https://doi.org/10.1016/j.cma.2020.113468\nCompute left atrium fiber with LDRBD method.\nCoordinates of appendage, by default None\nIf not defined, we use the cap named ‘appendage’.\nRight atrium with fiber coordinates system ‘e_l’, ‘e_t’ and ‘e_n’.\nthe method is described in https://doi.org/10.1016/j.cma.2020.113468\nRun Laplace-Dirichlet (thermal) problem in LSDYNA.\nLSDYNA directory\nSimulation type.\nLandmarks to create nodeset, keys can be ‘laa’,’raa’,’top’.\nMethod detail\nLiteral\noptional\npython:dict\noptional\npython:list\npython:list\npython:float\noptional\npv.UnstructuredGrid\npython:list\npython:float\noptional\npv.UnstructuredGrid\npython:dict\nUnstructuredGrid\nwith\narray\nto\nmap\ndata\nback\nto\nfull"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.load_default_settings",
        "title": "BaseSimulator > Method detail > load_default_settings",
        "section": "Method detail > load_default_settings",
        "text": "BaseSimulator.load_default_settings() -> ansys.heart.core.settings.settings.SimulationSettings\n\nLoad default simulation settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.compute_fibers",
        "title": "BaseSimulator > Method detail > compute_fibers",
        "section": "Method detail > compute_fibers",
        "text": "BaseSimulator.compute_fibers(method: Literal['LSDYNA', 'D-RBM'] = 'LSDYNA', rotation_angles: dict = None)\n\nCompute the fiber-sheet directions on ventricle(s).\n\nParameters\n\nmethod\n\nLiteral[&quot;LSDYNA&quot;, &quot;D, optional\n\nmethod, by default “LSDYNA”\n\nrotation_angles\n\npython:dict, optional\n\nrotation angle alpha and beta, by default None\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.compute_uhc",
        "title": "BaseSimulator > Method detail > compute_uhc",
        "section": "Method detail > compute_uhc",
        "text": "BaseSimulator.compute_uhc() -> pyvista.UnstructuredGrid\n\nCompute universal ‘heart’ coordinates system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.compute_right_atrial_fiber",
        "title": "BaseSimulator > Method detail > compute_right_atrial_fiber",
        "section": "Method detail > compute_right_atrial_fiber",
        "text": "BaseSimulator.compute_right_atrial_fiber(appendage: list[float], top: list[list[float]] = None) -> pyvista.UnstructuredGrid\n\nCompute right atrium fiber with LDRBD method.\n\nParameters\n\nappendage: list[float]\n\nCoordinates of appendage.\n\ntop\n\npython:list[python:list[python:float]], optional\n\n\n\nA list of nodal coordinates to define the top path. By default, this is set to None.\n\n\n\nThe top path is a set of nodes connecting the superior (SVC) and inferior (IVC) vena cava.\n\n\n\nRefer to `Notes` for more details.\n\n\n\nThe default method (top=None) may not work for some anatomical structures. In such cases,\n\n\n\nyou can define the start and end points by providing a list of coordinates,\n\n\n\ne.g., [[x1, y1, z1], [x2, y2, z2]]. These two nodes should be located on the SVC and IVC\n\n\n\nrings, approximately at the 12 o’clock position.\n\n\n\nYou can also add an intermediate point to enforce the geodesic path,\n\n\n\ne.g., [[x1, y1, z1], [x3, y3, z3], [x2, y2, z2]].\n\n\n\nReturns\n\npv.UnstructuredGrid\n\nLeft atrium with fiber coordinates system ‘e_l’, ‘e_t’ and ‘e_n’.\n\nNotes\n\nthe method is described in https://doi.org/10.1016/j.cma.2020.113468\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.compute_left_atrial_fiber",
        "title": "BaseSimulator > Method detail > compute_left_atrial_fiber",
        "section": "Method detail > compute_left_atrial_fiber",
        "text": "BaseSimulator.compute_left_atrial_fiber(appendage: list[float] = None) -> pyvista.UnstructuredGrid\n\nCompute left atrium fiber with LDRBD method.\n\nParameters\n\nappendage\n\npython:list[python:float], optional\n\nCoordinates of appendage, by default None\nIf not defined, we use the cap named ‘appendage’.\n\nReturns\n\npv.UnstructuredGrid\n\nRight atrium with fiber coordinates system ‘e_l’, ‘e_t’ and ‘e_n’.\n\nNotes\n\nthe method is described in https://doi.org/10.1016/j.cma.2020.113468\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/simulator/BaseSimulator",
        "href": "api/ansys/heart/core/simulator/BaseSimulator.html#BaseSimulator.run_laplace_problem",
        "title": "BaseSimulator > Method detail > run_laplace_problem",
        "section": "Method detail > run_laplace_problem",
        "text": "BaseSimulator.run_laplace_problem(export_directory, type: Literal['uvc', 'la_fiber', 'ra_fiber'], **kwargs)\n\nRun Laplace-Dirichlet (thermal) problem in LSDYNA.\n\nParameters\n\nexport_directory: str\n\nLSDYNA directory\n\ntype: str\n\nSimulation type.\n\nkwargs\n\npython:dict\n\nLandmarks to create nodeset, keys can be ‘laa’,’raa’,’top’.\n\nReturns\n\nUnstructuredGrid with array to map data back to full mesh.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#pyansys-heart-overview",
        "title": "Getting started > PyAnsys Heart overview",
        "section": "PyAnsys Heart overview",
        "text": "This section provides a brief review of key techniques in cardiac modeling. A list of references is also provided.\nIt is assumed that the reader has a basic knowledge on LS-DYNA usage. However, it is encouraged to read the LS-DYNA manuals for a comprehensive understanding of the modeling process.\nPyAnsys Heart overview"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#anatomy-generation",
        "title": "Getting started > PyAnsys Heart overview > Anatomy generation",
        "section": "Anatomy generation",
        "text": "Currently PyAnsys Heart supports generating electrophysiology, electro-mechanical and mechanical models from 24 pathological (Strocchi et al.) and 20 healthy (Rodero et al.) hearts.\nInput .case and .vtk files for both repositories can be found here:\nhttps://zenodo.org/records/3890034\nhttps://zenodo.org/records/4590294\nThese .vtk and .case files are processed into a compatible input format where the naming and ids of the surfaces are inferred from the part ids and consequently written to an input .vtp file and .json file.\nThese input files are then further processed into a HeartModel that contains the various relevant anatomical features (left ventricle, right ventricle, endo- and epicardium, and cavities). This\nHeartModel is a Python object that is then further processed (add physics) and exported as a LS-DYNA model.\nAnatomy generation"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#brief-theory",
        "title": "Getting started > PyAnsys Heart overview > Brief theory",
        "section": "Brief theory",
        "text": "Some anatomical details are difficult to capture with medical imaging techniques but are crucial for physical simulations. Fortunately, some rule-based methods proposed in the literature are included in PyAnsys Heart.\nAtrial fibers can be generated by a rule-based method published in Piersanti et al.. Unlike ventricular fibers, which rely on the keyword *EM_EP_CREATEFIBERORIENTATION in LS-DYNA, this algorithm is implemented in PyAnsys Heart by solving multiple (thermal) Laplace’s equations in LS-DYNA.\nA consistent Universal Heart Coordinates (UHC) system can be convenient for landmark determination, data transferring, etc. A universal ventricular coordinate system presented in Bayer et al.2 is implemented. A universal coordinate system for atria, as presented in Roney et al., is to be implemented.\nBrief theory\n*EM_EP_CREATEFIBERORIENTATION"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#electrophysiology",
        "title": "Getting started > PyAnsys Heart overview > Electrophysiology",
        "section": "Electrophysiology",
        "text": "This section introduces cardiac electrophysiology modeling in PyAnsys Heart.\nThree options are available to model electrical propagation in PyAnsys Heart (see simulator.settings.settings.epanalysis.solvertype): Monodomain (*EM_CONTROL with EMSOL=11 in LS-DYNA), Eikonal (*EM_CONTROL with EMSOL=14 in LS-DYNA) and ReactionEikonal model (*EM_CONTROL with EMSOL=15 in LS-DYNA).\nThe Monodomain model is a reaction-diffusion model and is a simplification of the Bidomain model Potse et al.. In LS-DYNA, the ‘passive’ electrical material properties (electrical conductivity, membrane capacitance, surface/volume ratio) corresponding to the Monodomain model are set in *EM_MAT_003 for the myocardium and *EM_MAT_001 for the beams of the conduction system. These are to be completed with ‘active’ properties using a cell model (see ‘cell model’ section).\nLS-DYNA offers the possibility of using either the Bidomain, Monodomain, or a mix of\nboth models but only the Monodomain is exposed in PyAnsys Heart for now.\nIn this case only the activation time is computed, no cell model is used.\nHere, the ‘passive’ electrical material properties are also set with *EM_MAT_003 for 3D tissue and *EM_MAT_001 for the beams of the conduction system.\nThe Reaction Eikonal model first computes the activation time on each node, then it assigns action potential curves to each node with a time delay that corresponds to the activation time. Passive properties are the same as those described in the pure Eikonal model.\nThe cell model used PyAnsys Heart is the TenTusscher et al. model, other models are to be added in the future.\nWhen UHCs are computed, the transmural coordinate is used to distinguish between endo-, epi- and mid- myocardium layers using the corresponding version of the TenTusscher model.\nLS-DYNA supports other cell models and user defined models, see the *EM_EP collection of keywords in LS-DYNA manuals.\nTissue stimulation is set by default on the SA node in a four-chamber model and in the left and right apex in case of a left ventricle or biventricular model. However, users can define their own stimulation origin and profile (see the Stimulation definition example).\nElectrophysiology\n*EM_CONTROL\n*EM_CONTROL\n*EM_CONTROL\n*EM_MAT_003\n*EM_MAT_001\n*EM_MAT_003\n*EM_MAT_001"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#mechanics",
        "title": "Getting started > PyAnsys Heart overview > Mechanics",
        "section": "Mechanics",
        "text": "This section explains the key elements in cardiac mechanical models and their default options in PyAnsys Heart.\nCardiac tissue mechanics is modeled using MAT_295, which consists of two components: passive and active. By default, the passive component is represented by the Holzapfel-type model for both isotropic and anisotropic properties. For the active component, the Guccione model (ACTYPE=1) is used for mechanical models, while the Hunter model (ACTYPE=3) is employed for electromechanical models.\nBoundary conditions are considered following the approach presented in Strocchi et al.. Robin-type conditions are applied at the heart’s valve regions, depending on the specific model constructed. Additionally, the pericardium’s effect is accounted for by adding springs and dampers at the epicardium. For the ventricles, the stiffness of springs is scaled from different locations to constrain the motion primarily at the apex region.\nMany papers have described the coupling between 3D heart models and 0D circulation models, such as those by Agustin et al.. LS-DYNA uses CONTROL_VOLUME related keywords to achieve this coupling. By default, PyAnsys Heart provides a simple open-loop model. Specifically, a 2-element Windkessel model is applied to the left and right ventricle. If atria are present, atrioventricular valves are represented by a diode model, and a constant venous inflow is set for both atria. If no atrium is present, a constant venous pressure (preload) is set.\nIt is assumed that the input geometry is in the state of end-diastole. To account for the initial stress from the end-diastolic pressure, the stress-free configuration is computed using the keyword *CONTROL_REFERENCE_CONFIGURATION. Then, the pressure is reapplied to the stress-free geometry, and a “virtual” end-diastolic mesh with the initial stress is exported. This mesh and initial stress is subsequently used in the final simulation.\nMechanics\nCONTROL_VOLUME"
    },
    {
        "objectID": "getting-started/overview",
        "href": "getting-started/overview.html#references",
        "title": "Getting started > PyAnsys Heart overview > References",
        "section": "References",
        "text": "LS-DYNA manuals: https://lsdyna.ansys.com/manuals/\nMAT_295: https://ftp.lstc.com/anonymous/outgoing/support/PAPERS/mat_295_formulation_public.pdf\nBayer et al.: Bayer, J.D., Blake, R. C., Plank, G., and Trayanova, N. A., “A novel rule-based algorithm for assigning myocardial fiber orientation to computational heart models,” Annals of biomedical engineering, 40(10), 2243-2254 (2012)\nCostabal et al.: Costabal, Francisco Sahli, Daniel E. Hurtado, and Ellen Kuhl. “Generating Purkinje networks in the human heart.” Journal of biomechanics 49.12 (2016): 2455-2465.\nStrocchi et al.: Strocchi, Marina, et al. “Simulating ventricular systolic motion in a four-chamber heart model with spatially varying robin boundary conditions to model the effect of the pericardium.” Journal of Biomechanics 101 (2020): 109645.\nPiersanti et al.: Piersanti, Roberto, et al. “Modeling cardiac muscle fibers in ventricular and atrial electrophysiology simulations.” Computer Methods in Applied Mechanics and Engineering 373 (2021): 113468.\nRoney et al.: Roney, Caroline H., et al., “Universal atrial coordinates applied to visualisation, registration and construction of patient specific meshes.” Medical image analysis 55 (2019): 65-75.\nBayer et al.2: Bayer, Jason, et al. “Universal ventricular coordinates: A generic framework for describing position within the heart and transferring data.” Medical image analysis 45 (2018): 83-93.\nAgustin et al.: Augustin, Christoph M., et al. “A computationally efficient physiologically comprehensive 3D-0D closed-loop model of the heart and circulation.” Computer methods in applied mechanics and engineering 386 (2021): 114092.\nPotse et al.: Potse, M., Dube, B., Richer, J., Vinet, A., Gulrajani, R.: A comparison of monodomain and bidomain reaction-diffusion models for action potential propagation in the human heart. IEEE Transactions on Biomedical Engineering 53(12), 2425- 2435 (dec 2006).\nTenTusscher et al.: Ten Tusscher, K. H., & Panfilov, A. V. (2006). Alternans and spiral breakup in a human ventricular tissue model. American Journal of Physiology-Heart and Circulatory Physiology, 291(3), H1088-H1100.\nRodero et al.: Rodero, C., et al. (2021). Virtual cohort of adult healthy four-chamber heart meshes from CT images. In PLOS Computational Biology (1.0.0).\nReferences"
    },
    {
        "objectID": "user-guide/simulator",
        "href": "user-guide/simulator.html#simulator",
        "title": "User guide > Simulator",
        "section": "Simulator",
        "text": "Simulator is used to link up different simulation steps for cardiac modeling. For example, for electrophysiology simulations, fiber orientation BaseSimulator.compute_fibers and Purkinje network EPSimulator.compute_purkinje are computed before launching the physical simulation. In mechanical analysis, it is necessary to compute the stress free configuration MechanicsSimulator.compute_stress_free_configuration before running the simulation.\nBased on different applications, different simulators need to be created.\nBaseSimulator, parent class for all other Simulators, it holds general methods, like fiber generation.\nEPSimulator, used for running electrophysiology cardiac simulation\nMechanicsSimulator, used for running mechanical cardiac simulation\nEPMechanicsSimulator, used for running electrical-mechanical coupled cardiac simulation\nA simple usage example is given in the following:\nDefault modeling parameters are saved here, you can load them to the simulator:\nAlternatively, settings can be load from a yaml file as follow\nSimulator\nSimulator\nBaseSimulator.compute_fibers\nEPSimulator.compute_purkinje\nMechanicsSimulator.compute_stress_free_configuration\nBaseSimulator\nEPSimulator\nMechanicsSimulator\nEPMechanicsSimulator\nhere"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#fourchamber",
        "title": "FourChamber",
        "section": "FourChamber",
        "text": "Bases: HeartModel\nModel of the left/right ventricle and left/right atrium.\nFourChamber\nFourChamber\nHeartModel"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#ansys.heart.core.models.FourChamber",
        "title": "FourChamber > FourChamber > FourChamber",
        "section": "FourChamber > FourChamber",
        "text": "class ansys.heart.core.models.FourChamber(working_directory: pathlib.Path | str = None)\n\nBases: HeartModel\n\nModel of the left/right ventricle and left/right atrium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#overview",
        "title": "FourChamber > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nright_ventricle\nRight ventricle part.\nseptum\nSeptum.\nleft_atrium\nLeft atrium part.\nright_atrium\nRight atrium part.\nOverview\nleft_ventricle\nright_ventricle\nseptum\nleft_atrium\nright_atrium"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#import-detail",
        "title": "FourChamber > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#attribute-detail",
        "title": "FourChamber > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nRight ventricle part.\nSeptum.\nLeft atrium part.\nRight atrium part.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#FourChamber.left_ventricle",
        "title": "FourChamber > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "FourChamber.left_ventricle: ansys.heart.core.objects.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#FourChamber.right_ventricle",
        "title": "FourChamber > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "FourChamber.right_ventricle: ansys.heart.core.objects.Part\n\nRight ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#FourChamber.septum",
        "title": "FourChamber > Attribute detail > septum",
        "section": "Attribute detail > septum",
        "text": "FourChamber.septum: ansys.heart.core.objects.Part\n\nSeptum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#FourChamber.left_atrium",
        "title": "FourChamber > Attribute detail > left_atrium",
        "section": "Attribute detail > left_atrium",
        "text": "FourChamber.left_atrium: ansys.heart.core.objects.Part\n\nLeft atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FourChamber",
        "href": "api/ansys/heart/core/models/FourChamber.html#FourChamber.right_atrium",
        "title": "FourChamber > Attribute detail > right_atrium",
        "section": "Attribute detail > right_atrium",
        "text": "FourChamber.right_atrium: ansys.heart.core.objects.Part\n\nRight atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/fluent_reader/index",
        "href": "api/ansys/heart/core/utils/fluent_reader/index.html#the-fluent_readerpy-module",
        "title": "The fluent_reader.py module",
        "section": "The fluent_reader.py module",
        "text": "The fluent_reader.py module\nfluent_reader.py"
    },
    {
        "objectID": "api/ansys/heart/core/utils/fluent_reader/index",
        "href": "api/ansys/heart/core/utils/fluent_reader/index.html#summary",
        "title": "The fluent_reader.py module > Summary",
        "section": "Summary",
        "text": "Summary"
    },
    {
        "objectID": "api/ansys/heart/core/utils/fluent_reader/index",
        "href": "api/ansys/heart/core/utils/fluent_reader/index.html#description",
        "title": "The fluent_reader.py module > Description",
        "section": "Description",
        "text": "Module containing functions to read/write fluent meshes in HDF5 format.\nDescription"
    },
    {
        "objectID": "index",
        "href": "index.html#pyansys-heart-0110",
        "title": "PyAnsys Heart 0.11.0",
        "section": "PyAnsys Heart 0.11.0",
        "text": "PyAnsys Heart is a Python framework for heart modeling using Ansys tools.\nLearn how to install the package and get started with PyAnsys Heart.\nLearn how to use the capabilities of PyAnsys Heart.\nExplore the API reference for PyAnsys Heart.\nExplore examples to learn how to use PyAnsys Heart.\nLearn how to contribute to PyAnsys Heart.\nView the changelog for PyAnsys Heart.\nPyAnsys Heart 0.11.0"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#settings",
        "title": "Settings",
        "section": "Settings",
        "text": "Generic settings class.\nSettings\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#ansys.heart.core.settings.settings.Settings",
        "title": "Settings > Settings > Settings",
        "section": "Settings > Settings",
        "text": "class ansys.heart.core.settings.settings.Settings\n\nGeneric settings class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#overview",
        "title": "Settings > Overview",
        "section": "Overview",
        "text": "set_values\nRead default settings from dictionary.\nserialize\nSerialize the settings, that is formats the Quantity as str(<value> <unit>).\nto_consistent_unit_system\nConvert units to consistent unit system.\n__repr__\nRepresent object in as dictionary in YAML style.\nOverview\nset_values\nserialize\nto_consistent_unit_system\n__repr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#import-detail",
        "title": "Settings > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#method-detail",
        "title": "Settings > Method detail",
        "section": "Method detail",
        "text": "Represent object in as dictionary in YAML style.\nRead default settings from dictionary.\nSerialize the settings, that is formats the Quantity as str(<value> <unit>).\nConvert units to consistent unit system.\nCurrently the only supported unit system is [“MPa”, “mm”, “N”, “ms”, “g”]\nFor instance:\nQuantity(10, “mm/s”) –> Quantity(0.01, “mm/ms”)\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#Settings.__repr__",
        "title": "Settings > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "Settings.__repr__()\n\nRepresent object in as dictionary in YAML style.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#Settings.set_values",
        "title": "Settings > Method detail > set_values",
        "section": "Method detail > set_values",
        "text": "Settings.set_values(defaults: dict)\n\nRead default settings from dictionary.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#Settings.serialize",
        "title": "Settings > Method detail > serialize",
        "section": "Method detail > serialize",
        "text": "Settings.serialize(remove_units: bool = False) -> dict\n\nSerialize the settings, that is formats the Quantity as str(<value> <unit>).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Settings",
        "href": "api/ansys/heart/core/settings/settings/Settings.html#Settings.to_consistent_unit_system",
        "title": "Settings > Method detail > to_consistent_unit_system",
        "section": "Method detail > to_consistent_unit_system",
        "text": "Settings.to_consistent_unit_system()\n\nConvert units to consistent unit system.\n\nNotes\n\nCurrently the only supported unit system is [“MPa”, “mm”, “N”, “ms”, “g”]\nFor instance:\nQuantity(10, “mm/s”) –> Quantity(0.01, “mm/ms”)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/LSDYNATerminationError",
        "href": "api/ansys/heart/core/exceptions/LSDYNATerminationError.html#lsdynaterminationerror",
        "title": "LSDYNATerminationError",
        "section": "LSDYNATerminationError",
        "text": "Bases: BaseException\nException raised when Normal Termination is not found in the LS-DYNA logs.\nLSDYNATerminationError\nLSDYNATerminationError\nBaseException"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/LSDYNATerminationError",
        "href": "api/ansys/heart/core/exceptions/LSDYNATerminationError.html#ansys.heart.core.exceptions.LSDYNATerminationError",
        "title": "LSDYNATerminationError > LSDYNATerminationError > LSDYNATerminationError",
        "section": "LSDYNATerminationError > LSDYNATerminationError",
        "text": "exception ansys.heart.core.exceptions.LSDYNATerminationError\n\nBases: BaseException\n\nException raised when Normal Termination is not found in the LS-DYNA logs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/exceptions/LSDYNATerminationError",
        "href": "api/ansys/heart/core/exceptions/LSDYNATerminationError.html#import-detail",
        "title": "LSDYNATerminationError > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Point",
        "href": "api/ansys/heart/core/objects/Point.html#point",
        "title": "Point",
        "section": "Point",
        "text": "Bases: Feature\nPoint class. Can be used to collect relevant points in the mesh.\nPoint\nPoint\nFeature"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Point",
        "href": "api/ansys/heart/core/objects/Point.html#ansys.heart.core.objects.Point",
        "title": "Point > Point > Point",
        "section": "Point > Point",
        "text": "class ansys.heart.core.objects.Point(name: str = None, xyz: numpy.ndarray = None, node_id: int = None)\n\nBases: Feature\n\nPoint class. Can be used to collect relevant points in the mesh.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Point",
        "href": "api/ansys/heart/core/objects/Point.html#overview",
        "title": "Point > Overview",
        "section": "Overview",
        "text": "xyz\nXYZ Coordinates of point.\nnode_id\nGlobal node id of point.\nOverview\nxyz\nnode_id"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Point",
        "href": "api/ansys/heart/core/objects/Point.html#import-detail",
        "title": "Point > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Point",
        "href": "api/ansys/heart/core/objects/Point.html#attribute-detail",
        "title": "Point > Attribute detail",
        "section": "Attribute detail",
        "text": "XYZ Coordinates of point.\nGlobal node id of point.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Point",
        "href": "api/ansys/heart/core/objects/Point.html#Point.xyz",
        "title": "Point > Attribute detail > xyz",
        "section": "Attribute detail > xyz",
        "text": "Point.xyz: numpy.ndarray = None\n\nXYZ Coordinates of point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Point",
        "href": "api/ansys/heart/core/objects/Point.html#Point.node_id",
        "title": "Point > Attribute detail > node_id",
        "section": "Attribute detail > node_id",
        "text": "Point.node_id: int = None\n\nGlobal node id of point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/index",
        "href": "api/ansys/heart/core/post/klotz_curve/index.html#the-klotz_curvepy-module",
        "title": "The klotz_curve.py module",
        "section": "The klotz_curve.py module",
        "text": "The klotz_curve.py module\nklotz_curve.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/index",
        "href": "api/ansys/heart/core/post/klotz_curve/index.html#summary",
        "title": "The klotz_curve.py module > Summary",
        "section": "Summary",
        "text": "EDPVR\nEnd diastolic pressure-volume relation.\nSummary\nEDPVR"
    },
    {
        "objectID": "api/ansys/heart/core/post/klotz_curve/index",
        "href": "api/ansys/heart/core/post/klotz_curve/index.html#description",
        "title": "The klotz_curve.py module > Description",
        "section": "Description",
        "text": "Klotz curve module.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#model3",
        "title": "Model3",
        "section": "Model3",
        "text": "Hold data for active model 3, check manual for details.\nModel3\nModel3"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#ansys.heart.core.settings.material.material.ActiveModel.Model3",
        "title": "Model3 > Model3 > Model3",
        "section": "Model3 > Model3",
        "text": "class ansys.heart.core.settings.material.material.ActiveModel.Model3\n\nHold data for active model 3, check manual for details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#overview",
        "title": "Model3 > Overview",
        "section": "Overview",
        "text": "t0\nca2ion50\nn\nf\nl\neta\nsigmax\nOverview\nt0\nca2ion50\nn\nf\nl\neta\nsigmax"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#import-detail",
        "title": "Model3 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#attribute-detail",
        "title": "Model3 > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#Model3.t0",
        "title": "Model3 > Attribute detail > t0",
        "section": "Attribute detail > t0",
        "text": "Model3.t0: float = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#Model3.ca2ion50",
        "title": "Model3 > Attribute detail > ca2ion50",
        "section": "Attribute detail > ca2ion50",
        "text": "Model3.ca2ion50: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#Model3.n",
        "title": "Model3 > Attribute detail > n",
        "section": "Attribute detail > n",
        "text": "Model3.n: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#Model3.f",
        "title": "Model3 > Attribute detail > f",
        "section": "Attribute detail > f",
        "text": "Model3.f: float = 0.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#Model3.l",
        "title": "Model3 > Attribute detail > l",
        "section": "Attribute detail > l",
        "text": "Model3.l: float = 1.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#Model3.eta",
        "title": "Model3 > Attribute detail > eta",
        "section": "Attribute detail > eta",
        "text": "Model3.eta: float = 0.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model3.html#Model3.sigmax",
        "title": "Model3 > Attribute detail > sigmax",
        "section": "Attribute detail > sigmax",
        "text": "Model3.sigmax: float = None\n\n"
    },
    {
        "objectID": "examples/preprocessor/doc_example_atrial_fiber",
        "href": "examples/preprocessor/doc_example_atrial_fiber.html#atrial-fiber",
        "title": "Atrial fiber",
        "section": "Atrial fiber",
        "text": "This examples shows how to generate fibers with the Laplace-Dirichlet-Rule-Based-Method.\nAtrial fiber"
    },
    {
        "objectID": "examples/preprocessor/doc_example_atrial_fiber",
        "href": "examples/preprocessor/doc_example_atrial_fiber.html#perform-the-required-imports",
        "title": "Atrial fiber > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, model, and ls-dyna executable (uses DEV-104373-g6d20c20aee).\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/doc_example_atrial_fiber",
        "href": "examples/preprocessor/doc_example_atrial_fiber.html#instantiate-the-simulator-object",
        "title": "Atrial fiber > Instantiate the simulator object",
        "section": "Instantiate the simulator object",
        "text": "instantiate simulator. Change options where necessary.\nThe DynaSettings object supports several LS-DYNA versions and platforms.\nIncluding: “smp”, “intempi”, “msmpi”, “windows”, “linux”, or “wsl” Choose\nthe one that is appropriate for you.\nInstantiate the simulator object"
    },
    {
        "objectID": "examples/preprocessor/doc_example_atrial_fiber",
        "href": "examples/preprocessor/doc_example_atrial_fiber.html#compute-atrial-fibers",
        "title": "Atrial fiber > Compute atrial fibers",
        "section": "Compute atrial fibers",
        "text": "You may need to define an appropriate point for the right atrial appendage\nthe list defines the x, y, and z coordinates close to the appendage.\nCompute atrial fibers"
    },
    {
        "objectID": "examples/preprocessor/doc_example_atrial_fiber",
        "href": "examples/preprocessor/doc_example_atrial_fiber.html#plot-bundle-selection-results",
        "title": "Atrial fiber > Plot bundle selection results",
        "section": "Plot bundle selection results",
        "text": "Plot bundle selection results"
    },
    {
        "objectID": "examples/preprocessor/doc_example_atrial_fiber",
        "href": "examples/preprocessor/doc_example_atrial_fiber.html#plot-fibers",
        "title": "Atrial fiber > Plot fibers",
        "section": "Plot fibers",
        "text": "Download Jupyter notebook: doc_example_atrial_fiber.ipynb\nDownload Python source code: doc_example_atrial_fiber.py\nDownload zipped: doc_example_atrial_fiber.zip\nGallery generated by Sphinx-Gallery\nPlot fibers\nDownload Jupyter notebook: doc_example_atrial_fiber.ipynb\nDownload Python source code: doc_example_atrial_fiber.py\nDownload zipped: doc_example_atrial_fiber.zip"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#mechanics",
        "title": "Mechanics",
        "section": "Mechanics",
        "text": "Bases: Settings\nClass for keeping track of settings.\nMechanics\nMechanics\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#ansys.heart.core.settings.settings.Mechanics",
        "title": "Mechanics > Mechanics > Mechanics",
        "section": "Mechanics > Mechanics",
        "text": "class ansys.heart.core.settings.settings.Mechanics\n\nBases: Settings\n\nClass for keeping track of settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#overview",
        "title": "Mechanics > Overview",
        "section": "Overview",
        "text": "analysis\nGeneric analysis settings.\nmaterial\nMaterial settings/configuration.\nboundary_conditions\nBoundary condition specifications.\nsystem\nSystem model settings.\nOverview\nanalysis\nmaterial\nboundary_conditions\nsystem"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#import-detail",
        "title": "Mechanics > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#attribute-detail",
        "title": "Mechanics > Attribute detail",
        "section": "Attribute detail",
        "text": "Generic analysis settings.\nMaterial settings/configuration.\nBoundary condition specifications.\nSystem model settings.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#Mechanics.analysis",
        "title": "Mechanics > Attribute detail > analysis",
        "section": "Attribute detail > analysis",
        "text": "Mechanics.analysis: Analysis\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#Mechanics.material",
        "title": "Mechanics > Attribute detail > material",
        "section": "Attribute detail > material",
        "text": "Mechanics.material: Material\n\nMaterial settings/configuration.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#Mechanics.boundary_conditions",
        "title": "Mechanics > Attribute detail > boundary_conditions",
        "section": "Attribute detail > boundary_conditions",
        "text": "Mechanics.boundary_conditions: BoundaryConditions\n\nBoundary condition specifications.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Mechanics",
        "href": "api/ansys/heart/core/settings/settings/Mechanics.html#Mechanics.system",
        "title": "Mechanics > Attribute detail > system",
        "section": "Attribute detail > system",
        "text": "Mechanics.system: SystemModel\n\nSystem model settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#epmaterial",
        "title": "EpMaterial",
        "section": "EpMaterial",
        "text": "Bases: Settings\nClass for storing ep material settings.\nEpMaterial\nEpMaterial\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#ansys.heart.core.settings.settings.EpMaterial",
        "title": "EpMaterial > EpMaterial > EpMaterial",
        "section": "EpMaterial > EpMaterial",
        "text": "class ansys.heart.core.settings.settings.EpMaterial\n\nBases: Settings\n\nClass for storing ep material settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#overview",
        "title": "EpMaterial > Overview",
        "section": "Overview",
        "text": "myocardium\nMyocardium material.\natrium\nAtrial material.\ncap\nCap material.\nbeam\nbeam material.\nOverview\nmyocardium\natrium\ncap\nbeam"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#import-detail",
        "title": "EpMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#attribute-detail",
        "title": "EpMaterial > Attribute detail",
        "section": "Attribute detail",
        "text": "Myocardium material.\nAtrial material.\nCap material.\nbeam material.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#EpMaterial.myocardium",
        "title": "EpMaterial > Attribute detail > myocardium",
        "section": "Attribute detail > myocardium",
        "text": "EpMaterial.myocardium: AttrDict = None\n\nMyocardium material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#EpMaterial.atrium",
        "title": "EpMaterial > Attribute detail > atrium",
        "section": "Attribute detail > atrium",
        "text": "EpMaterial.atrium: AttrDict = None\n\nAtrial material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#EpMaterial.cap",
        "title": "EpMaterial > Attribute detail > cap",
        "section": "Attribute detail > cap",
        "text": "EpMaterial.cap: AttrDict = None\n\nCap material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/EpMaterial",
        "href": "api/ansys/heart/core/settings/settings/EpMaterial.html#EpMaterial.beam",
        "title": "EpMaterial > Attribute detail > beam",
        "section": "Attribute detail > beam",
        "text": "EpMaterial.beam: AttrDict = None\n\nbeam material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/index",
        "href": "api/ansys/heart/core/objects/index.html#the-objectspy-module",
        "title": "The objects.py module",
        "section": "The objects.py module",
        "text": "The objects.py module\nobjects.py"
    },
    {
        "objectID": "api/ansys/heart/core/objects/index",
        "href": "api/ansys/heart/core/objects/index.html#summary",
        "title": "The objects.py module > Summary",
        "section": "Summary",
        "text": "Feature\nFeature class.\nSurfaceMesh\nSurface class.\nCavity\nCavity class.\nCap\nCap class.\nPoint\nPoint class. Can be used to collect relevant points in the mesh.\nMesh\nMesh class: inherits from pyvista UnstructuredGrid.\nPart\nPart class.\nCapType\nEnumeration tracking cap names.\nPartType\nStores valid part types.\nSummary\nFeature\nSurfaceMesh\nCavity\nCap\nPoint\nMesh\nPart\nCapType\nPartType"
    },
    {
        "objectID": "api/ansys/heart/core/objects/index",
        "href": "api/ansys/heart/core/objects/index.html#description",
        "title": "The objects.py module > Description",
        "section": "Description",
        "text": "Module that defines classes used in the heart model.\nDescription"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fourchamber",
        "href": "examples/preprocessor/doc_preprocess_fourchamber.html#create-a-four-chamber-heart-model",
        "title": "Create a four chamber heart model",
        "section": "Create a four chamber heart model",
        "text": "This example shows you how to process a case file from the Strocchi2020 database\nand process that into a simulation-ready full heart model.\nCreate a four chamber heart model"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fourchamber",
        "href": "examples/preprocessor/doc_preprocess_fourchamber.html#example-setup",
        "title": "Create a four chamber heart model > Example setup",
        "section": "Example setup",
        "text": "Example setup"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fourchamber",
        "href": "examples/preprocessor/doc_preprocess_fourchamber.html#perform-the-required-imports",
        "title": "Create a four chamber heart model > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory and generated model\nYou may need to (manually) download the .case or .vtk files from the Strocchi2020\nand Rodero2021 databases first. See:\nhttps://zenodo.org/records/3890034\nhttps://zenodo.org/records/4590294\nAlternatively you can make use of the download\nmodule instead. See the download module.\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fourchamber",
        "href": "examples/preprocessor/doc_preprocess_fourchamber.html#convert-the-vtk-file-into-compatible-input",
        "title": "Create a four chamber heart model > Convert the .vtk file into compatible input",
        "section": "Convert the .vtk file into compatible input",
        "text": "Convert the .vtk file into compatible input"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fourchamber",
        "href": "examples/preprocessor/doc_preprocess_fourchamber.html#create-a-heart-model",
        "title": "Create a four chamber heart model > Create a heart model",
        "section": "Create a heart model",
        "text": "Initialize the desired heart model by giving a working directory.\nCreate a heart model"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_fourchamber",
        "href": "examples/preprocessor/doc_preprocess_fourchamber.html#visualize-results",
        "title": "Create a four chamber heart model > Visualize results",
        "section": "Visualize results",
        "text": "You can visualize and inspect the components of the model by accessing\nvarious properties/attributes and invoke methods.\nDownload Jupyter notebook: doc_preprocess_fourchamber.ipynb\nDownload Python source code: doc_preprocess_fourchamber.py\nDownload zipped: doc_preprocess_fourchamber.zip\nGallery generated by Sphinx-Gallery\nVisualize results\nDownload Jupyter notebook: doc_preprocess_fourchamber.ipynb\nDownload Python source code: doc_preprocess_fourchamber.py\nDownload zipped: doc_preprocess_fourchamber.zip"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#fibers",
        "title": "Fibers",
        "section": "Fibers",
        "text": "Bases: Settings\nClass for keeping track of fiber settings.\nFibers\nFibers\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#ansys.heart.core.settings.settings.Fibers",
        "title": "Fibers > Fibers > Fibers",
        "section": "Fibers > Fibers",
        "text": "class ansys.heart.core.settings.settings.Fibers\n\nBases: Settings\n\nClass for keeping track of fiber settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#overview",
        "title": "Fibers > Overview",
        "section": "Overview",
        "text": "alpha_endo\nHelical angle in endocardium.\nalpha_epi\nHelical angle in epicardium.\nbeta_endo\nAngle to the outward transmural axis of the heart in endocardium.\nbeta_epi\nAngle to the outward transmural axis of the heart in epicardium.\nbeta_endo_septum\nAngle to the outward transmural axis of the heart in left septum.\nbeta_epi_septum\nAngle to the outward transmural axis of the heart in right septum.\nOverview\nalpha_endo\nalpha_epi\nbeta_endo\nbeta_epi\nbeta_endo_septum\nbeta_epi_septum"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#import-detail",
        "title": "Fibers > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#attribute-detail",
        "title": "Fibers > Attribute detail",
        "section": "Attribute detail",
        "text": "Helical angle in endocardium.\nHelical angle in epicardium.\nAngle to the outward transmural axis of the heart in endocardium.\nAngle to the outward transmural axis of the heart in epicardium.\nAngle to the outward transmural axis of the heart in left septum.\nAngle to the outward transmural axis of the heart in right septum.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#Fibers.alpha_endo",
        "title": "Fibers > Attribute detail > alpha_endo",
        "section": "Attribute detail > alpha_endo",
        "text": "Fibers.alpha_endo: pint.Quantity = 0\n\nHelical angle in endocardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#Fibers.alpha_epi",
        "title": "Fibers > Attribute detail > alpha_epi",
        "section": "Attribute detail > alpha_epi",
        "text": "Fibers.alpha_epi: pint.Quantity = 0\n\nHelical angle in epicardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#Fibers.beta_endo",
        "title": "Fibers > Attribute detail > beta_endo",
        "section": "Attribute detail > beta_endo",
        "text": "Fibers.beta_endo: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in endocardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#Fibers.beta_epi",
        "title": "Fibers > Attribute detail > beta_epi",
        "section": "Attribute detail > beta_epi",
        "text": "Fibers.beta_epi: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in epicardium.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#Fibers.beta_endo_septum",
        "title": "Fibers > Attribute detail > beta_endo_septum",
        "section": "Attribute detail > beta_endo_septum",
        "text": "Fibers.beta_endo_septum: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in left septum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/Fibers",
        "href": "api/ansys/heart/core/settings/settings/Fibers.html#Fibers.beta_epi_septum",
        "title": "Fibers > Attribute detail > beta_epi_septum",
        "section": "Attribute detail > beta_epi_septum",
        "text": "Fibers.beta_epi_septum: pint.Quantity = 0\n\nAngle to the outward transmural axis of the heart in right septum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting-started",
        "href": "getting-started.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This guide helps you get started with PyAnsys Heart. It provides information on how to install the package, run tests, and check the code style.\nLearn about the key techniques in cardiac modeling and the theory behind PyAnsys Heart.\nLearn about the prerequisites for using PyAnsys Heart.\nLearn how to install PyAnsys Heart.\nGetting started"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#part",
        "title": "Part",
        "section": "Part",
        "text": "Part class.\nPart\nPart"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#ansys.heart.core.objects.Part",
        "title": "Part > Part > Part",
        "section": "Part > Part",
        "text": "class ansys.heart.core.objects.Part(name: str = None, part_type: PartType = PartType.UNDEFINED)\n\nPart class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#overview",
        "title": "Part > Overview",
        "section": "Overview",
        "text": "get_point\nGet point from part.\nsurfaces\nList of surfaces belonging to part.\nsurface_names\nList of surface names belonging to part.\nname\nName of the part.\npid\nPart ID.\nmid\nMaterial id associated with part.\npart_type\nType of the part.\nelement_ids\nArray holding element ids that make up this part.\npoints\nPoints of interest belonging to the part.\ncaps\nList of caps belonging to the part.\ncavity\nfiber\nIf this part has fiber/sheet data.\nactive\nIf active stress will be established.\nmeca_material\nMaterial model will be assiggned in Simulator.\nep_material\nEP Material model will be assiggned in Simulator.\nOverview\nget_point\nsurfaces\nsurface_names\nname\npid\nmid\npart_type\nelement_ids\npoints\ncaps\ncavity\nfiber\nactive\nmeca_material\nep_material"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#import-detail",
        "title": "Part > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#property-detail",
        "title": "Part > Property detail",
        "section": "Property detail",
        "text": "List of surfaces belonging to part.\nList of surface names belonging to part.\nProperty detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.surfaces",
        "title": "Part > Property detail > surfaces",
        "section": "Property detail > surfaces",
        "text": "property Part.surfaces: List[SurfaceMesh]\n\nList of surfaces belonging to part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.surface_names",
        "title": "Part > Property detail > surface_names",
        "section": "Property detail > surface_names",
        "text": "property Part.surface_names: List[str]\n\nList of surface names belonging to part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#attribute-detail",
        "title": "Part > Attribute detail",
        "section": "Attribute detail",
        "text": "Name of the part.\nPart ID.\nMaterial id associated with part.\nType of the part.\nArray holding element ids that make up this part.\nPoints of interest belonging to the part.\nList of caps belonging to the part.\nIf this part has fiber/sheet data.\nIf active stress will be established.\nMaterial model will be assiggned in Simulator.\nEP Material model will be assiggned in Simulator.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.name",
        "title": "Part > Attribute detail > name",
        "section": "Attribute detail > name",
        "text": "Part.name = None\n\nName of the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.pid",
        "title": "Part > Attribute detail > pid",
        "section": "Attribute detail > pid",
        "text": "Part.pid = None\n\nPart ID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.mid",
        "title": "Part > Attribute detail > mid",
        "section": "Attribute detail > mid",
        "text": "Part.mid = None\n\nMaterial id associated with part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.part_type",
        "title": "Part > Attribute detail > part_type",
        "section": "Attribute detail > part_type",
        "text": "Part.part_type: PartType\n\nType of the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.element_ids",
        "title": "Part > Attribute detail > element_ids",
        "section": "Attribute detail > element_ids",
        "text": "Part.element_ids: numpy.ndarray\n\nArray holding element ids that make up this part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.points",
        "title": "Part > Attribute detail > points",
        "section": "Attribute detail > points",
        "text": "Part.points: List[Point] = []\n\nPoints of interest belonging to the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.caps",
        "title": "Part > Attribute detail > caps",
        "section": "Attribute detail > caps",
        "text": "Part.caps: List[Cap] = []\n\nList of caps belonging to the part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.cavity",
        "title": "Part > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Part.cavity: Cavity = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.fiber",
        "title": "Part > Attribute detail > fiber",
        "section": "Attribute detail > fiber",
        "text": "Part.fiber: bool = False\n\nIf this part has fiber/sheet data.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.active",
        "title": "Part > Attribute detail > active",
        "section": "Attribute detail > active",
        "text": "Part.active: bool = False\n\nIf active stress will be established.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.meca_material",
        "title": "Part > Attribute detail > meca_material",
        "section": "Attribute detail > meca_material",
        "text": "Part.meca_material: ansys.heart.core.settings.material.material.MechanicalMaterialModel\n\nMaterial model will be assiggned in Simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.ep_material",
        "title": "Part > Attribute detail > ep_material",
        "section": "Attribute detail > ep_material",
        "text": "Part.ep_material: ansys.heart.core.settings.material.ep_material.EPMaterial\n\nEP Material model will be assiggned in Simulator.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#method-detail",
        "title": "Part > Method detail",
        "section": "Method detail",
        "text": "Get point from part.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Part",
        "href": "api/ansys/heart/core/objects/Part.html#Part.get_point",
        "title": "Part > Method detail > get_point",
        "section": "Method detail > get_point",
        "text": "Part.get_point(pointname: str) -> Point\n\nGet point from part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#active",
        "title": "Active",
        "section": "Active",
        "text": "Bases: EPMaterialModel\nHold data for EP material.\nActive\nActive\nEPMaterialModel"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#ansys.heart.core.settings.material.ep_material.EPMaterial.Active",
        "title": "Active > Active > Active",
        "section": "Active > Active",
        "text": "class ansys.heart.core.settings.material.ep_material.EPMaterial.Active\n\nBases: EPMaterialModel\n\nHold data for EP material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#overview",
        "title": "Active > Overview",
        "section": "Overview",
        "text": "solver_type\nsig1\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal\ncell_model\nOverview\nsolver_type\nsig1\nsigma_fiber\nsigma_sheet\nsigma_sheet_normal\ncell_model"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#import-detail",
        "title": "Active > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#attribute-detail",
        "title": "Active > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#Active.solver_type",
        "title": "Active > Attribute detail > solver_type",
        "section": "Attribute detail > solver_type",
        "text": "Active.solver_type = 'Monodomain'\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#Active.sig1",
        "title": "Active > Attribute detail > sig1",
        "section": "Attribute detail > sig1",
        "text": "Active.sig1\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#Active.sigma_fiber",
        "title": "Active > Attribute detail > sigma_fiber",
        "section": "Attribute detail > sigma_fiber",
        "text": "Active.sigma_fiber: float\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#Active.sigma_sheet",
        "title": "Active > Attribute detail > sigma_sheet",
        "section": "Attribute detail > sigma_sheet",
        "text": "Active.sigma_sheet: float | None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#Active.sigma_sheet_normal",
        "title": "Active > Attribute detail > sigma_sheet_normal",
        "section": "Attribute detail > sigma_sheet_normal",
        "text": "Active.sigma_sheet_normal: float | None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.Active.html#Active.cell_model",
        "title": "Active > Attribute detail > cell_model",
        "section": "Attribute detail > cell_model",
        "text": "Active.cell_model: CellModel\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#volume",
        "title": "Volume",
        "section": "Volume",
        "text": "System state for volume.\nVolume\nVolume"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#ansys.heart.core.post.system_model_post.Volume",
        "title": "Volume > Volume > Volume",
        "section": "Volume > Volume",
        "text": "class ansys.heart.core.post.system_model_post.Volume\n\nSystem state for volume.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#overview",
        "title": "Volume > Overview",
        "section": "Overview",
        "text": "cavity\nartery\nvenous\nOverview\ncavity\nartery\nvenous"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#import-detail",
        "title": "Volume > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#attribute-detail",
        "title": "Volume > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#Volume.cavity",
        "title": "Volume > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Volume.cavity: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#Volume.artery",
        "title": "Volume > Attribute detail > artery",
        "section": "Attribute detail > artery",
        "text": "Volume.artery: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Volume",
        "href": "api/ansys/heart/core/post/system_model_post/Volume.html#Volume.venous",
        "title": "Volume > Attribute detail > venous",
        "section": "Attribute detail > venous",
        "text": "Volume.venous: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/utils/landmark_utils/index",
        "href": "api/ansys/heart/core/utils/landmark_utils/index.html#the-landmark_utilspy-module",
        "title": "The landmark_utils.py module",
        "section": "The landmark_utils.py module",
        "text": "The landmark_utils.py module\nlandmark_utils.py"
    },
    {
        "objectID": "api/ansys/heart/core/utils/landmark_utils/index",
        "href": "api/ansys/heart/core/utils/landmark_utils/index.html#summary",
        "title": "The landmark_utils.py module > Summary",
        "section": "Summary",
        "text": "compute_anatomy_axis\nCompute the long and short axes of the left ventricle.\ncompute_aha17\nCompute AHA17 label for left ventricle elements.\ncompute_element_cs\nCompute elemental coordinate system for AHA elements.\nSummary\ncompute_anatomy_axis\ncompute_aha17\ncompute_element_cs"
    },
    {
        "objectID": "api/ansys/heart/core/utils/landmark_utils/index",
        "href": "api/ansys/heart/core/utils/landmark_utils/index.html#description",
        "title": "The landmark_utils.py module > Description",
        "section": "Description",
        "text": "Module for computing heart anatomical landmarks.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/utils/landmark_utils/index",
        "href": "api/ansys/heart/core/utils/landmark_utils/index.html#module-detail",
        "title": "The landmark_utils.py module > Module detail",
        "section": "Module detail",
        "text": "Compute the long and short axes of the left ventricle.\nMitral valve center\nAortic valve center\nleft ventricle epicardium apex point\nrelative distance between mv_center and apex, by default 0.2\nUsed for defining short axis center\n4CV,2CV and Short-axis, each dict contains center and normal\nCompute AHA17 label for left ventricle elements.\nheart model\nshort axis\nlong 4cv axis\ncompute 16 or 17 segments, by default 17\nLV and RV junction points, if given, it defines the start of segment 1, by default None\nIf not given, start point is defined by rotating 60 degrees from 4CV axis\nAHA17 ids, no concerned elements will be assigned with np.nan\nCompute elemental coordinate system for AHA elements.\nheart model\nshort axis\nelements with AHA labels, compute only on these elements\nlongitudinal, radial, circufenrential vecotors of each AHA element\nModule detail\nnp.ndarray\nnp.ndarray\nnp.ndarray\npython:float\noptional\npython:tuple\npython:dict\npython:dict\npython:dict\nHeartModel\npython:dict\npython:dict\nLiteral\noptional\nnp.ndarray\noptional\nnp.ndarray\nHeartModel\npython:dict\nnp.ndarray\npython:tuple\nnp.ndarray\nnp.ndarray\nnp.ndarray"
    },
    {
        "objectID": "api/ansys/heart/core/utils/landmark_utils/index",
        "href": "api/ansys/heart/core/utils/landmark_utils/index.html#landmark_utils.compute_anatomy_axis",
        "title": "The landmark_utils.py module > Module detail > compute_anatomy_axis",
        "section": "Module detail > compute_anatomy_axis",
        "text": "landmark_utils.compute_anatomy_axis(mv_center: numpy.ndarray, av_center: numpy.ndarray, apex: numpy.ndarray, first_cut_short_axis: float = 0.2) -> tuple[dict, dict, dict]\n\nCompute the long and short axes of the left ventricle.\n\nParameters\n\nmv_center\n\nnp.ndarray\n\nMitral valve center\n\nav_center\n\nnp.ndarray\n\nAortic valve center\n\napex\n\nnp.ndarray\n\nleft ventricle epicardium apex point\n\nfirst_cut_short_axis\n\npython:float, optional\n\nrelative distance between mv_center and apex, by default 0.2\nUsed for defining short axis center\n\nReturns\n\npython:tuple[python:dict, python:dict, python:dict]\n\n4CV,2CV and Short-axis, each dict contains center and normal\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/landmark_utils/index",
        "href": "api/ansys/heart/core/utils/landmark_utils/index.html#landmark_utils.compute_aha17",
        "title": "The landmark_utils.py module > Module detail > compute_aha17",
        "section": "Module detail > compute_aha17",
        "text": "landmark_utils.compute_aha17(model: ansys.heart.core.models.HeartModel, short_axis: dict, l4cv_axis: dict, seg: Literal[16, 17] = 17, p_junction: numpy.ndarray = None) -> numpy.ndarray\n\nCompute AHA17 label for left ventricle elements.\n\nParameters\n\nmodel\n\nHeartModel\n\nheart model\n\nshort_axis\n\npython:dict\n\nshort axis\n\nl4cv_axis\n\npython:dict\n\nlong 4cv axis\n\nseg\n\nLiteral[16, 17], optional\n\ncompute 16 or 17 segments, by default 17\n\np_junction\n\nnp.ndarray, optional\n\nLV and RV junction points, if given, it defines the start of segment 1, by default None\nIf not given, start point is defined by rotating 60 degrees from 4CV axis\n\nReturns\n\nnp.ndarray\n\nAHA17 ids, no concerned elements will be assigned with np.nan\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/utils/landmark_utils/index",
        "href": "api/ansys/heart/core/utils/landmark_utils/index.html#landmark_utils.compute_element_cs",
        "title": "The landmark_utils.py module > Module detail > compute_element_cs",
        "section": "Module detail > compute_element_cs",
        "text": "landmark_utils.compute_element_cs(model: ansys.heart.core.models.HeartModel, short_axis: dict, aha_element: numpy.ndarray) -> tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]\n\nCompute elemental coordinate system for AHA elements.\n\nParameters\n\nmodel\n\nHeartModel\n\nheart model\n\nshort_axis\n\npython:dict\n\nshort axis\n\naha_element\n\nnp.ndarray\n\nelements with AHA labels, compute only on these elements\n\nReturns\n\npython:tuple[np.ndarray, np.ndarray, np.ndarray]\n\nlongitudinal, radial, circufenrential vecotors of each AHA element\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/index",
        "href": "api/ansys/heart/core/post/system_model_post/index.html#the-system_model_postpy-module",
        "title": "The system_model_post.py module",
        "section": "The system_model_post.py module",
        "text": "The system_model_post.py module\nsystem_model_post.py"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/index",
        "href": "api/ansys/heart/core/post/system_model_post/index.html#summary",
        "title": "The system_model_post.py module > Summary",
        "section": "Summary",
        "text": "Pressure\nSystem state for pressure.\nFlow\nSystem state for flow.\nVolume\nSystem state for volume.\nSystemState\nSystem state including pressure, flow, volume.\nZeroDSystem\n0D circulation system model (for one cavity).\nSystemModelPost\nClass for post-processing system model.\nSummary\nPressure\nFlow\nVolume\nSystemState\nZeroDSystem\nSystemModelPost"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/index",
        "href": "api/ansys/heart/core/post/system_model_post/index.html#description",
        "title": "The system_model_post.py module > Description",
        "section": "Description",
        "text": "Module for postprocessing system model data.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#fullheart",
        "title": "FullHeart",
        "section": "FullHeart",
        "text": "Bases: FourChamber\nModel of both ventricles, both atria, aorta and pulmonary artery.\nFullHeart\nFullHeart\nFourChamber"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#ansys.heart.core.models.FullHeart",
        "title": "FullHeart > FullHeart > FullHeart",
        "section": "FullHeart > FullHeart",
        "text": "class ansys.heart.core.models.FullHeart(working_directory: pathlib.Path | str = None)\n\nBases: FourChamber\n\nModel of both ventricles, both atria, aorta and pulmonary artery.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#overview",
        "title": "FullHeart > Overview",
        "section": "Overview",
        "text": "left_ventricle\nLeft ventricle part.\nright_ventricle\nRight ventricle part.\nseptum\nSeptum.\nleft_atrium\nLeft atrium part.\nright_atrium\nRight atrium part.\naorta\nAorta part.\npulmonary_artery\nPulmonary artery part.\nOverview\nleft_ventricle\nright_ventricle\nseptum\nleft_atrium\nright_atrium\naorta\npulmonary_artery"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#import-detail",
        "title": "FullHeart > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#attribute-detail",
        "title": "FullHeart > Attribute detail",
        "section": "Attribute detail",
        "text": "Left ventricle part.\nRight ventricle part.\nSeptum.\nLeft atrium part.\nRight atrium part.\nAorta part.\nPulmonary artery part.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#FullHeart.left_ventricle",
        "title": "FullHeart > Attribute detail > left_ventricle",
        "section": "Attribute detail > left_ventricle",
        "text": "FullHeart.left_ventricle: ansys.heart.core.objects.Part\n\nLeft ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#FullHeart.right_ventricle",
        "title": "FullHeart > Attribute detail > right_ventricle",
        "section": "Attribute detail > right_ventricle",
        "text": "FullHeart.right_ventricle: ansys.heart.core.objects.Part\n\nRight ventricle part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#FullHeart.septum",
        "title": "FullHeart > Attribute detail > septum",
        "section": "Attribute detail > septum",
        "text": "FullHeart.septum: ansys.heart.core.objects.Part\n\nSeptum.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#FullHeart.left_atrium",
        "title": "FullHeart > Attribute detail > left_atrium",
        "section": "Attribute detail > left_atrium",
        "text": "FullHeart.left_atrium: ansys.heart.core.objects.Part\n\nLeft atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#FullHeart.right_atrium",
        "title": "FullHeart > Attribute detail > right_atrium",
        "section": "Attribute detail > right_atrium",
        "text": "FullHeart.right_atrium: ansys.heart.core.objects.Part\n\nRight atrium part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#FullHeart.aorta",
        "title": "FullHeart > Attribute detail > aorta",
        "section": "Attribute detail > aorta",
        "text": "FullHeart.aorta: ansys.heart.core.objects.Part\n\nAorta part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/models/FullHeart",
        "href": "api/ansys/heart/core/models/FullHeart.html#FullHeart.pulmonary_artery",
        "title": "FullHeart > Attribute detail > pulmonary_artery",
        "section": "Attribute detail > pulmonary_artery",
        "text": "FullHeart.pulmonary_artery: ansys.heart.core.objects.Part\n\nPulmonary artery part.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#aniso",
        "title": "ANISO",
        "section": "ANISO",
        "text": "Anisotropic module of MAT_295.\nANISO\nANISO"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ansys.heart.core.settings.material.material.ANISO",
        "title": "ANISO > ANISO > ANISO",
        "section": "ANISO > ANISO",
        "text": "class ansys.heart.core.settings.material.material.ANISO\n\nAnisotropic module of MAT_295.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#overview",
        "title": "ANISO > Overview",
        "section": "Overview",
        "text": "atype\nType of anisotropic model.\nfibers\nList of fibers.\nk1fs\nk1 for HGO model for coupling between fibers.\nk2fs\nk2 for HGO model for coupling between fibers.\nvec_a\nComponent of fiber direction, don’t change it.\nvec_d\nComponent of sheet direction, don’t change it.\n__post_init__\nCheck and deduce other parameters from input.\n__repr__\nMake sure print contains field in __post_init__.\nOverview\natype\nfibers\nk1fs\nk2fs\nvec_a\nvec_d\n__post_init__\n__repr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#import-detail",
        "title": "ANISO > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#attribute-detail",
        "title": "ANISO > Attribute detail",
        "section": "Attribute detail",
        "text": "Type of anisotropic model.\nList of fibers.\nk1 for HGO model for coupling between fibers.\nk2 for HGO model for coupling between fibers.\nComponent of fiber direction, don’t change it.\nComponent of sheet direction, don’t change it.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.atype",
        "title": "ANISO > Attribute detail > atype",
        "section": "Attribute detail > atype",
        "text": "ANISO.atype: int = -1\n\nType of anisotropic model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.fibers",
        "title": "ANISO > Attribute detail > fibers",
        "section": "Attribute detail > fibers",
        "text": "ANISO.fibers: List[ANISO.HGOFiber] = None\n\nList of fibers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.k1fs",
        "title": "ANISO > Attribute detail > k1fs",
        "section": "Attribute detail > k1fs",
        "text": "ANISO.k1fs: float | None = None\n\nk1 for HGO model for coupling between fibers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.k2fs",
        "title": "ANISO > Attribute detail > k2fs",
        "section": "Attribute detail > k2fs",
        "text": "ANISO.k2fs: float | None = None\n\nk2 for HGO model for coupling between fibers.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.vec_a",
        "title": "ANISO > Attribute detail > vec_a",
        "section": "Attribute detail > vec_a",
        "text": "ANISO.vec_a: tuple = (1.0, 0.0, 0.0)\n\nComponent of fiber direction, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.vec_d",
        "title": "ANISO > Attribute detail > vec_d",
        "section": "Attribute detail > vec_d",
        "text": "ANISO.vec_d: tuple = (0.0, 1.0, 0.0)\n\nComponent of sheet direction, don’t change it.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#method-detail",
        "title": "ANISO > Method detail",
        "section": "Method detail",
        "text": "Check and deduce other parameters from input.\nMake sure print contains field in __post_init__.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.__post_init__",
        "title": "ANISO > Method detail > __post_init__",
        "section": "Method detail > __post_init__",
        "text": "ANISO.__post_init__()\n\nCheck and deduce other parameters from input.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#ANISO.__repr__",
        "title": "ANISO > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "ANISO.__repr__()\n\nMake sure print contains field in __post_init__.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ANISO",
        "href": "api/ansys/heart/core/settings/material/material/ANISO.html#classes",
        "title": "ANISO > Classes",
        "section": "Classes",
        "text": "HGOFiber\nDefine HGO type fiber from k1 and k2.\nClasses\nHGOFiber"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#contributing-as-a-developer",
        "title": "Contributing as a developer",
        "section": "Contributing as a developer",
        "text": "Learn how to fork the project and get your own copy.\nDownload your own copy in your local machine.\nInstall the project in editable mode.\nVerify your changes by testing the project.\nAdhere to code style\nUnderstand the different CI/CD pipelines.\nContributing as a developer"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#fork-the-repository",
        "title": "Contributing as a developer > Fork the repository",
        "section": "Fork the repository",
        "text": "Forking the repository is the first step to contributing to the project. This\nallows you to have your own copy of the project so you can make changes without\naffecting the main project. Once you have made your changes, you can submit a\npull-request to the main project to have your changes reviewed and merged.\n Fork this project\nIf you are an Ansys employee, you can skip this step.\nFork the repository"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#clone-the-repository",
        "title": "Contributing as a developer > Clone the repository",
        "section": "Clone the repository",
        "text": "Clone the latest version of PyAnsys Heart in development mode by running this code:\nIf you are not an Ansys employee, you need to fork the repository and\nreplace ansys with your GitHub user name in the git clone\ncommand.\nClone the repository\nansys\ngit clone"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#install-for-developers",
        "title": "Contributing as a developer > Install for developers",
        "section": "Install for developers",
        "text": "Installing PyAnsys Heart in development mode allows you to perform changes to the code\nand see the changes reflected in your environment without having to reinstall\nthe library every time you make a change.\nInstall for developers"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#virtual-environment",
        "title": "Contributing as a developer > Virtual environment",
        "section": "Virtual environment",
        "text": "Start by navigating to the project’s root directory by running:\nThen, create a new virtual environment named .venv to isolate your system’s\nPython environment by running:\nFinally, activate this environment by running:\nVirtual environment\n.venv"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#development-mode",
        "title": "Contributing as a developer > Development mode",
        "section": "Development mode",
        "text": "Now, install PyAnsys Heart in editable mode by running:\nVerify the installation by checking the version of the library:\nDevelopment mode"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#install-tox",
        "title": "Contributing as a developer > Install tox",
        "section": "Install tox",
        "text": "Once the project is installed, you can install tox. This is a cross-platform\nautomation tool. The main advantage of Tox is that it eases routine tasks like project\ntesting, documentation generation, and wheel building in separate and isolated Python\nvirtual environments. To install Tox, run:\nFinally, verify the installation by listing all the different environments\n(automation rules) for PyAnsys Heart:\nEnvironment\nDescription\ncode-style\nCheck for code style\ntests310-coverage\nEnvironment for project testing with Python 3.10 and coverage\ntests310\nEnvironment for project testing with Python 3.10\ntests311-coverage\nEnvironment for project testing with Python 3.11 and coverage\ntests311\nEnvironment for project testing with Python 3.11\ntests312-coverage\nEnvironment for project testing with Python 3.12 and coverage\ntests312\nEnvironment for project testing with Python 3.12\ntests313-coverage\nEnvironment for project testing with Python 3.13 and coverage\ntests313\nEnvironment for project testing with Python 3.13\ndoc-links\nEnvironment for verifying the integrity of external links within the documentation\ndoc-html\nEnvironment for generating HTML documentation\ndoc-pdf\nEnvironment for generating PDF documentation\ndist\nChecks project distribution\ndoc-clean\nEnvironment for cleaning documentation generated files\ntests\nEnvironment for project testing with Python3\nInstall tox"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#run-the-tests",
        "title": "Contributing as a developer > Run the tests",
        "section": "Run the tests",
        "text": "Once you have made your changes, you can run the tests to verify that your\nmodifications did not break the project. PyAnsys Heart tests support different markers\nto allow testing with/without coverage (and against specific python versions).\nThese markers are associated with dedicated Tox environments.\nEnvironment\nCommand\ntests310-coverage\npython -m tox -e tests310-coverage\ntests310\npython -m tox -e tests310\ntests311-coverage\npython -m tox -e tests311-coverage\ntests311\npython -m tox -e tests311\ntests312-coverage\npython -m tox -e tests312-coverage\ntests312\npython -m tox -e tests312\ntests313-coverage\npython -m tox -e tests313-coverage\ntests313\npython -m tox -e tests313\ntests\npython -m tox -e tests\nThe preceding test commands run all tests, including those that require Fluent (which take longer). For more\nselective testing, -- -vv -m \"not requires_fluent or (not extract_models)\" or -- -vv -m \"requires_fluent\" can be\nappended to tox testing commands.\nRun the tests\n-- -vv -m \"not requires_fluent or (not extract_models)\"\n-- -vv -m \"requires_fluent\""
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#check-code-style",
        "title": "Contributing as a developer > Check code style",
        "section": "Check code style",
        "text": "PyAnsys Heart follows the PEP8 standard as outlined in\nPEP 8 in\nthe PyAnsys Developer’s Guide and implements style checking using\npre-commit.\nTo ensure your code meets minimum code styling standards, run the following tox environment:\nEnvironment\nCommand\ncode-style\npython -m tox -e code-style\nThis way, it’s not possible for you to push code that fails the style checks:\nCheck code style"
    },
    {
        "objectID": "contribute/developer",
        "href": "contribute/developer.html#run-cicd-pipelines",
        "title": "Contributing as a developer > Run CI/CD pipelines",
        "section": "Run CI/CD pipelines",
        "text": "PyAnsys Heart has a set of CI/CD pipelines that are executed automatically when certain\nevents are detected in the repository. Some of these events include opening a\npull-request, labelling a pull-request, and tagging a commit.\nYou can label a pull-request to skip certain jobs in the pipeline. Supported\nlabels are listed in the PyAnsys Heart labels page.\nLabel\nDescription\ntest:skip\nSkip the model generation tests\nRun CI/CD pipelines\ntest:skip"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#four-chamber-ep-simulator-example",
        "title": "Four-chamber EP-simulator example",
        "section": "Four-chamber EP-simulator example",
        "text": "This example shows you how to consume a four-cavity heart model and\nset it up for the main electropysiology simulation. This examples demonstrates how\nyou can load a pre-computed heart model, compute the fiber direction, compute the\npurkinje network and conduction system and finally simulate the electrophysiology.\nFour-chamber EP-simulator example"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#example-setup",
        "title": "Four-chamber EP-simulator example > Example setup",
        "section": "Example setup",
        "text": "before computing the fiber orientation, purkinje network we need to load\nthe required modules, load a heart model and set up the simulator.\nExample setup"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#perform-the-required-imports",
        "title": "Four-chamber EP-simulator example > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory, model, and ls-dyna executable.\nPerform the required imports"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#instantiate-the-simulator-object",
        "title": "Four-chamber EP-simulator example > Instantiate the simulator object",
        "section": "Instantiate the simulator object",
        "text": "instantiate the simulator and settings appropriately.\nInstantiate the simulator object"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#load-simulation-settings",
        "title": "Four-chamber EP-simulator example > Load simulation settings",
        "section": "Load simulation settings",
        "text": "Here we load the default settings.\nLoad simulation settings"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#compute-universal-ventricular-coordinates",
        "title": "Four-chamber EP-simulator example > Compute Universal Ventricular Coordinates",
        "section": "Compute Universal Ventricular Coordinates",
        "text": "The transmural coordinate is used to define the endo, mid and epi layers.\nCompute Universal Ventricular Coordinates"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#compute-the-fiber-orientation",
        "title": "Four-chamber EP-simulator example > Compute the fiber orientation",
        "section": "Compute the fiber orientation",
        "text": "Compute fiber orientation and plot the computed fibers on the entire model.\nAtrial fiber orientation is approximated by apex-base direction, the development is undergoing.\nCompute the fiber orientation"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#compute-conduction-system",
        "title": "Four-chamber EP-simulator example > Compute conduction system",
        "section": "Compute conduction system",
        "text": "Compute conduction system and purkinje network and visualize.\nThe action potential will propagate faster through this system\ncompared to the rest of the model.\nCompute conduction system"
    },
    {
        "objectID": "examples/simulator/doc_EP_simulator_fourchamber",
        "href": "examples/simulator/doc_EP_simulator_fourchamber.html#start-main-simulation",
        "title": "Four-chamber EP-simulator example > Start main simulation",
        "section": "Start main simulation",
        "text": "Start the main EP simulation. This uses the previously computed fiber orientation\nand purkinje network to set up and run the LS-DYNA model using different solver\noptions\nWe can plot transmembrane potential in LS-PrePost\nDownload Jupyter notebook: doc_EP_simulator_fourchamber.ipynb\nDownload Python source code: doc_EP_simulator_fourchamber.py\nDownload zipped: doc_EP_simulator_fourchamber.zip\nGallery generated by Sphinx-Gallery\nStart main simulation\nDownload Jupyter notebook: doc_EP_simulator_fourchamber.ipynb\nDownload Python source code: doc_EP_simulator_fourchamber.py\nDownload zipped: doc_EP_simulator_fourchamber.zip"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#cavity",
        "title": "Cavity",
        "section": "Cavity",
        "text": "Bases: Feature\nCavity class.\nCavity\nCavity\nFeature"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#ansys.heart.core.objects.Cavity",
        "title": "Cavity > Cavity > Cavity",
        "section": "Cavity > Cavity",
        "text": "class ansys.heart.core.objects.Cavity(surface: SurfaceMesh = None, centroid: numpy.ndarray = None, name=None)\n\nBases: Feature\n\nCavity class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#overview",
        "title": "Cavity > Overview",
        "section": "Overview",
        "text": "compute_centroid\nCompute the centroid of the cavity.\nvolume\nVolume of the cavity.\nsurface\nSurface mesh making up the cavity.\ncentroid\nCentroid of the cavity.\nOverview\ncompute_centroid\nvolume\nsurface\ncentroid"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#import-detail",
        "title": "Cavity > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#property-detail",
        "title": "Cavity > Property detail",
        "section": "Property detail",
        "text": "Volume of the cavity.\nProperty detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#Cavity.volume",
        "title": "Cavity > Property detail > volume",
        "section": "Property detail > volume",
        "text": "property Cavity.volume\n\nVolume of the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#attribute-detail",
        "title": "Cavity > Attribute detail",
        "section": "Attribute detail",
        "text": "Surface mesh making up the cavity.\nCentroid of the cavity.\nAttribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#Cavity.surface",
        "title": "Cavity > Attribute detail > surface",
        "section": "Attribute detail > surface",
        "text": "Cavity.surface: SurfaceMesh\n\nSurface mesh making up the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#Cavity.centroid",
        "title": "Cavity > Attribute detail > centroid",
        "section": "Attribute detail > centroid",
        "text": "Cavity.centroid: numpy.ndarray = None\n\nCentroid of the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#method-detail",
        "title": "Cavity > Method detail",
        "section": "Method detail",
        "text": "Compute the centroid of the cavity.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/objects/Cavity",
        "href": "api/ansys/heart/core/objects/Cavity.html#Cavity.compute_centroid",
        "title": "Cavity > Method detail > compute_centroid",
        "section": "Method detail > compute_centroid",
        "text": "Cavity.compute_centroid()\n\nCompute the centroid of the cavity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial.html#dummymaterial",
        "title": "DummyMaterial",
        "section": "DummyMaterial",
        "text": "Just for initialization.\nDummyMaterial\nDummyMaterial"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial.html#ansys.heart.core.settings.material.ep_material.EPMaterial.DummyMaterial",
        "title": "DummyMaterial > DummyMaterial > DummyMaterial",
        "section": "DummyMaterial > DummyMaterial",
        "text": "class ansys.heart.core.settings.material.ep_material.EPMaterial.DummyMaterial\n\nJust for initialization.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial.html#overview",
        "title": "DummyMaterial > Overview",
        "section": "Overview",
        "text": "__repr__\nPrint a message.\nOverview\n__repr__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial.html#import-detail",
        "title": "DummyMaterial > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial.html#method-detail",
        "title": "DummyMaterial > Method detail",
        "section": "Method detail",
        "text": "Print a message.\nMethod detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial",
        "href": "api/ansys/heart/core/settings/material/ep_material/EPMaterial.DummyMaterial.html#DummyMaterial.__repr__",
        "title": "DummyMaterial > Method detail > __repr__",
        "section": "Method detail > __repr__",
        "text": "DummyMaterial.__repr__()\n\nPrint a message.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#pressure",
        "title": "Pressure",
        "section": "Pressure",
        "text": "System state for pressure.\nPressure\nPressure"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#ansys.heart.core.post.system_model_post.Pressure",
        "title": "Pressure > Pressure > Pressure",
        "section": "Pressure > Pressure",
        "text": "class ansys.heart.core.post.system_model_post.Pressure\n\nSystem state for pressure.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#overview",
        "title": "Pressure > Overview",
        "section": "Overview",
        "text": "cavity\nartery\nvenous\nOverview\ncavity\nartery\nvenous"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#import-detail",
        "title": "Pressure > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#attribute-detail",
        "title": "Pressure > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#Pressure.cavity",
        "title": "Pressure > Attribute detail > cavity",
        "section": "Attribute detail > cavity",
        "text": "Pressure.cavity: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#Pressure.artery",
        "title": "Pressure > Attribute detail > artery",
        "section": "Attribute detail > artery",
        "text": "Pressure.artery: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/Pressure",
        "href": "api/ansys/heart/core/post/system_model_post/Pressure.html#Pressure.venous",
        "title": "Pressure > Attribute detail > venous",
        "section": "Attribute detail > venous",
        "text": "Pressure.venous: numpy.ndarray\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#atrialfiber",
        "title": "AtrialFiber",
        "section": "AtrialFiber",
        "text": "Bases: Settings\nClass for keeping track of atrial fiber settings.\nDefault parameters are from doi.org/10.1016/j.cma.2020.113468 for idealized geometry.\nAtrialFiber\nAtrialFiber\nSettings"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#ansys.heart.core.settings.settings.AtrialFiber",
        "title": "AtrialFiber > AtrialFiber > AtrialFiber",
        "section": "AtrialFiber > AtrialFiber",
        "text": "class ansys.heart.core.settings.settings.AtrialFiber\n\nBases: Settings\n\nClass for keeping track of atrial fiber settings.\n\nDefault parameters are from doi.org/10.1016/j.cma.2020.113468 for idealized geometry.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#overview",
        "title": "AtrialFiber > Overview",
        "section": "Overview",
        "text": "tau_mv\ntau_lpv\ntau_rpv\ntau_tv\ntau_raw\ntau_ct_minus\ntau_ct_plus\ntau_icv\ntau_scv\ntau_ib\ntau_ras\nOverview\ntau_mv\ntau_lpv\ntau_rpv\ntau_tv\ntau_raw\ntau_ct_minus\ntau_ct_plus\ntau_icv\ntau_scv\ntau_ib\ntau_ras"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#import-detail",
        "title": "AtrialFiber > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#attribute-detail",
        "title": "AtrialFiber > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_mv",
        "title": "AtrialFiber > Attribute detail > tau_mv",
        "section": "Attribute detail > tau_mv",
        "text": "AtrialFiber.tau_mv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_lpv",
        "title": "AtrialFiber > Attribute detail > tau_lpv",
        "section": "Attribute detail > tau_lpv",
        "text": "AtrialFiber.tau_lpv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_rpv",
        "title": "AtrialFiber > Attribute detail > tau_rpv",
        "section": "Attribute detail > tau_rpv",
        "text": "AtrialFiber.tau_rpv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_tv",
        "title": "AtrialFiber > Attribute detail > tau_tv",
        "section": "Attribute detail > tau_tv",
        "text": "AtrialFiber.tau_tv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_raw",
        "title": "AtrialFiber > Attribute detail > tau_raw",
        "section": "Attribute detail > tau_raw",
        "text": "AtrialFiber.tau_raw: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_ct_minus",
        "title": "AtrialFiber > Attribute detail > tau_ct_minus",
        "section": "Attribute detail > tau_ct_minus",
        "text": "AtrialFiber.tau_ct_minus: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_ct_plus",
        "title": "AtrialFiber > Attribute detail > tau_ct_plus",
        "section": "Attribute detail > tau_ct_plus",
        "text": "AtrialFiber.tau_ct_plus: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_icv",
        "title": "AtrialFiber > Attribute detail > tau_icv",
        "section": "Attribute detail > tau_icv",
        "text": "AtrialFiber.tau_icv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_scv",
        "title": "AtrialFiber > Attribute detail > tau_scv",
        "section": "Attribute detail > tau_scv",
        "text": "AtrialFiber.tau_scv: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_ib",
        "title": "AtrialFiber > Attribute detail > tau_ib",
        "section": "Attribute detail > tau_ib",
        "text": "AtrialFiber.tau_ib: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AtrialFiber",
        "href": "api/ansys/heart/core/settings/settings/AtrialFiber.html#AtrialFiber.tau_ras",
        "title": "AtrialFiber > Attribute detail > tau_ras",
        "section": "Attribute detail > tau_ras",
        "text": "AtrialFiber.tau_ras: float = 0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AttrDict",
        "href": "api/ansys/heart/core/settings/settings/AttrDict.html#attrdict",
        "title": "AttrDict",
        "section": "AttrDict",
        "text": "Bases: dict\nDict subclass whose entries can be accessed by attributes as well as normally.\nAttrDict\nAttrDict\ndict"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AttrDict",
        "href": "api/ansys/heart/core/settings/settings/AttrDict.html#ansys.heart.core.settings.settings.AttrDict",
        "title": "AttrDict > AttrDict > AttrDict",
        "section": "AttrDict > AttrDict",
        "text": "class ansys.heart.core.settings.settings.AttrDict(*args, **kwargs)\n\nBases: dict\n\nDict subclass whose entries can be accessed by attributes as well as normally.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AttrDict",
        "href": "api/ansys/heart/core/settings/settings/AttrDict.html#overview",
        "title": "AttrDict > Overview",
        "section": "Overview",
        "text": "__dict__\nOverview\n__dict__"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AttrDict",
        "href": "api/ansys/heart/core/settings/settings/AttrDict.html#import-detail",
        "title": "AttrDict > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AttrDict",
        "href": "api/ansys/heart/core/settings/settings/AttrDict.html#attribute-detail",
        "title": "AttrDict > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/settings/AttrDict",
        "href": "api/ansys/heart/core/settings/settings/AttrDict.html#AttrDict.__dict__",
        "title": "AttrDict > Attribute detail > __dict__",
        "section": "Attribute detail > __dict__",
        "text": "AttrDict.__dict__\n\n"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_truncated_LV",
        "href": "examples/preprocessor/doc_preprocess_truncated_LV.html#create-a-truncated-ellipsoid-model",
        "title": "Create a truncated ellipsoid model",
        "section": "Create a truncated ellipsoid model",
        "text": "This example shows you how to build a basic ellipsoidal model\nfrom primitive shapes. Shape based on\nLand et al (2015).\nCreate a truncated ellipsoid model"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_truncated_LV",
        "href": "examples/preprocessor/doc_preprocess_truncated_LV.html#example-setup",
        "title": "Create a truncated ellipsoid model > Example setup",
        "section": "Example setup",
        "text": "Example setup"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_truncated_LV",
        "href": "examples/preprocessor/doc_preprocess_truncated_LV.html#perform-the-required-imports",
        "title": "Create a truncated ellipsoid model > Perform the required imports",
        "section": "Perform the required imports",
        "text": "Import the required modules and set relevant paths, including that of the working\ndirectory and generated model\nPerform the required imports"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_truncated_LV",
        "href": "examples/preprocessor/doc_preprocess_truncated_LV.html#create-a-truncated-ellipsoid-using-pyvista",
        "title": "Create a truncated ellipsoid model > Create a truncated ellipsoid using pyvista",
        "section": "Create a truncated ellipsoid using pyvista",
        "text": "Create a truncated ellipsoid using pyvista"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_truncated_LV",
        "href": "examples/preprocessor/doc_preprocess_truncated_LV.html#convert-the-input-to-a-heartmodel",
        "title": "Create a truncated ellipsoid model > Convert the input to a HeartModel",
        "section": "Convert the input to a HeartModel",
        "text": "Convert the input to a HeartModel"
    },
    {
        "objectID": "examples/preprocessor/doc_preprocess_truncated_LV",
        "href": "examples/preprocessor/doc_preprocess_truncated_LV.html#remesh-the-surfaces-and-volume",
        "title": "Create a truncated ellipsoid model > Remesh the surfaces and volume",
        "section": "Remesh the surfaces and volume",
        "text": "The individual surfaces in the combined PolyData object are\nunconnected. Using the wrapper automatically fixes any small gaps\nand ensures proper connectivity.\nDownload Jupyter notebook: doc_preprocess_truncated_LV.ipynb\nDownload Python source code: doc_preprocess_truncated_LV.py\nDownload zipped: doc_preprocess_truncated_LV.zip\nGallery generated by Sphinx-Gallery\nRemesh the surfaces and volume\nDownload Jupyter notebook: doc_preprocess_truncated_LV.ipynb\nDownload Python source code: doc_preprocess_truncated_LV.py\nDownload zipped: doc_preprocess_truncated_LV.zip"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#model1",
        "title": "Model1",
        "section": "Model1",
        "text": "Hold data for active model 1, check manual for details.\nModel1\nModel1"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#ansys.heart.core.settings.material.material.ActiveModel.Model1",
        "title": "Model1 > Model1 > Model1",
        "section": "Model1 > Model1",
        "text": "class ansys.heart.core.settings.material.material.ActiveModel.Model1\n\nHold data for active model 1, check manual for details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#overview",
        "title": "Model1 > Overview",
        "section": "Overview",
        "text": "t0\nca2ion\nca2ionm\nn\ntaumax\nstf\nb\nl0\nl\ndtmax\nmr\ntr\nOverview\nt0\nca2ion\nca2ionm\nn\ntaumax\nstf\nb\nl0\nl\ndtmax\nmr\ntr"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#import-detail",
        "title": "Model1 > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#attribute-detail",
        "title": "Model1 > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.t0",
        "title": "Model1 > Attribute detail > t0",
        "section": "Attribute detail > t0",
        "text": "Model1.t0: float = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.ca2ion",
        "title": "Model1 > Attribute detail > ca2ion",
        "section": "Attribute detail > ca2ion",
        "text": "Model1.ca2ion: float = None\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.ca2ionm",
        "title": "Model1 > Attribute detail > ca2ionm",
        "section": "Attribute detail > ca2ionm",
        "text": "Model1.ca2ionm: float = 4.35\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.n",
        "title": "Model1 > Attribute detail > n",
        "section": "Attribute detail > n",
        "text": "Model1.n: int = 2\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.taumax",
        "title": "Model1 > Attribute detail > taumax",
        "section": "Attribute detail > taumax",
        "text": "Model1.taumax: float = 0.125\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.stf",
        "title": "Model1 > Attribute detail > stf",
        "section": "Attribute detail > stf",
        "text": "Model1.stf: float = 0.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.b",
        "title": "Model1 > Attribute detail > b",
        "section": "Attribute detail > b",
        "text": "Model1.b: float = 4.75\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.l0",
        "title": "Model1 > Attribute detail > l0",
        "section": "Attribute detail > l0",
        "text": "Model1.l0: float = 1.58\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.l",
        "title": "Model1 > Attribute detail > l",
        "section": "Attribute detail > l",
        "text": "Model1.l: float = 1.85\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.dtmax",
        "title": "Model1 > Attribute detail > dtmax",
        "section": "Attribute detail > dtmax",
        "text": "Model1.dtmax: float = 150\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.mr",
        "title": "Model1 > Attribute detail > mr",
        "section": "Attribute detail > mr",
        "text": "Model1.mr: float = 1048.9\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1",
        "href": "api/ansys/heart/core/settings/material/material/ActiveModel.Model1.html#Model1.tr",
        "title": "Model1 > Attribute detail > tr",
        "section": "Attribute detail > tr",
        "text": "Model1.tr: float = -1629.0\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#the-mechanicspy-module",
        "title": "The mechanics.py module",
        "section": "The mechanics.py module",
        "text": "The mechanics.py module\nmechanics.py"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#summary",
        "title": "The mechanics.py module > Summary",
        "section": "Summary",
        "text": "heart\nGeneric analysis settings.\nanalysis\nMaterial settings.\nmaterial\nBoundary condition settings.\nboundary_conditions\nSystem model parameters.\nco\ntau\npee\nrp\nca\nra\nrv\nsystem_model\nsystem_model3\nSummary\nheart\nanalysis\nmaterial\nboundary_conditions\nco\ntau\npee\nrp\nca\nra\nrv\nsystem_model\nsystem_model3"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#description",
        "title": "The mechanics.py module > Description",
        "section": "Description",
        "text": "Module contains default values for mechanics simulations.\nDescription"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#module-detail",
        "title": "The mechanics.py module > Module detail",
        "section": "Module detail",
        "text": "Generic analysis settings.\nMaterial settings.\nBoundary condition settings.\nSystem model parameters.\nModule detail"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.heart",
        "title": "The mechanics.py module > Module detail > heart",
        "section": "Module detail > heart",
        "text": "mechanics.heart\n\nGeneric analysis settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.analysis",
        "title": "The mechanics.py module > Module detail > analysis",
        "section": "Module detail > analysis",
        "text": "mechanics.analysis\n\nMaterial settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.material",
        "title": "The mechanics.py module > Module detail > material",
        "section": "Module detail > material",
        "text": "mechanics.material\n\nBoundary condition settings.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.boundary_conditions",
        "title": "The mechanics.py module > Module detail > boundary_conditions",
        "section": "Module detail > boundary_conditions",
        "text": "mechanics.boundary_conditions\n\nSystem model parameters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.co",
        "title": "The mechanics.py module > Module detail > co",
        "section": "Module detail > co",
        "text": "mechanics.co\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.tau",
        "title": "The mechanics.py module > Module detail > tau",
        "section": "Module detail > tau",
        "text": "mechanics.tau\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.pee",
        "title": "The mechanics.py module > Module detail > pee",
        "section": "Module detail > pee",
        "text": "mechanics.pee\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.rp",
        "title": "The mechanics.py module > Module detail > rp",
        "section": "Module detail > rp",
        "text": "mechanics.rp\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.ca",
        "title": "The mechanics.py module > Module detail > ca",
        "section": "Module detail > ca",
        "text": "mechanics.ca\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.ra",
        "title": "The mechanics.py module > Module detail > ra",
        "section": "Module detail > ra",
        "text": "mechanics.ra\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.rv",
        "title": "The mechanics.py module > Module detail > rv",
        "section": "Module detail > rv",
        "text": "mechanics.rv\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.system_model",
        "title": "The mechanics.py module > Module detail > system_model",
        "section": "Module detail > system_model",
        "text": "mechanics.system_model\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/settings/defaults/mechanics/index",
        "href": "api/ansys/heart/core/settings/defaults/mechanics/index.html#mechanics.system_model3",
        "title": "The mechanics.py module > Module detail > system_model3",
        "section": "Module detail > system_model3",
        "text": "mechanics.system_model3\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#systemstate",
        "title": "SystemState",
        "section": "SystemState",
        "text": "System state including pressure, flow, volume.\nfuture development\nSystemState\nSystemState"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#ansys.heart.core.post.system_model_post.SystemState",
        "title": "SystemState > SystemState > SystemState",
        "section": "SystemState > SystemState",
        "text": "class ansys.heart.core.post.system_model_post.SystemState\n\nSystem state including pressure, flow, volume.\n\nNotes\n\nfuture development\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#overview",
        "title": "SystemState > Overview",
        "section": "Overview",
        "text": "pressure\nflow\nvolume\nOverview\npressure\nflow\nvolume"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#import-detail",
        "title": "SystemState > Import detail",
        "section": "Import detail",
        "text": "Import detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#attribute-detail",
        "title": "SystemState > Attribute detail",
        "section": "Attribute detail",
        "text": "Attribute detail"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#SystemState.pressure",
        "title": "SystemState > Attribute detail > pressure",
        "section": "Attribute detail > pressure",
        "text": "SystemState.pressure: Pressure\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#SystemState.flow",
        "title": "SystemState > Attribute detail > flow",
        "section": "Attribute detail > flow",
        "text": "SystemState.flow: Flow\n\n"
    },
    {
        "objectID": "api/ansys/heart/core/post/system_model_post/SystemState",
        "href": "api/ansys/heart/core/post/system_model_post/SystemState.html#SystemState.volume",
        "title": "SystemState > Attribute detail > volume",
        "section": "Attribute detail > volume",
        "text": "SystemState.volume: Volume\n\n"
    }
]