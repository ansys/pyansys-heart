
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/simulator/doc_EP_simulator_FullHeart_rodero.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_simulator_doc_EP_simulator_FullHeart_rodero.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_simulator_doc_EP_simulator_FullHeart_rodero.py:


Full-heart EP-simulator example
-------------------------------
This example shows you how to consume a full-heart model and
set it up for the main electropysiology simulation. This examples demonstrates how
you can load a pre-computed heart model, compute the fiber direction, compute the
purkinje network and conduction system and finally simulate the electrophysiology.

.. GENERATED FROM PYTHON SOURCE LINES 34-43

Example setup
-------------
before computing the fiber orientation, purkinje network we need to load
the required modules, load a heart model and set up the simulator.

Perform the required imports
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the required modules and set relevant paths, including that of the working
directory, model, and ls-dyna executable.

.. GENERATED FROM PYTHON SOURCE LINES 43-73

.. code-block:: default


    import os

    import ansys.heart.core.models as models
    from ansys.heart.core.objects import Point
    from ansys.heart.simulator.simulator import DynaSettings, EPSimulator

    # accept dpf license aggrement
    # https://dpf.docs.pyansys.com/version/stable/getting_started/licensing.html#ref-licensing
    os.environ["ANSYS_DPF_ACCEPT_LA"] = "Y"

    # set working directory and path to model.
    workdir = os.path.join("pyansys-heart", "downloads", "Rodero2021", "01", "FullHeart")


    path_to_model = os.path.join(workdir, "heart_model.vtu")

    # load four chamber heart model.
    model: models.FullHeart = models.FullHeart(models.ModelInfo(work_directory=workdir))
    model.load_model_from_mesh(path_to_model, path_to_model.replace(".vtu", ".partinfo.json"))
    model._extract_apex()
    model.compute_left_ventricle_anatomy_axis()
    model.compute_left_ventricle_aha17()

    # save model.
    model.mesh.save(os.path.join(model.info.workdir, "simulation_model.vtu"))

    # set base working directory
    model.info.workdir = str(workdir)


.. GENERATED FROM PYTHON SOURCE LINES 84-87

Instantiate the simulator object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
instantiate the simulator and settings appropriately.

.. GENERATED FROM PYTHON SOURCE LINES 87-104

.. code-block:: default


    # specify LS-DYNA path (last tested working versions is intelmpi-linux-DEV-106117)
    lsdyna_path = r"ls-dyna_msmpi.exe"

    # instantaiate dyna settings of choice
    dyna_settings = DynaSettings(
        lsdyna_path=lsdyna_path, dynatype="intelmpi", num_cpus=6, platform="wsl"
    )


    # instantiate simulator. Change options where necessary.
    simulator = EPSimulator(
        model=model,
        dyna_settings=dyna_settings,
        simulation_directory=os.path.join(workdir, "simulation-EP"),
    )


.. GENERATED FROM PYTHON SOURCE LINES 115-118

Load simulation settings
~~~~~~~~~~~~~~~~~~~~~~~~
Here we load the default settings.

.. GENERATED FROM PYTHON SOURCE LINES 118-136

.. code-block:: default


    # Define electrode positions and add them to model
    electrodes = [
        Point(name="V1", xyz=[76.53798632905277, 167.67667039945263, 384.3139099410445]),
        Point(name="V2", xyz=[64.97540262482013, 134.94983038904573, 330.4783062379255]),
        Point(name="V3", xyz=[81.20629301587647, 107.06245851801455, 320.58645260857344]),
        Point(name="V4", xyz=[85.04956217691463, 59.54502732121309, 299.2838953724169]),
        Point(name="V5", xyz=[42.31377680589025, 27.997010728192166, 275.7620409440143]),
        Point(name="V6", xyz=[-10.105919604515957, -7.176987485426985, 270.46379012676135]),
        Point(name="RA", xyz=[-29.55095501940962, 317.12543912177983, 468.91891094294414]),
        Point(name="LA", xyz=[-100.27895839242505, 135.64520460914244, 222.56688206809142]),
        Point(name="RL", xyz=[203.38825799615842, 56.19020893502452, 538.5052677637375]),
        Point(name="LL", xyz=[157.56391664248335, -81.66615972595032, 354.17867264210076]),
    ]
    model.electrodes = electrodes

    simulator.settings.load_defaults()


.. GENERATED FROM PYTHON SOURCE LINES 137-140

Compute the fiber orientation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compute fiber orientation and plot the computed fibers on the entire model.

.. GENERATED FROM PYTHON SOURCE LINES 142-144

.. warning::
   Atrial fiber orientation is approximated by apex-base direction in this model

.. GENERATED FROM PYTHON SOURCE LINES 144-157

.. code-block:: default


    # compute ventricular fibers
    simulator.compute_fibers()

    # compute atrial fibers
    simulator.model.right_atrium.active = True
    simulator.model.left_atrium.active = True
    simulator.model.right_atrium.fiber = True
    simulator.model.left_atrium.fiber = True
    simulator.compute_left_atrial_fiber()
    simulator.compute_right_atrial_fiber(appendage=[39, 29, 98])
    simulator.model.plot_fibers(n_seed_points=2000)


.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. image:: /_static/images/fibers.png
  :width: 400pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 163-168

Compute conduction system
~~~~~~~~~~~~~~~~~~~~~~~~~
Compute conduction system and purkinje network and visualize.
The action potential will propagate faster through this system
compared to the rest of the model.

.. GENERATED FROM PYTHON SOURCE LINES 168-177

.. code-block:: default


    simulator.compute_purkinje()

    # by calling this method, stimulation will be at the atrioventricular node
    # if you skip it, the two apex regions of the ventricles will be stimulated
    simulator.compute_conduction_system()

    simulator.model.plot_purkinje()


.. GENERATED FROM PYTHON SOURCE LINES 178-181

.. image:: /_static/images/purkinje.png
  :width: 400pt
  :align: center

.. GENERATED FROM PYTHON SOURCE LINES 183-187

Start main simulation
~~~~~~~~~~~~~~~~~~~~~
Start the main EP simulation. This uses the previously computed fiber orientation
and purkinje network to set up and run the LS-DYNA model.

.. GENERATED FROM PYTHON SOURCE LINES 187-198

.. code-block:: default


    # simulate using the default EP solver type (Monodomain)
    simulator.simulate()

    # switch to Eikonal
    simulator.settings.electrophysiology.analysis.solvertype = "Eikonal"
    simulator.simulate(folder_name="main-ep-Eikonal")

    # switch to ReactionEikonal
    simulator.settings.electrophysiology.analysis.solvertype = "ReactionEikonal"
    simulator.simulate(folder_name="main-ep-ReactionEikonal")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.000 seconds)


.. _sphx_glr_download_examples_simulator_doc_EP_simulator_FullHeart_rodero.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: doc_EP_simulator_FullHeart_rodero.py <doc_EP_simulator_FullHeart_rodero.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: doc_EP_simulator_FullHeart_rodero.ipynb <doc_EP_simulator_FullHeart_rodero.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
