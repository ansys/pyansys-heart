



HeartModel
==========

.. py:class:: HeartModel(info: ModelInfo)
   :canonical: ansys.heart.preprocessor.models.HeartModel





   Parent class for heart models.
















   ..
       !! processed by numpydoc !!



































Overview
--------
.. py:currentmodule:: HeartModel
.. tab-set::



    .. tab-item:: Methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~create_part_by_ids`
            - Create a new part by element ids.
          * - :py:attr:`~add_purkinje_from_kfile`
            - Read an LS-DYNA file containing purkinje beams and nodes.
          * - :py:attr:`~add_beam_net`
            - Add a BeamMesh object on the model.
          * - :py:attr:`~load_input`
            - Use the content in model info to load the input model.
          * - :py:attr:`~mesh_volume`
            - Remesh the input model and fill the volume.
          * - :py:attr:`~get_part`
            - Get specific part based on part name.
          * - :py:attr:`~add_part`
            - Dynamically add a part as an attribute to the object.
          * - :py:attr:`~remove_part`
            - Remove a part with a specific name from the model.
          * - :py:attr:`~summary`
            - Get summary information of the model as a ditionary.
          * - :py:attr:`~print_info`
            - Print information about the model.
          * - :py:attr:`~dump_model`
            - Save model to .pickle file.
          * - :py:attr:`~plot_mesh`
            - Plot the volume mesh of the heart model.
          * - :py:attr:`~plot_part`
            - Plot a part in mesh.
          * - :py:attr:`~plot_fibers`
            - Plot the mesh and fibers as streamlines.
          * - :py:attr:`~plot_surfaces`
            - Plot all the surfaces in the model.
          * - :py:attr:`~plot_purkinje`
            - Plot the mesh and Purkinje network.
          * - :py:attr:`~compute_left_ventricle_anatomy_axis`
            - Compute the long and short axes of the left ventricle.
          * - :py:attr:`~compute_left_ventricle_aha17`
            - Compute AHA17 label for left ventricle elements.
          * - :py:attr:`~compute_left_ventricle_element_cs`
            - Compute elemental coordinate system for aha17 elements.
          * - :py:attr:`~get_apex_node_set`
            - Get a node set around apex point.
          * - :py:attr:`~create_atrial_stiff_ring`
            - Create a part for solids close to atrial caps.


    .. tab-item:: Properties

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~parts`
            - Return list of parts.
          * - :py:attr:`~part_names`
            - Return list of part names.
          * - :py:attr:`~part_ids`
            - Return list of used part ids.
          * - :py:attr:`~surfaces`
            - Return list of all defined surfaces.
          * - :py:attr:`~surface_names`
            - Return list of all defined surface names.
          * - :py:attr:`~surface_ids`
            - Return list of all defined surface names.
          * - :py:attr:`~cavities`
            - Return list of cavities in the model.
          * - :py:attr:`~part_name_to_part_id`
            - Dictionary that maps the part name to the part id.
          * - :py:attr:`~part_id_to_part_name`
            - Dictionary that maps part id to part name.
          * - :py:attr:`~surface_name_to_surface_id`
            - Dictionary that maps surface name to surface id.
          * - :py:attr:`~surface_id_to_surface_name`
            - Dictionary that maps surface name to surface id.
          * - :py:attr:`~cap_centroids`
            - Return list of cap centroids.


    .. tab-item:: Attributes

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~info`
            - Model meta information.
          * - :py:attr:`~mesh`
            - Computational mesh.
          * - :py:attr:`~fluid_mesh`
            - Generated fluid mesh.
          * - :py:attr:`~aha_ids`
            - American Heart Association ID's.
          * - :py:attr:`~electrodes`
            - Electrodes positions for ECG computing.
          * - :py:attr:`~beam_network`
            - List of beam networks in the mesh.
          * - :py:attr:`~electrodes`
            - Electrodes positions for ECG computing.
      

    .. tab-item:: Static methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~load_model`
            - Load a preprocessed model from file.


    .. tab-item:: Special methods

        .. list-table::
          :header-rows: 0
          :widths: auto

          * - :py:attr:`~__repr__`
            - Represent self as string.



Import detail
-------------

.. code-block:: python

    from ansys.heart.preprocessor.models import HeartModel


Property detail
---------------
.. py:property:: parts
   :canonical: ansys.heart.preprocessor.models.HeartModel.parts
   :type: List[ansys.heart.preprocessor.mesh.objects.Part]


   
   Return list of parts.
















   ..
       !! processed by numpydoc !!

.. py:property:: part_names
   :canonical: ansys.heart.preprocessor.models.HeartModel.part_names
   :type: List[str]


   
   Return list of part names.
















   ..
       !! processed by numpydoc !!

.. py:property:: part_ids
   :canonical: ansys.heart.preprocessor.models.HeartModel.part_ids
   :type: List[int]


   
   Return list of used part ids.
















   ..
       !! processed by numpydoc !!

.. py:property:: surfaces
   :canonical: ansys.heart.preprocessor.models.HeartModel.surfaces
   :type: List[ansys.heart.preprocessor.mesh.objects.SurfaceMesh]


   
   Return list of all defined surfaces.
















   ..
       !! processed by numpydoc !!

.. py:property:: surface_names
   :canonical: ansys.heart.preprocessor.models.HeartModel.surface_names
   :type: List[str]


   
   Return list of all defined surface names.
















   ..
       !! processed by numpydoc !!

.. py:property:: surface_ids
   :canonical: ansys.heart.preprocessor.models.HeartModel.surface_ids
   :type: List[str]


   
   Return list of all defined surface names.
















   ..
       !! processed by numpydoc !!

.. py:property:: cavities
   :canonical: ansys.heart.preprocessor.models.HeartModel.cavities
   :type: List[ansys.heart.preprocessor.mesh.objects.Cavity]


   
   Return list of cavities in the model.
















   ..
       !! processed by numpydoc !!

.. py:property:: part_name_to_part_id
   :canonical: ansys.heart.preprocessor.models.HeartModel.part_name_to_part_id
   :type: dict


   
   Dictionary that maps the part name to the part id.
















   ..
       !! processed by numpydoc !!

.. py:property:: part_id_to_part_name
   :canonical: ansys.heart.preprocessor.models.HeartModel.part_id_to_part_name
   :type: dict


   
   Dictionary that maps part id to part name.
















   ..
       !! processed by numpydoc !!

.. py:property:: surface_name_to_surface_id
   :canonical: ansys.heart.preprocessor.models.HeartModel.surface_name_to_surface_id
   :type: dict


   
   Dictionary that maps surface name to surface id.
















   ..
       !! processed by numpydoc !!

.. py:property:: surface_id_to_surface_name
   :canonical: ansys.heart.preprocessor.models.HeartModel.surface_id_to_surface_name
   :type: dict


   
   Dictionary that maps surface name to surface id.
















   ..
       !! processed by numpydoc !!

.. py:property:: cap_centroids
   :canonical: ansys.heart.preprocessor.models.HeartModel.cap_centroids
   :type: None


   
   Return list of cap centroids.
















   ..
       !! processed by numpydoc !!



Attribute detail
----------------
.. py:attribute:: info

   
   Model meta information.
















   ..
       !! processed by numpydoc !!

.. py:attribute:: mesh

   
   Computational mesh.
















   ..
       !! processed by numpydoc !!

.. py:attribute:: fluid_mesh

   
   Generated fluid mesh.
















   ..
       !! processed by numpydoc !!

.. py:attribute:: aha_ids

   
   American Heart Association ID's.
















   ..
       !! processed by numpydoc !!

.. py:attribute:: electrodes
   :type: List[ansys.heart.preprocessor.mesh.objects.Point]
   :value: []

   
   Electrodes positions for ECG computing.
















   ..
       !! processed by numpydoc !!

.. py:attribute:: beam_network
   :type: List[ansys.heart.preprocessor.mesh.objects.BeamMesh]
   :value: []

   
   List of beam networks in the mesh.
















   ..
       !! processed by numpydoc !!

.. py:attribute:: electrodes
   :type: List[ansys.heart.preprocessor.mesh.objects.Point]
   :value: []

   
   Electrodes positions for ECG computing.
















   ..
       !! processed by numpydoc !!


Method detail
-------------
.. py:method:: __repr__()

   
   Represent self as string.
















   ..
       !! processed by numpydoc !!

.. py:method:: create_part_by_ids(eids: List[int], name: str) -> Union[None, ansys.heart.preprocessor.mesh.objects.Part]

   
   Create a new part by element ids.


   :Parameters:

       **eids** : :obj:`List`\[:class:`python:int`]
           element id list

       **name** : :class:`python:str`
           part name

   :Returns:

       :obj:`Union`\[:data:`python:None`, :obj:`Part`]
           return the part if succeed













   ..
       !! processed by numpydoc !!

.. py:method:: add_purkinje_from_kfile(filename: pathlib.Path, name: str) -> None

   
   Read an LS-DYNA file containing purkinje beams and nodes.


   :Parameters:

       **filename** : :obj:`pathlib.Path`
           ..

       **name** : :class:`python:str`
           beamnet name














   ..
       !! processed by numpydoc !!

.. py:method:: add_beam_net(beam_nodes: numpy.ndarray, edges: numpy.ndarray, mask: numpy.ndarray, pid=0, name: str = None) -> ansys.heart.preprocessor.mesh.objects.BeamMesh

   
   Add a BeamMesh object on the model.


   :Parameters:

       **beam_nodes** : :obj:`np.ndarray <numpy.ndarray>`
           new nodes coordinates.

       **edges** : :obj:`np.ndarray <numpy.ndarray>`
           beam elements connectivity
           If `mask` is true, it's Id of `beam_nodes` (start by 0),
           it will be offset when creating BeamMesh object.
           If `mask` is false, it's Id of existed nodes, it will not be offset.

       **mask** : :obj:`np.ndarray <numpy.ndarray>`
           with the same shape of `edges`

       **pid** : :class:`python:int`, :obj:`optional`
           part Id, will be reassigned when writing, by default 0

       **name** : :class:`python:str`, :obj:`optional`
           name, by default None

   :Returns:

       :obj:`BeamMesh`
           BeamMesh object













   ..
       !! processed by numpydoc !!

.. py:method:: load_input()

   
   Use the content in model info to load the input model.
















   ..
       !! processed by numpydoc !!

.. py:method:: mesh_volume(use_wrapper: bool = False, overwrite_existing_mesh: bool = True, path_to_fluent_mesh: str = None)

   
   Remesh the input model and fill the volume.


   :Parameters:

       **use_wrapper** : :ref:`bool <python:bltin-boolean-values>`, :obj:`optional`
           Flag for switch to non-manifold mesher, by default False

       **overwrite_existing_mesh** : :ref:`bool <python:bltin-boolean-values>`, :obj:`optional`
           Flag indicating whether to overwrite the existing .msh.h5 mesh, by default True

       **path_to_fluent_mesh** : :class:`python:str`, :obj:`optional`
           Path to the generated Fluent .msh.h5 mesh, by default None









   .. rubric:: Notes

   Note that when the input surfaces are non-manifold the wrapper tries
   to reconstruct the surface and parts. Inevitably this leads to
   reconstruction errors. Nevertheless, in many instances this approach is
   robuster than meshing from a manifold surface. Moreover, any clear interface
   between parts is potentially lost.





   ..
       !! processed by numpydoc !!

.. py:method:: get_part(name: str, by_substring: bool = False) -> Union[ansys.heart.preprocessor.mesh.objects.Part, None]

   
   Get specific part based on part name.
















   ..
       !! processed by numpydoc !!

.. py:method:: add_part(part_name: str) -> None

   
   Dynamically add a part as an attribute to the object.
















   ..
       !! processed by numpydoc !!

.. py:method:: remove_part(part_name: str) -> None

   
   Remove a part with a specific name from the model.
















   ..
       !! processed by numpydoc !!

.. py:method:: summary() -> dict

   
   Get summary information of the model as a ditionary.
















   ..
       !! processed by numpydoc !!

.. py:method:: print_info() -> None

   
   Print information about the model.
















   ..
       !! processed by numpydoc !!

.. py:method:: dump_model(filename: Union[pathlib.Path, str] = None)

   
   Save model to .pickle file.


   :Parameters:

       **filename** : :obj:`pathlib.Path` | :class:`python:str`, :obj:`optional`
           Path where the model will be saved, by default None

   :Returns:

       :class:`python:str`
           Path to where the model is saved.










   .. rubric:: Examples

   >>> model.dump_model("my_heart_model.pickle")



   ..
       !! processed by numpydoc !!

.. py:method:: plot_mesh(show_edges: bool = True, color_by: str = 'part-id')

   
   Plot the volume mesh of the heart model.


   :Parameters:

       **show_edges** : :ref:`bool <python:bltin-boolean-values>`, :obj:`optional`
           Whether to plot the edges, by default True

       **color_by** : :class:`python:str`, :obj:`optional`
           Color by cell/point data, by default "part-id"











   .. rubric:: Examples

   >>> import ansys.heart.preprocessor.models as models
   >>> model = models.HeartModel.load_model("heart_model.pickle")
   >>> model.plot_mesh(show_edges=True)



   ..
       !! processed by numpydoc !!

.. py:method:: plot_part(part: ansys.heart.preprocessor.mesh.objects.Part)

   
   Plot a part in mesh.


   :Parameters:

       **part** : :obj:`Part`
           part to highlight in mesh











   .. rubric:: Examples

   >>> import ansys.heart.preprocessor.models as models
   >>> model = models.HeartModel.load_model("my_model.pickle")
   >>> model.part(model.left_ventricle)



   ..
       !! processed by numpydoc !!

.. py:method:: plot_fibers(n_seed_points: int = 1000)

   
   Plot the mesh and fibers as streamlines.


   :Parameters:

       **plot_raw_mesh** : :ref:`bool <python:bltin-boolean-values>`, :obj:`optional`
           Flag indicating whether to plot the streamlines on the raw mesh, by default False

       **n_seed_points** : :class:`python:int`, :obj:`optional`
           Number of seed points. Recommended to use 5000, by default 1000











   .. rubric:: Examples

   >>> import ansys.heart.preprocessor.models as models
   >>> model = models.HeartModel.load_model("my_model.pickle")
   >>> model.plot_fibers(n_seed_points=5000)



   ..
       !! processed by numpydoc !!

.. py:method:: plot_surfaces(show_edges: bool = True)

   
   Plot all the surfaces in the model.













   .. rubric:: Examples

   Import modules and load model.
   >>> import ansys.heart.preprocessor.models as models
   >>> model = models.HeartModel.load_model("my_model.pickle")
   Plot the model
   >>> model.plot(show_edges=True)



   ..
       !! processed by numpydoc !!

.. py:method:: plot_purkinje()

   
   Plot the mesh and Purkinje network.
















   ..
       !! processed by numpydoc !!

.. py:method:: load_model(filename: pathlib.Path)
   :staticmethod:

   
   Load a preprocessed model from file.













   .. rubric:: Examples

   >>> model = HeartModel.load_model("my_model.pickle")



   ..
       !! processed by numpydoc !!

.. py:method:: compute_left_ventricle_anatomy_axis(mv_center: Union[None, numpy.ndarray] = None, av_center: Union[None, numpy.ndarray] = None, first_cut_short_axis=0.2)

   
   Compute the long and short axes of the left ventricle.


   :Parameters:

       **mv_center** : :obj:`Union`\[:data:`python:None`, :obj:`np.ndarray <numpy.ndarray>`], :obj:`optional`
           mitral valve center, by default None

       **av_center** : :obj:`Union`\[:data:`python:None`, :obj:`np.ndarray <numpy.ndarray>`], :obj:`optional`
           aortic valve center, by default None

       **first_cut_short_axis** : :class:`python:float`, :obj:`optional`
           relative distance between mv center to apex, by default 0.2














   ..
       !! processed by numpydoc !!

.. py:method:: compute_left_ventricle_aha17(seg=17, p_junction=None) -> None

   
   Compute AHA17 label for left ventricle elements.


   :Parameters:

       **seg ::  default 17, or 16 segments**
           ..

       **p_junction: use CASIS definition for the first cut**
           ..














   ..
       !! processed by numpydoc !!

.. py:method:: compute_left_ventricle_element_cs()

   
   Compute elemental coordinate system for aha17 elements.
















   ..
       !! processed by numpydoc !!

.. py:method:: get_apex_node_set(part: Literal[left, right] = 'left', option: Literal[endocardium, epicardium, myocardium] = 'epicardium', radius: float = 3) -> numpy.ndarray

   
   Get a node set around apex point.


   :Parameters:

       **part** : left&quot;, &quot;right&quot;], :obj:`optional`
           on which part, by default "left"

       **option** : endocardium&quot;, &quot;epicardium&quot;, &quot;myocardium&quot;], :obj:`optional`
           on surface or in mesh, by default "epicardium"

       **radius** : :class:`python:float`, :obj:`optional`
           search in radius, by default 3

   :Returns:

       :obj:`np.ndarray <numpy.ndarray>`
           apex node set













   ..
       !! processed by numpydoc !!

.. py:method:: create_atrial_stiff_ring(radius: float = 2) -> Union[None, ansys.heart.preprocessor.mesh.objects.Part]

   
   Create a part for solids close to atrial caps.


   :Parameters:

       **radius** : :obj:`foat`, :obj:`optional`
           Influence region, by default 2

   :Returns:

       :obj:`Union`\[:data:`python:None`, :obj:`Part`]
           Part of atrial rings if created













   ..
       !! processed by numpydoc !!


